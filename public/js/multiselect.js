/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/grant/multiselect/vanillaSelectBox.js":
/*!****************************************************************!*\
  !*** ./resources/assets/grant/multiselect/vanillaSelectBox.js ***!
  \****************************************************************/
/***/ (() => {

eval("/*\nCopyright (C) Philippe Meyer 2019-2021\nDistributed under the MIT License\n\nvanillaSelectBox : v1.02 : Adding 2 new options \"itemsSeparator\" to change the default \",\" item separator showing in the button and translations.item to show the item in singular if there is only one.\nvanillaSelectBox : v1.01 : Removing useless code line 550,551 issue 71 by chchch\nvanillaSelectBox : v1.00 : Adding a package.json file\nvanillaSelectBox : v0.78 : Stop using inline styles in the main button. You can steal use keepInlineStyles:true to use the legacy behaviour\nvanillaSelectBox : v0.77 : Work on place holder with bastoune help => still seems to lose placeholder value on multiple dropdown checkall\nvanillaSelectBox : v0.76 : New changeTree function : to rebuild the original tree with new data + correcting empty() function\nvanillaSelectBox : v0.75 : Remote search ready + local search modification : when a check on optgroup checks children only\n                           if they not excluded from search.\nvanillaSelectBox : v0.72 : Remote search (WIP) bugfix [x] Select all duplicated\nvanillaSelectBox : v0.71 : Remote search (WIP) better code\nvanillaSelectBox : v0.70 : Remote search (WIP) for users to test\nvanillaSelectBox : v0.65 : Two levels: bug fix : groups are checked/unchecked when check all/uncheck all is clicked\nvanillaSelectBox : v0.64 : Two levels: groups are now checkable to check/uncheck the children options\nvanillaSelectBox : v0.63 : Two levels: one click on the group selects / unselects children\nvanillaSelectBox : v0.62 : New option: maxOptionWidth set a maximum width for each option for narrow menus\nvanillaSelectBox : v0.61 : New option: maxSelect, set a maximum to the selectable options in a multiple choice menu\nvanillaSelectBox : v0.60 : Two levels: Optgroups are now used to show two level dropdowns\nvanillaSelectBox : v0.59 : Bug fix : search box was overlapping first item in single selects\nvanillaSelectBox : v0.58 : Bug fixes\nvanillaSelectBox : v0.57 : Bug fix (minWidth option not honored)\nvanillaSelectBox : v0.56 : The multiselect checkboxes are a little smaller, maxWidth option is now working + added minWidth option as well\n                           The button has now a style attribute to protect its appearance\nvanillaSelectBox : v0.55 : All attributes from the original select options are copied to the selectBox element\nvanillaSelectBox : v0.54 : if all the options of the select are selected by the user then the check all checkbox is checked\nvanillaSelectBox : v0.53 : if all the options of the select are selected then the check all checkbox is checked\nvanillaSelectBox : v0.52 : Better support of select('all') => command is consistent with checkbox and selecting / deselecting while searching select / uncheck only the found items\nvanillaSelectBox : v0.51 : Translations for select all/clear all + minor css corrections + don't select disabled items\nvanillaSelectBox : v0.50 : PR by jaguerra2017 adding a select all/clear all check button + optgroup support !\nvanillaSelectBox : v0.41 : Bug corrected, the menu content was misplaced if a css transform was applied on a parent\nvanillaSelectBox : v0.40 : A click on one selectBox close the other opened boxes\nvanillaSelectBox : v0.35 : You can enable and disable items\nvanillaSelectBox : v0.30 : The menu stops moving around on window resize and scroll + z-index in order of creation for multiple instances\nvanillaSelectBox : v0.26 : Corrected bug in stayOpen mode with disable() function\nvanillaSelectBox : v0.25 : New option stayOpen, and the dropbox is no longer a dropbox but a nice multi-select\nprevious version : v0.24 : corrected bug affecting options with more than one class\nhttps://github.com/PhilippeMarcMeyer/vanillaSelectBox\n*/\nvar VSBoxCounter = function () {\n  var count = 0;\n  var instances = [];\n  return {\n    set: function set(instancePtr) {\n      instances.push({\n        offset: ++count,\n        ptr: instancePtr\n      });\n      return instances[instances.length - 1].offset;\n    },\n    remove: function remove(instanceNr) {\n      var temp = instances.filter(function (x) {\n        return x.offset != instanceNr;\n      });\n      instances = temp.splice(0);\n    },\n    closeAllButMe: function closeAllButMe(instanceNr) {\n      instances.forEach(function (x) {\n        if (x.offset != instanceNr) {\n          x.ptr.closeOrder();\n        }\n      });\n    }\n  };\n}();\n\nfunction vanillaSelectBox(domSelector, options) {\n  var self = this;\n  this.instanceOffset = VSBoxCounter.set(self);\n  this.domSelector = domSelector;\n  this.root = document.querySelector(domSelector);\n  this.rootToken = null;\n  this.main;\n  this.button;\n  this.title;\n  this.isMultiple = this.root.hasAttribute(\"multiple\");\n  this.multipleSize = this.isMultiple && this.root.hasAttribute(\"size\") ? parseInt(this.root.getAttribute(\"size\")) : -1;\n  this.isOptgroups = false;\n  this.currentOptgroup = 0;\n  this.drop;\n  this.top;\n  this.left;\n  this.options;\n  this.listElements;\n  this.isDisabled = false;\n  this.search = false;\n  this.searchZone = null;\n  this.inputBox = null;\n  this.disabledItems = [];\n  this.ulminWidth = 140;\n  this.ulmaxWidth = 280;\n  this.ulminHeight = 25;\n  this.maxOptionWidth = Infinity;\n  this.maxSelect = Infinity;\n  this.isInitRemote = false;\n  this.isSearchRemote = false;\n  this.onInit = null;\n  this.onSearch = null; // if isRemote is true : a user defined function that loads more options from the back\n\n  this.onInitSize = null;\n  this.forbidenAttributes = [\"class\", \"selected\", \"disabled\", \"data-text\", \"data-value\", \"style\"];\n  this.forbidenClasses = [\"active\", \"disabled\"];\n  this.userOptions = {\n    maxWidth: 500,\n    minWidth: -1,\n    maxHeight: 400,\n    translations: {\n      \"all\": \"All\",\n      \"item\": \"item\",\n      \"items\": \"items\",\n      \"selectAll\": \"Select All\",\n      \"clearAll\": \"Clear All\"\n    },\n    search: false,\n    placeHolder: \"\",\n    stayOpen: false,\n    disableSelectAll: false,\n    buttonItemsSeparator: \",\"\n  };\n  this.keepInlineStyles = true;\n  this.keepInlineCaretStyles = true;\n\n  if (options) {\n    if (options.itemsSeparator != undefined) {\n      this.userOptions.buttonItemsSeparator = options.itemsSeparator;\n    }\n\n    if (options.maxWidth != undefined) {\n      this.userOptions.maxWidth = options.maxWidth;\n    }\n\n    if (options.minWidth != undefined) {\n      this.userOptions.minWidth = options.minWidth;\n    }\n\n    if (options.maxHeight != undefined) {\n      this.userOptions.maxHeight = options.maxHeight;\n    }\n\n    if (options.translations != undefined) {\n      for (var property in options.translations) {\n        if (options.translations.hasOwnProperty(property)) {\n          if (this.userOptions.translations[property]) {\n            this.userOptions.translations[property] = options.translations[property];\n          }\n        }\n      }\n    }\n\n    if (options.placeHolder != undefined) {\n      this.userOptions.placeHolder = options.placeHolder;\n    }\n\n    if (options.search != undefined) {\n      this.search = options.search;\n    }\n\n    if (options.remote != undefined && options.remote) {\n      // user defined onInit  function\n      if (options.remote.onInit != undefined && typeof options.remote.onInit === 'function') {\n        this.onInit = options.remote.onInit;\n        this.isInitRemote = true;\n      }\n\n      if (options.remote.onInitSize != undefined) {\n        this.onInitSize = options.remote.onInitSize;\n        if (this.onInitSize < 3) this.onInitSize = 3;\n      } // user defined remote search function\n\n\n      if (options.remote.onSearch != undefined && typeof options.remote.onSearch === 'function') {\n        this.onSearch = options.remote.onSearch;\n        this.isSearchRemote = true;\n      }\n    }\n\n    if (options.stayOpen != undefined) {\n      this.userOptions.stayOpen = options.stayOpen;\n    }\n\n    if (options.disableSelectAll != undefined) {\n      this.userOptions.disableSelectAll = options.disableSelectAll;\n    }\n\n    if (options.maxSelect != undefined && !isNaN(options.maxSelect) && options.maxSelect >= 1) {\n      this.maxSelect = options.maxSelect;\n      this.userOptions.disableSelectAll = true;\n    }\n\n    if (options.maxOptionWidth != undefined && !isNaN(options.maxOptionWidth) && options.maxOptionWidth >= 20) {\n      this.maxOptionWidth = options.maxOptionWidth;\n      this.ulminWidth = options.maxOptionWidth + 60;\n      this.ulmaxWidth = options.maxOptionWidth + 60;\n    }\n\n    if (options.keepInlineStyles != undefined) {\n      this.keepInlineStyles = options.keepInlineStyles;\n    }\n\n    if (options.keepInlineCaretStyles != undefined) {\n      this.keepInlineCaretStyles = options.keepInlineCaretStyles;\n    }\n  }\n\n  this.closeOrder = function () {\n    var self = this;\n\n    if (!self.userOptions.stayOpen) {\n      self.drop.style.visibility = \"hidden\";\n\n      if (self.search) {\n        self.inputBox.value = \"\";\n        Array.prototype.slice.call(self.listElements).forEach(function (x) {\n          x.classList.remove(\"hide\");\n        });\n      }\n    }\n  };\n\n  this.getCssArray = function (selector) {\n    // Why inline css ? To protect the button display from foreign css files\n    var cssArray = [];\n\n    if (selector === \".vsb-main button\") {\n      cssArray = [{\n        \"key\": \"min-width\",\n        \"value\": \"120px\"\n      }, {\n        \"key\": \"border-radius\",\n        \"value\": \"0\"\n      }, {\n        \"key\": \"width\",\n        \"value\": \"100%\"\n      }, {\n        \"key\": \"text-align\",\n        \"value\": \"left\"\n      }, {\n        \"key\": \"z-index\",\n        \"value\": \"1\"\n      }, {\n        \"key\": \"color\",\n        \"value\": \"#333\"\n      }, {\n        \"key\": \"background\",\n        \"value\": \"white !important\"\n      }, {\n        \"key\": \"border\",\n        \"value\": \"1px solid #999 !important\"\n      }, {\n        \"key\": \"line-height\",\n        \"value\": \"20px\"\n      }, {\n        \"key\": \"font-size\",\n        \"value\": \"14px\"\n      }, {\n        \"key\": \"padding\",\n        \"value\": \"6px 12px\"\n      }];\n    }\n\n    return cssArrayToString(cssArray);\n\n    function cssArrayToString(cssList) {\n      var list = \"\";\n      cssList.forEach(function (x) {\n        list += x.key + \":\" + x.value + \";\";\n      });\n      return list;\n    }\n  };\n\n  this.init = function () {\n    var self = this;\n\n    if (self.isInitRemote) {\n      self.onInit(\"\", self.onInitSize).then(function (data) {\n        self.buildSelect(data);\n        self.createTree();\n      });\n    } else {\n      self.createTree();\n    }\n  };\n\n  this.createTree = function () {\n    this.rootToken = self.domSelector.replace(/[^A-Za-z0-9]+/, \"\");\n    this.root.style.display = \"none\";\n    var already = document.getElementById(\"btn-group-\" + this.rootToken);\n\n    if (already) {\n      already.remove();\n    }\n\n    this.main = document.createElement(\"div\");\n    this.root.parentNode.insertBefore(this.main, this.root.nextSibling);\n    this.main.classList.add(\"vsb-main\");\n    this.main.setAttribute(\"id\", \"btn-group-\" + this.rootToken);\n    this.main.style.marginLeft = this.main.style.marginLeft;\n\n    if (self.userOptions.stayOpen) {\n      this.main.style.minHeight = this.userOptions.maxHeight + 10 + \"px\";\n    }\n\n    if (self.userOptions.stayOpen) {\n      this.button = document.createElement(\"div\");\n    } else {\n      this.button = document.createElement(\"button\");\n\n      if (this.keepInlineStyles) {\n        var cssList = self.getCssArray(\".vsb-main button\");\n        this.button.setAttribute(\"style\", cssList);\n      }\n    }\n\n    this.button.style.maxWidth = this.userOptions.maxWidth + \"px\";\n\n    if (this.userOptions.minWidth !== -1) {\n      this.button.style.minWidth = this.userOptions.minWidth + \"px\";\n    }\n\n    this.main.appendChild(this.button);\n    this.title = document.createElement(\"span\");\n    this.button.appendChild(this.title);\n    this.title.classList.add(\"title\");\n    var caret = document.createElement(\"span\");\n    this.button.appendChild(caret);\n    caret.classList.add(\"caret\");\n\n    if (this.keepInlineCaretStyles) {\n      caret.style.position = \"absolute\";\n      caret.style.right = \"8px\";\n      caret.style.marginTop = \"8px\";\n    }\n\n    if (self.userOptions.stayOpen) {\n      caret.style.display = \"none\";\n      this.title.style.paddingLeft = \"20px\";\n      this.title.style.fontStyle = \"italic\";\n      this.title.style.verticalAlign = \"20%\";\n    }\n\n    this.drop = document.createElement(\"div\");\n    this.main.appendChild(this.drop);\n    this.drop.classList.add(\"vsb-menu\");\n    this.drop.style.zIndex = 2000 - this.instanceOffset;\n    this.ul = document.createElement(\"ul\");\n    this.drop.appendChild(this.ul);\n    this.ul.style.maxHeight = this.userOptions.maxHeight + \"px\";\n    this.ul.style.minWidth = this.ulminWidth + \"px\";\n    this.ul.style.maxWidth = this.ulmaxWidth + \"px\";\n    this.ul.style.minHeight = this.ulminHeight + \"px\";\n\n    if (this.isMultiple) {\n      this.ul.classList.add(\"multi\");\n\n      if (!self.userOptions.disableSelectAll) {\n        var selectAll = document.createElement(\"option\");\n        selectAll.setAttribute(\"value\", 'all');\n        selectAll.innerText = self.userOptions.translations.selectAll;\n        this.root.insertBefore(selectAll, this.root.hasChildNodes() ? this.root.childNodes[0] : null);\n      }\n    }\n\n    var selectedTexts = \"\";\n    var sep = \"\";\n    var nrActives = 0;\n\n    if (this.search) {\n      this.searchZone = document.createElement(\"div\");\n      this.ul.appendChild(this.searchZone);\n      this.searchZone.classList.add(\"vsb-js-search-zone\");\n      this.searchZone.style.zIndex = 2001 - this.instanceOffset;\n      this.inputBox = document.createElement(\"input\");\n      this.searchZone.appendChild(this.inputBox);\n      this.inputBox.setAttribute(\"type\", \"text\");\n      this.inputBox.setAttribute(\"id\", \"search_\" + this.rootToken);\n\n      if (this.maxOptionWidth < Infinity) {\n        this.searchZone.style.maxWidth = self.maxOptionWidth + 30 + \"px\";\n        this.inputBox.style.maxWidth = self.maxOptionWidth + 30 + \"px\";\n      }\n\n      var para = document.createElement(\"p\");\n      this.ul.appendChild(para);\n      para.style.fontSize = \"12px\";\n      para.innerHTML = \"&nbsp;\";\n      this.ul.addEventListener(\"scroll\", function (e) {\n        var y = this.scrollTop;\n        self.searchZone.parentNode.style.top = y + \"px\";\n      });\n    }\n\n    this.options = document.querySelectorAll(this.domSelector + \" > option\");\n    Array.prototype.slice.call(this.options).forEach(function (x) {\n      var text = x.textContent;\n      var value = x.value;\n      var originalAttrs;\n\n      if (x.hasAttributes()) {\n        originalAttrs = Array.prototype.slice.call(x.attributes).filter(function (a) {\n          return self.forbidenAttributes.indexOf(a.name) === -1;\n        });\n      }\n\n      var classes = x.getAttribute(\"class\");\n\n      if (classes) {\n        classes = classes.split(\" \").filter(function (c) {\n          return self.forbidenClasses.indexOf(c) === -1;\n        });\n      } else {\n        classes = [];\n      }\n\n      var li = document.createElement(\"li\");\n      var isSelected = x.hasAttribute(\"selected\");\n      var isDisabled = x.hasAttribute(\"disabled\");\n      self.ul.appendChild(li);\n      li.setAttribute(\"data-value\", value);\n      li.setAttribute(\"data-text\", text);\n\n      if (originalAttrs !== undefined) {\n        originalAttrs.forEach(function (a) {\n          li.setAttribute(a.name, a.value);\n        });\n      }\n\n      classes.forEach(function (x) {\n        li.classList.add(x);\n      });\n\n      if (self.maxOptionWidth < Infinity) {\n        li.classList.add(\"short\");\n        li.style.maxWidth = self.maxOptionWidth + \"px\";\n      }\n\n      if (isSelected) {\n        nrActives++;\n        selectedTexts += sep + text;\n        sep = self.userOptions.buttonItemsSeparator;\n        li.classList.add(\"active\");\n\n        if (!self.isMultiple) {\n          self.title.textContent = text;\n\n          if (classes.length != 0) {\n            classes.forEach(function (x) {\n              self.title.classList.add(x);\n            });\n          }\n        }\n      }\n\n      if (isDisabled) {\n        li.classList.add(\"disabled\");\n      }\n\n      li.appendChild(document.createTextNode(\" \" + text));\n    });\n\n    if (document.querySelector(self.domSelector + ' optgroup') !== null) {\n      self.isOptgroups = true;\n      self.options = document.querySelectorAll(self.domSelector + \" option\");\n      var groups = document.querySelectorAll(self.domSelector + ' optgroup');\n      Array.prototype.slice.call(groups).forEach(function (group) {\n        var groupOptions = group.querySelectorAll('option');\n        var li = document.createElement(\"li\");\n        var span = document.createElement(\"span\");\n        var iCheck = document.createElement(\"i\");\n        var labelElement = document.createElement(\"b\");\n        var dataWay = group.getAttribute(\"data-way\");\n        if (!dataWay) dataWay = \"closed\";\n        if (!dataWay || dataWay !== \"closed\" && dataWay !== \"open\") dataWay = \"closed\";\n        li.appendChild(span);\n        li.appendChild(iCheck);\n        self.ul.appendChild(li);\n        li.classList.add('grouped-option');\n        li.classList.add(dataWay);\n        self.currentOptgroup++;\n        var optId = self.rootToken + \"-opt-\" + self.currentOptgroup;\n        li.id = optId;\n        li.appendChild(labelElement);\n        labelElement.appendChild(document.createTextNode(group.label));\n        li.setAttribute(\"data-text\", group.label);\n        self.ul.appendChild(li);\n        Array.prototype.slice.call(groupOptions).forEach(function (x) {\n          var text = x.textContent;\n          var value = x.value;\n          var classes = x.getAttribute(\"class\");\n\n          if (classes) {\n            classes = classes.split(\" \");\n          } else {\n            classes = [];\n          }\n\n          classes.push(dataWay);\n          var li = document.createElement(\"li\");\n          var isSelected = x.hasAttribute(\"selected\");\n          self.ul.appendChild(li);\n          li.setAttribute(\"data-value\", value);\n          li.setAttribute(\"data-text\", text);\n          li.setAttribute(\"data-parent\", optId);\n\n          if (classes.length != 0) {\n            classes.forEach(function (x) {\n              li.classList.add(x);\n            });\n          }\n\n          if (isSelected) {\n            nrActives++;\n            selectedTexts += sep + text;\n            sep = self.userOptions.buttonItemsSeparator;\n            li.classList.add(\"active\");\n\n            if (!self.isMultiple) {\n              self.title.textContent = text;\n\n              if (classes.length != 0) {\n                classes.forEach(function (x) {\n                  self.title.classList.add(x);\n                });\n              }\n            }\n          }\n\n          li.appendChild(document.createTextNode(text));\n        });\n      });\n    }\n\n    var optionsLength = self.options.length - Number(!self.userOptions.disableSelectAll);\n\n    if (optionsLength == nrActives) {\n      // Bastoune idea to preserve the placeholder\n      var wordForAll = self.userOptions.translations.all;\n      selectedTexts = wordForAll;\n    } else if (self.multipleSize != -1) {\n      if (nrActives > self.multipleSize) {\n        var wordForItems = nrActives === 1 ? self.userOptions.translations.item : self.userOptions.translations.items;\n        selectedTexts = nrActives + \" \" + wordForItems;\n      }\n    }\n\n    if (self.isMultiple) {\n      self.title.innerHTML = selectedTexts;\n    }\n\n    if (self.userOptions.placeHolder != \"\" && self.title.textContent == \"\") {\n      self.title.textContent = self.userOptions.placeHolder;\n    }\n\n    self.listElements = self.drop.querySelectorAll(\"li:not(.grouped-option)\");\n\n    if (self.search) {\n      self.inputBox.addEventListener(\"keyup\", function (e) {\n        var searchValue = e.target.value.toUpperCase();\n        var searchValueLength = searchValue.length;\n        var nrFound = 0;\n        var nrChecked = 0;\n        var selectAll = null;\n\n        if (self.isSearchRemote) {\n          if (searchValueLength == 0) {\n            self.remoteSearchIntegrate(null);\n          } else if (searchValueLength >= 3) {\n            self.onSearch(searchValue).then(function (data) {\n              self.remoteSearchIntegrate(data);\n            });\n          }\n        } else {\n          if (searchValueLength < 3) {\n            Array.prototype.slice.call(self.listElements).forEach(function (x) {\n              if (x.getAttribute('data-value') === 'all') {\n                selectAll = x;\n              } else {\n                x.classList.remove(\"hidden-search\");\n                nrFound++;\n                nrChecked += x.classList.contains('active');\n              }\n            });\n          } else {\n            Array.prototype.slice.call(self.listElements).forEach(function (x) {\n              if (x.getAttribute('data-value') !== 'all') {\n                var text = x.getAttribute(\"data-text\").toUpperCase();\n\n                if (text.indexOf(searchValue) === -1 && x.getAttribute('data-value') !== 'all') {\n                  x.classList.add(\"hidden-search\");\n                } else {\n                  nrFound++;\n                  x.classList.remove(\"hidden-search\");\n                  nrChecked += x.classList.contains('active');\n                }\n              } else {\n                selectAll = x;\n              }\n            });\n          }\n\n          if (selectAll) {\n            if (nrFound === 0) {\n              selectAll.classList.add('disabled');\n            } else {\n              selectAll.classList.remove('disabled');\n            }\n\n            if (nrChecked !== nrFound) {\n              selectAll.classList.remove(\"active\");\n              selectAll.innerText = self.userOptions.translations.selectAll;\n              selectAll.setAttribute('data-selected', 'false');\n            } else {\n              selectAll.classList.add(\"active\");\n              selectAll.innerText = self.userOptions.translations.clearAll;\n              selectAll.setAttribute('data-selected', 'true');\n            }\n          }\n        }\n      });\n    }\n\n    if (self.userOptions.stayOpen) {\n      self.drop.style.visibility = \"visible\";\n      self.drop.style.boxShadow = \"none\";\n      self.drop.style.minHeight = this.userOptions.maxHeight + 10 + \"px\";\n      self.drop.style.position = \"relative\";\n      self.drop.style.left = \"0px\";\n      self.drop.style.top = \"0px\";\n      self.button.style.border = \"none\";\n    } else {\n      this.main.addEventListener(\"click\", function (e) {\n        if (self.isDisabled) return;\n        self.drop.style.visibility = \"visible\";\n        document.addEventListener(\"click\", docListener);\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (!self.userOptions.stayOpen) {\n          VSBoxCounter.closeAllButMe(self.instanceOffset);\n        }\n      });\n    }\n\n    this.drop.addEventListener(\"click\", function (e) {\n      if (self.isDisabled) return;\n      if (e.target.tagName === 'INPUT') return;\n      var isShowHideCommand = e.target.tagName === 'SPAN';\n      var isCheckCommand = e.target.tagName === 'I';\n      var liClicked = e.target.parentElement;\n\n      if (!liClicked.hasAttribute(\"data-value\")) {\n        if (liClicked.classList.contains(\"grouped-option\")) {\n          if (!isShowHideCommand && !isCheckCommand) return;\n          var oldClass, newClass;\n\n          if (isCheckCommand) {\n            // check or uncheck children\n            self.checkUncheckFromParent(liClicked);\n          } else {\n            //open or close\n            if (liClicked.classList.contains(\"open\")) {\n              oldClass = \"open\";\n              newClass = \"closed\";\n            } else {\n              oldClass = \"closed\";\n              newClass = \"open\";\n            }\n\n            liClicked.classList.remove(oldClass);\n            liClicked.classList.add(newClass);\n            var theChildren = self.drop.querySelectorAll(\"[data-parent='\" + liClicked.id + \"']\");\n            theChildren.forEach(function (x) {\n              x.classList.remove(oldClass);\n              x.classList.add(newClass);\n            });\n          }\n\n          return;\n        }\n      }\n\n      var choiceValue = e.target.getAttribute(\"data-value\");\n      var choiceText = e.target.getAttribute(\"data-text\");\n      var className = e.target.getAttribute(\"class\");\n\n      if (className && className.indexOf(\"disabled\") != -1) {\n        return;\n      }\n\n      if (className && className.indexOf(\"overflow\") != -1) {\n        return;\n      }\n\n      if (choiceValue === 'all') {\n        if (e.target.hasAttribute('data-selected') && e.target.getAttribute('data-selected') === 'true') {\n          self.setValue('none');\n        } else {\n          self.setValue('all');\n        }\n\n        return;\n      }\n\n      if (!self.isMultiple) {\n        self.root.value = choiceValue;\n        self.title.textContent = choiceText;\n\n        if (className) {\n          self.title.setAttribute(\"class\", className + \" title\");\n        } else {\n          self.title.setAttribute(\"class\", \"title\");\n        }\n\n        Array.prototype.slice.call(self.listElements).forEach(function (x) {\n          x.classList.remove(\"active\");\n        });\n\n        if (choiceText != \"\") {\n          e.target.classList.add(\"active\");\n        }\n\n        self.privateSendChange();\n\n        if (!self.userOptions.stayOpen) {\n          docListener();\n        }\n      } else {\n        var wasActive = false;\n\n        if (className) {\n          wasActive = className.indexOf(\"active\") != -1;\n        }\n\n        if (wasActive) {\n          e.target.classList.remove(\"active\");\n        } else {\n          e.target.classList.add(\"active\");\n        }\n\n        if (e.target.hasAttribute(\"data-parent\")) {\n          self.checkUncheckFromChild(e.target);\n        }\n\n        var _selectedTexts = \"\";\n        var _sep = \"\";\n        var _nrActives = 0;\n        var nrAll = 0;\n\n        for (var i = 0; i < self.options.length; i++) {\n          nrAll++;\n\n          if (self.options[i].value == choiceValue) {\n            self.options[i].selected = !wasActive;\n          }\n\n          if (self.options[i].selected) {\n            _nrActives++;\n            _selectedTexts += _sep + self.options[i].textContent;\n            _sep = self.userOptions.buttonItemsSeparator;\n          }\n        }\n\n        if (nrAll == _nrActives - Number(!self.userOptions.disableSelectAll)) {\n          var _wordForAll = self.userOptions.translations.all;\n          _selectedTexts = _wordForAll;\n        } else if (self.multipleSize != -1) {\n          if (_nrActives > self.multipleSize) {\n            var _wordForItems = _nrActives === 1 ? self.userOptions.translations.item : self.userOptions.translations.items;\n\n            _selectedTexts = _nrActives + \" \" + _wordForItems;\n          }\n        }\n\n        self.title.textContent = _selectedTexts;\n        self.checkSelectMax(_nrActives);\n        self.checkUncheckAll();\n        self.privateSendChange();\n      }\n\n      e.preventDefault();\n      e.stopPropagation();\n\n      if (self.userOptions.placeHolder != \"\" && self.title.textContent == \"\") {\n        self.title.textContent = self.userOptions.placeHolder;\n      }\n    });\n\n    function docListener() {\n      document.removeEventListener(\"click\", docListener);\n      self.drop.style.visibility = \"hidden\";\n\n      if (self.search) {\n        self.inputBox.value = \"\";\n        Array.prototype.slice.call(self.listElements).forEach(function (x) {\n          x.classList.remove(\"hidden-search\");\n        });\n      }\n    }\n  };\n\n  this.init();\n  this.checkUncheckAll();\n}\n\nvanillaSelectBox.prototype.buildSelect = function (data) {\n  var self = this;\n  if (data == null || data.length < 1) return;\n\n  if (!self.isOptgroups) {\n    self.isOptgroups = data[0].parent != undefined && data[0].parent != \"\";\n  }\n\n  if (self.isOptgroups) {\n    var groups = {};\n    data = data.filter(function (x) {\n      return x.parent != undefined && x.parent != \"\";\n    });\n    data.forEach(function (x) {\n      if (!groups[x.parent]) {\n        groups[x.parent] = true;\n      }\n    });\n\n    var _loop = function _loop(group) {\n      var anOptgroup = document.createElement(\"optgroup\");\n      anOptgroup.setAttribute(\"label\", group);\n      options = data.filter(function (x) {\n        return x.parent == group;\n      });\n      options.forEach(function (x) {\n        var anOption = document.createElement(\"option\");\n        anOption.value = x.value;\n        anOption.text = x.text;\n\n        if (x.selected) {\n          anOption.setAttribute(\"selected\", true);\n        }\n\n        anOptgroup.appendChild(anOption);\n      });\n      self.root.appendChild(anOptgroup);\n    };\n\n    for (var group in groups) {\n      _loop(group);\n    }\n  } else {\n    data.forEach(function (x) {\n      var anOption = document.createElement(\"option\");\n      anOption.value = x.value;\n      anOption.text = x.text;\n\n      if (x.selected) {\n        anOption.setAttribute(\"selected\", true);\n      }\n\n      self.root.appendChild(anOption);\n    });\n  }\n};\n\nvanillaSelectBox.prototype.remoteSearchIntegrate = function (data) {\n  var self = this;\n\n  if (data == null || data.length == 0) {\n    var dataChecked = self.optionsCheckedToData();\n    if (dataChecked) data = dataChecked.slice(0);\n    self.remoteSearchIntegrateIt(data);\n  } else {\n    var _dataChecked = self.optionsCheckedToData();\n\n    if (_dataChecked.length > 0) {\n      for (var i = data.length - 1; i >= 0; i--) {\n        if (_dataChecked.indexOf(data[i].id) != -1) {\n          data.slice(i, 1);\n        }\n      }\n    }\n\n    data = data.concat(_dataChecked);\n    self.remoteSearchIntegrateIt(data);\n  }\n};\n\nvanillaSelectBox.prototype.optionsCheckedToData = function () {\n  var self = this;\n  var dataChecked = [];\n  var treeOptions = self.ul.querySelectorAll(\"li.active:not(.grouped-option)\");\n  var keepParents = {};\n\n  if (treeOptions) {\n    Array.prototype.slice.call(treeOptions).forEach(function (x) {\n      var oneData = {\n        \"value\": x.getAttribute(\"data-value\"),\n        \"text\": x.getAttribute(\"data-text\"),\n        \"selected\": true\n      };\n\n      if (oneData.value !== \"all\") {\n        if (self.isOptgroups) {\n          var parentId = x.getAttribute(\"data-parent\");\n\n          if (keepParents[parentId] != undefined) {\n            oneData.parent = keepParents[parentId];\n          } else {\n            var parentPtr = self.ul.querySelector(\"#\" + parentId);\n            var parentName = parentPtr.getAttribute(\"data-text\");\n            keepParents[parentId] = parentName;\n            oneData.parent = parentName;\n          }\n        }\n\n        dataChecked.push(oneData);\n      }\n    });\n  }\n\n  return dataChecked;\n};\n\nvanillaSelectBox.prototype.removeOptionsNotChecked = function (data) {\n  var self = this;\n  var minimumSize = self.onInitSize;\n  var newSearchSize = data == null ? 0 : data.length;\n  var presentSize = self.root.length;\n\n  if (presentSize + newSearchSize > minimumSize) {\n    var maxToRemove = presentSize + newSearchSize - minimumSize - 1;\n    var removed = 0;\n\n    for (var i = self.root.length - 1; i >= 0; i--) {\n      if (self.root.options[i].selected == false) {\n        if (removed <= maxToRemove) {\n          removed++;\n          self.root.remove(i);\n        }\n      }\n    }\n  }\n};\n\nvanillaSelectBox.prototype.changeTree = function (data, options) {\n  var self = this;\n  self.empty();\n  self.remoteSearchIntegrateIt(data);\n\n  if (options && options.onSearch) {\n    if (typeof options.onSearch === 'function') {\n      self.onSearch = options.onSearch;\n      self.isSearchRemote = true;\n    }\n  }\n\n  self.listElements = this.drop.querySelectorAll(\"li:not(.grouped-option)\");\n};\n\nvanillaSelectBox.prototype.remoteSearchIntegrateIt = function (data) {\n  var self = this;\n  if (data == null || data.length == 0) return;\n\n  while (self.root.firstChild) {\n    self.root.removeChild(self.root.firstChild);\n  }\n\n  self.buildSelect(data);\n  self.reloadTree();\n};\n\nvanillaSelectBox.prototype.reloadTree = function () {\n  var self = this;\n  var lis = self.ul.querySelectorAll(\"li\");\n\n  if (lis != null) {\n    for (var i = lis.length - 1; i >= 0; i--) {\n      if (lis[i].getAttribute('data-value') !== 'all') {\n        self.ul.removeChild(lis[i]);\n      }\n    }\n  }\n\n  var selectedTexts = \"\";\n  var sep = \"\";\n  var nrActives = 0;\n  var nrAll = 0;\n\n  if (self.isOptgroups) {\n    if (document.querySelector(self.domSelector + ' optgroup') !== null) {\n      self.options = document.querySelectorAll(this.domSelector + \" option\");\n      var groups = document.querySelectorAll(this.domSelector + ' optgroup');\n      Array.prototype.slice.call(groups).forEach(function (group) {\n        var groupOptions = group.querySelectorAll('option');\n        var li = document.createElement(\"li\");\n        var span = document.createElement(\"span\");\n        var iCheck = document.createElement(\"i\");\n        var labelElement = document.createElement(\"b\");\n        var dataWay = group.getAttribute(\"data-way\");\n        if (!dataWay) dataWay = \"closed\";\n        if (!dataWay || dataWay !== \"closed\" && dataWay !== \"open\") dataWay = \"closed\";\n        li.appendChild(span);\n        li.appendChild(iCheck);\n        self.ul.appendChild(li);\n        li.classList.add('grouped-option');\n        li.classList.add(dataWay);\n        self.currentOptgroup++;\n        var optId = self.rootToken + \"-opt-\" + self.currentOptgroup;\n        li.id = optId;\n        li.appendChild(labelElement);\n        labelElement.appendChild(document.createTextNode(group.label));\n        li.setAttribute(\"data-text\", group.label);\n        self.ul.appendChild(li);\n        Array.prototype.slice.call(groupOptions).forEach(function (x) {\n          var text = x.textContent;\n          var value = x.value;\n          var classes = x.getAttribute(\"class\");\n\n          if (classes) {\n            classes = classes.split(\" \");\n          } else {\n            classes = [];\n          }\n\n          classes.push(dataWay);\n          var li = document.createElement(\"li\");\n          var isSelected = x.hasAttribute(\"selected\");\n          self.ul.appendChild(li);\n          li.setAttribute(\"data-value\", value);\n          li.setAttribute(\"data-text\", text);\n          li.setAttribute(\"data-parent\", optId);\n\n          if (classes.length != 0) {\n            classes.forEach(function (x) {\n              li.classList.add(x);\n            });\n          }\n\n          if (isSelected) {\n            nrActives++;\n            selectedTexts += sep + text;\n            sep = self.userOptions.buttonItemsSeparator;\n            li.classList.add(\"active\");\n\n            if (!self.isMultiple) {\n              self.title.textContent = text;\n\n              if (classes.length != 0) {\n                classes.forEach(function (x) {\n                  self.title.classList.add(x);\n                });\n              }\n            }\n          }\n\n          li.appendChild(document.createTextNode(text));\n        });\n      });\n    }\n\n    self.listElements = this.drop.querySelectorAll(\"li:not(.grouped-option)\");\n  } else {\n    self.options = self.root.querySelectorAll(\"option\");\n    Array.prototype.slice.call(self.options).forEach(function (x) {\n      var text = x.textContent;\n      var value = x.value;\n\n      if (value != \"all\") {\n        var originalAttrs;\n\n        if (x.hasAttributes()) {\n          originalAttrs = Array.prototype.slice.call(x.attributes).filter(function (a) {\n            return self.forbidenAttributes.indexOf(a.name) === -1;\n          });\n        }\n\n        var classes = x.getAttribute(\"class\");\n\n        if (classes) {\n          classes = classes.split(\" \").filter(function (c) {\n            return self.forbidenClasses.indexOf(c) === -1;\n          });\n        } else {\n          classes = [];\n        }\n\n        var li = document.createElement(\"li\");\n        var isSelected = x.hasAttribute(\"selected\");\n        var isDisabled = x.disabled;\n        self.ul.appendChild(li);\n        li.setAttribute(\"data-value\", value);\n        li.setAttribute(\"data-text\", text);\n\n        if (originalAttrs !== undefined) {\n          originalAttrs.forEach(function (a) {\n            li.setAttribute(a.name, a.value);\n          });\n        }\n\n        classes.forEach(function (x) {\n          li.classList.add(x);\n        });\n\n        if (self.maxOptionWidth < Infinity) {\n          li.classList.add(\"short\");\n          li.style.maxWidth = self.maxOptionWidth + \"px\";\n        }\n\n        if (isSelected) {\n          nrActives++;\n          selectedTexts += sep + text;\n          sep = self.userOptions.buttonItemsSeparator;\n          li.classList.add(\"active\");\n\n          if (!self.isMultiple) {\n            self.title.textContent = text;\n\n            if (classes.length != 0) {\n              classes.forEach(function (x) {\n                self.title.classList.add(x);\n              });\n            }\n          }\n        }\n\n        if (isDisabled) {\n          li.classList.add(\"disabled\");\n        }\n\n        li.appendChild(document.createTextNode(\" \" + text));\n      }\n    });\n  }\n};\n\nvanillaSelectBox.prototype.disableItems = function (values) {\n  var self = this;\n  var foundValues = [];\n\n  if (vanillaSelectBox_type(values) == \"string\") {\n    values = values.split(\",\");\n  }\n\n  if (vanillaSelectBox_type(values) == \"array\") {\n    Array.prototype.slice.call(self.options).forEach(function (x) {\n      if (values.indexOf(x.value) != -1) {\n        foundValues.push(x.value);\n        x.setAttribute(\"disabled\", \"\");\n      }\n    });\n  }\n\n  Array.prototype.slice.call(self.listElements).forEach(function (x) {\n    var val = x.getAttribute(\"data-value\");\n\n    if (foundValues.indexOf(val) != -1) {\n      x.classList.add(\"disabled\");\n    }\n  });\n};\n\nvanillaSelectBox.prototype.enableItems = function (values) {\n  var self = this;\n  var foundValues = [];\n\n  if (vanillaSelectBox_type(values) == \"string\") {\n    values = values.split(\",\");\n  }\n\n  if (vanillaSelectBox_type(values) == \"array\") {\n    Array.prototype.slice.call(self.options).forEach(function (x) {\n      if (values.indexOf(x.value) != -1) {\n        foundValues.push(x.value);\n        x.removeAttribute(\"disabled\");\n      }\n    });\n  }\n\n  Array.prototype.slice.call(self.listElements).forEach(function (x) {\n    if (foundValues.indexOf(x.getAttribute(\"data-value\")) != -1) {\n      x.classList.remove(\"disabled\");\n    }\n  });\n};\n\nvanillaSelectBox.prototype.checkSelectMax = function (nrActives) {\n  var self = this;\n  if (self.maxSelect == Infinity || !self.isMultiple) return;\n\n  if (self.maxSelect <= nrActives) {\n    Array.prototype.slice.call(self.listElements).forEach(function (x) {\n      if (x.hasAttribute('data-value')) {\n        if (!x.classList.contains('disabled') && !x.classList.contains('active')) {\n          x.classList.add(\"overflow\");\n        }\n      }\n    });\n  } else {\n    Array.prototype.slice.call(self.listElements).forEach(function (x) {\n      if (x.classList.contains('overflow')) {\n        x.classList.remove(\"overflow\");\n      }\n    });\n  }\n};\n\nvanillaSelectBox.prototype.checkUncheckFromChild = function (liClicked) {\n  var self = this;\n  var parentId = liClicked.getAttribute('data-parent');\n  var parentLi = document.getElementById(parentId);\n  if (!self.isMultiple) return;\n  var listElements = self.drop.querySelectorAll(\"li\");\n  var childrenElements = Array.prototype.slice.call(listElements).filter(function (el) {\n    return el.hasAttribute(\"data-parent\") && el.getAttribute('data-parent') == parentId && !el.classList.contains('hidden-search');\n  });\n  var nrChecked = 0;\n  var nrCheckable = childrenElements.length;\n  if (nrCheckable == 0) return;\n  childrenElements.forEach(function (el) {\n    if (el.classList.contains('active')) nrChecked++;\n  });\n\n  if (nrChecked === nrCheckable || nrChecked === 0) {\n    if (nrChecked === 0) {\n      parentLi.classList.remove(\"checked\");\n    } else {\n      parentLi.classList.add(\"checked\");\n    }\n  } else {\n    parentLi.classList.remove(\"checked\");\n  }\n};\n\nvanillaSelectBox.prototype.checkUncheckFromParent = function (liClicked) {\n  var self = this;\n  var parentId = liClicked.id;\n  if (!self.isMultiple) return;\n  var listElements = self.drop.querySelectorAll(\"li\");\n  var childrenElements = Array.prototype.slice.call(listElements).filter(function (el) {\n    return el.hasAttribute(\"data-parent\") && el.getAttribute('data-parent') == parentId && !el.classList.contains('hidden-search');\n  });\n  var nrChecked = 0;\n  var nrCheckable = childrenElements.length;\n  if (nrCheckable == 0) return;\n  childrenElements.forEach(function (el) {\n    if (el.classList.contains('active')) nrChecked++;\n  });\n\n  if (nrChecked === nrCheckable || nrChecked === 0) {\n    //check all or uncheckAll : just do the opposite\n    childrenElements.forEach(function (el) {\n      var event = document.createEvent('HTMLEvents');\n      event.initEvent('click', true, false);\n      el.dispatchEvent(event);\n    });\n\n    if (nrChecked === 0) {\n      liClicked.classList.add(\"checked\");\n    } else {\n      liClicked.classList.remove(\"checked\");\n    }\n  } else {\n    //check all\n    liClicked.classList.remove(\"checked\");\n    childrenElements.forEach(function (el) {\n      if (!el.classList.contains('active')) {\n        var event = document.createEvent('HTMLEvents');\n        event.initEvent('click', true, false);\n        el.dispatchEvent(event);\n      }\n    });\n  }\n};\n\nvanillaSelectBox.prototype.checkUncheckAll = function () {\n  var self = this;\n  if (!self.isMultiple) return;\n  var nrChecked = 0;\n  var nrCheckable = 0;\n  var checkAllElement = null;\n  if (self.listElements == null) return;\n  Array.prototype.slice.call(self.listElements).forEach(function (x) {\n    if (x.hasAttribute('data-value')) {\n      if (x.getAttribute('data-value') === 'all') {\n        checkAllElement = x;\n      }\n\n      if (x.getAttribute('data-value') !== 'all' && !x.classList.contains('hidden-search') && !x.classList.contains('disabled')) {\n        nrCheckable++;\n        nrChecked += x.classList.contains('active');\n      }\n    }\n  });\n\n  if (checkAllElement) {\n    if (nrChecked === nrCheckable) {\n      // check the checkAll checkbox\n      self.title.textContent = self.userOptions.translations.all;\n      checkAllElement.classList.add(\"active\");\n      checkAllElement.innerText = self.userOptions.translations.clearAll;\n      checkAllElement.setAttribute('data-selected', 'true');\n    } else if (nrChecked === 0) {\n      // uncheck the checkAll checkbox\n      self.title.textContent = self.userOptions.placeHolder;\n      checkAllElement.classList.remove(\"active\");\n      checkAllElement.innerText = self.userOptions.translations.selectAll;\n      checkAllElement.setAttribute('data-selected', 'false');\n    }\n  }\n};\n\nvanillaSelectBox.prototype.setValue = function (values) {\n  var self = this;\n  var listElements = self.drop.querySelectorAll(\"li\");\n\n  if (values == null || values == undefined || values == \"\") {\n    self.empty();\n  } else {\n    if (self.isMultiple) {\n      if (vanillaSelectBox_type(values) == \"string\") {\n        if (values === \"all\") {\n          values = [];\n          Array.prototype.slice.call(listElements).forEach(function (x) {\n            if (x.hasAttribute('data-value')) {\n              var value = x.getAttribute('data-value');\n\n              if (value !== 'all') {\n                if (!x.classList.contains('hidden-search') && !x.classList.contains('disabled')) {\n                  values.push(x.getAttribute('data-value'));\n                } // already checked (but hidden by search)\n\n\n                if (x.classList.contains('active')) {\n                  if (x.classList.contains('hidden-search') || x.classList.contains('disabled')) {\n                    values.push(value);\n                  }\n                }\n              } else {\n                x.classList.add(\"active\");\n              }\n            } else if (x.classList.contains('grouped-option')) {\n              x.classList.add(\"checked\");\n            }\n          });\n        } else if (values === \"none\") {\n          values = [];\n          Array.prototype.slice.call(listElements).forEach(function (x) {\n            if (x.hasAttribute('data-value')) {\n              var value = x.getAttribute('data-value');\n\n              if (value !== 'all') {\n                if (x.classList.contains('active')) {\n                  if (x.classList.contains('hidden-search') || x.classList.contains('disabled')) {\n                    values.push(value);\n                  }\n                }\n              }\n            } else if (x.classList.contains('grouped-option')) {\n              x.classList.remove(\"checked\");\n            }\n          });\n        } else {\n          values = values.split(\",\");\n        }\n      }\n\n      var foundValues = [];\n\n      if (vanillaSelectBox_type(values) == \"array\") {\n        Array.prototype.slice.call(self.options).forEach(function (x) {\n          if (values.indexOf(x.value) !== -1) {\n            x.selected = true;\n            foundValues.push(x.value);\n          } else {\n            x.selected = false;\n          }\n        });\n        var selectedTexts = \"\";\n        var sep = \"\";\n        var nrActives = 0;\n        var nrAll = 0;\n        Array.prototype.slice.call(listElements).forEach(function (x) {\n          if (x.value !== 'all') {\n            nrAll++;\n          }\n\n          if (foundValues.indexOf(x.getAttribute(\"data-value\")) != -1) {\n            x.classList.add(\"active\");\n            nrActives++;\n            selectedTexts += sep + x.getAttribute(\"data-text\");\n            sep = self.userOptions.buttonItemsSeparator;\n          } else {\n            x.classList.remove(\"active\");\n          }\n        });\n\n        if (nrAll == nrActives - Number(!self.userOptions.disableSelectAll)) {\n          var wordForAll = self.userOptions.translations.all;\n          selectedTexts = wordForAll;\n        } else if (self.multipleSize != -1) {\n          if (nrActives > self.multipleSize) {\n            var wordForItems = nrActives === 1 ? self.userOptions.translations.item : self.userOptions.translations.items;\n            selectedTexts = nrActives + \" \" + wordForItems;\n          }\n        }\n\n        self.title.textContent = selectedTexts;\n        self.privateSendChange();\n      }\n\n      self.checkUncheckAll();\n    } else {\n      var found = false;\n      var text = \"\";\n      var classNames = \"\";\n      Array.prototype.slice.call(listElements).forEach(function (x) {\n        var liVal = x.getAttribute(\"data-value\") == values;\n\n        if (liVal !== \"all\") {\n          if (liVal == values) {\n            x.classList.add(\"active\");\n            found = true;\n            text = x.getAttribute(\"data-text\");\n          } else {\n            x.classList.remove(\"active\");\n          }\n        }\n      });\n      Array.prototype.slice.call(self.options).forEach(function (x) {\n        if (x.value == values) {\n          x.selected = true;\n          className = x.getAttribute(\"class\");\n          if (!className) className = \"\";\n        } else {\n          x.selected = false;\n        }\n      });\n\n      if (found) {\n        self.title.textContent = text;\n\n        if (self.userOptions.placeHolder != \"\" && self.title.textContent == \"\") {\n          self.title.textContent = self.userOptions.placeHolder;\n        }\n\n        if (className != \"\") {\n          self.title.setAttribute(\"class\", className + \" title\");\n        } else {\n          self.title.setAttribute(\"class\", \"title\");\n        }\n      }\n    }\n  }\n};\n\nvanillaSelectBox.prototype.privateSendChange = function () {\n  var event = document.createEvent('HTMLEvents');\n  event.initEvent('change', true, false);\n  this.root.dispatchEvent(event);\n};\n\nvanillaSelectBox.prototype.empty = function () {\n  Array.prototype.slice.call(this.listElements).forEach(function (x) {\n    x.classList.remove(\"active\");\n  });\n  var parentElements = this.drop.querySelectorAll(\"li.grouped-option\");\n\n  if (parentElements) {\n    Array.prototype.slice.call(parentElements).forEach(function (x) {\n      x.classList.remove(\"checked\");\n    });\n  }\n\n  Array.prototype.slice.call(this.options).forEach(function (x) {\n    x.selected = false;\n  });\n  this.title.textContent = \"\";\n\n  if (this.userOptions.placeHolder != \"\" && this.title.textContent == \"\") {\n    this.title.textContent = this.userOptions.placeHolder;\n  }\n\n  this.checkUncheckAll();\n  this.privateSendChange();\n};\n\nvanillaSelectBox.prototype.destroy = function () {\n  var already = document.getElementById(\"btn-group-\" + this.rootToken);\n\n  if (already) {\n    VSBoxCounter.remove(this.instanceOffset);\n    already.remove();\n    this.root.style.display = \"inline-block\";\n  }\n};\n\nvanillaSelectBox.prototype.disable = function () {\n  var already = document.getElementById(\"btn-group-\" + this.rootToken);\n\n  if (already) {\n    button = already.querySelector(\"button\");\n    if (button) button.classList.add(\"disabled\");\n    this.isDisabled = true;\n  }\n};\n\nvanillaSelectBox.prototype.enable = function () {\n  var already = document.getElementById(\"btn-group-\" + this.rootToken);\n\n  if (already) {\n    button = already.querySelector(\"button\");\n    if (button) button.classList.remove(\"disabled\");\n    this.isDisabled = false;\n  }\n};\n\nvanillaSelectBox.prototype.showOptions = function () {\n  console.log(this.userOptions);\n}; // Polyfills for IE\n\n\nif (!('remove' in Element.prototype)) {\n  Element.prototype.remove = function () {\n    if (this.parentNode) {\n      this.parentNode.removeChild(this);\n    }\n  };\n}\n\nfunction vanillaSelectBox_type(target) {\n  var computedType = Object.prototype.toString.call(target);\n  var stripped = computedType.replace(\"[object \", \"\").replace(\"]\", \"\");\n  var lowercased = stripped.toLowerCase();\n  return lowercased;\n}\n\nvar selectAbout = new vanillaSelectBox(\"#about_place\", {\n  \"placeHolder\": \"Выберите несколько из списка\",\n  \"translations\": {\n    \"selectAll\": \"Выбрать все\",\n    \"all\": \"Выбраны все\",\n    \"items\": \"Об отеле\",\n    \"clearAll\": \"Очистить выбор\"\n  }\n});\nvar selectForChild = new vanillaSelectBox(\"#for_child\", {\n  \"placeHolder\": \"Выберите несколько из списка\",\n  \"translations\": {\n    \"selectAll\": \"Выбрать все\",\n    \"all\": \"Выбраны все\",\n    \"items\": \"Об отеле\",\n    \"clearAll\": \"Очистить выбор\"\n  }\n});\nvar selectForSpecial = new vanillaSelectBox(\"#for_special\", {\n  \"placeHolder\": \"Выберите несколько из списка\",\n  \"translations\": {\n    \"selectAll\": \"Выбрать все\",\n    \"all\": \"Выбраны все\",\n    \"items\": \"Об отеле\",\n    \"clearAll\": \"Очистить выбор\"\n  }\n});\nvar selectSeason = new vanillaSelectBox(\"#season\", {\n  \"placeHolder\": \"Выберите несколько из списка\",\n  \"translations\": {\n    \"selectAll\": \"Выбрать все\",\n    \"all\": \"Выбраны все\",\n    \"items\": \"Об отеле\",\n    \"clearAll\": \"Очистить выбор\"\n  }\n});\nvar services = new vanillaSelectBox(\"#services\", {\n  \"placeHolder\": \"Выберите несколько из списка\",\n  \"translations\": {\n    \"selectAll\": \"Выбрать все\",\n    \"all\": \"Выбраны все\",\n    \"items\": \"Об отеле\",\n    \"clearAll\": \"Очистить выбор\"\n  }\n});\nvar security = new vanillaSelectBox(\"#security\", {\n  \"placeHolder\": \"Выберите несколько из списка\",\n  \"translations\": {\n    \"selectAll\": \"Выбрать все\",\n    \"all\": \"Выбраны все\",\n    \"items\": \"Об отеле\",\n    \"clearAll\": \"Очистить выбор\"\n  }\n});\nvar on_area = new vanillaSelectBox(\"#on_area\", {\n  \"placeHolder\": \"Выберите несколько из списка\",\n  \"translations\": {\n    \"selectAll\": \"Выбрать все\",\n    \"all\": \"Выбраны все\",\n    \"items\": \"Об отеле\",\n    \"clearAll\": \"Очистить выбор\"\n  }\n});\nvar cooking_self = new vanillaSelectBox(\"#cooking-self\", {\n  \"placeHolder\": \"Выберите несколько из списка\",\n  \"translations\": {\n    \"selectAll\": \"Выбрать все\",\n    \"all\": \"Выбраны все\",\n    \"items\": \"Об отеле\",\n    \"clearAll\": \"Очистить выбор\"\n  }\n});\nvar breakfast_conp = new vanillaSelectBox(\"#breakfast-conp\", {\n  \"placeHolder\": \"Выберите несколько из списка\",\n  \"translations\": {\n    \"selectAll\": \"Выбрать все\",\n    \"all\": \"Выбраны все\",\n    \"items\": \"Об отеле\",\n    \"clearAll\": \"Очистить выбор\"\n  }\n});\nvar rest_kitchen = new vanillaSelectBox(\"#rest-kitchen\", {\n  \"placeHolder\": \"Выберите несколько из списка\",\n  \"translations\": {\n    \"selectAll\": \"Выбрать все\",\n    \"all\": \"Выбраны все\",\n    \"items\": \"Об отеле\",\n    \"clearAll\": \"Очистить выбор\"\n  }\n});\nvar eat_add = new vanillaSelectBox(\"#eat-add\", {\n  \"placeHolder\": \"Выберите несколько из списка\",\n  \"translations\": {\n    \"selectAll\": \"Выбрать все\",\n    \"all\": \"Выбраны все\",\n    \"items\": \"Об отеле\",\n    \"clearAll\": \"Очистить выбор\"\n  }\n});\nvar mounth = new vanillaSelectBox(\"#mounth\", {\n  \"placeHolder\": \"Выберите несколько из списка\",\n  \"translations\": {\n    \"selectAll\": \"Выбрать все\",\n    \"all\": \"Выбраны все\",\n    \"items\": \"Месяцы\",\n    \"clearAll\": \"Очистить выбор\"\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/grant/multiselect/vanillaSelectBox.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/grant/multiselect/vanillaSelectBox.js"]();
/******/ 	
/******/ })()
;