/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/grant/multiselect/vanillaSelectBox.js":
/*!****************************************************************!*\
  !*** ./resources/assets/grant/multiselect/vanillaSelectBox.js ***!
  \****************************************************************/
/***/ (() => {

eval("/*\nCopyright (C) Philippe Meyer 2019-2021\nDistributed under the MIT License \n\nvanillaSelectBox : v1.02 : Adding 2 new options \"itemsSeparator\" to change the default \",\" item separator showing in the button and translations.item to show the item in singular if there is only one.\nvanillaSelectBox : v1.01 : Removing useless code line 550,551 issue 71 by chchch\nvanillaSelectBox : v1.00 : Adding a package.json file \nvanillaSelectBox : v0.78 : Stop using inline styles in the main button. You can steal use keepInlineStyles:true to use the legacy behaviour\nvanillaSelectBox : v0.77 : Work on place holder with bastoune help => still seems to lose placeholder value on multiple dropdown checkall\nvanillaSelectBox : v0.76 : New changeTree function : to rebuild the original tree with new data + correcting empty() function\nvanillaSelectBox : v0.75 : Remote search ready + local search modification : when a check on optgroup checks children only \n                           if they not excluded from search.\nvanillaSelectBox : v0.72 : Remote search (WIP) bugfix [x] Select all duplicated\nvanillaSelectBox : v0.71 : Remote search (WIP) better code\nvanillaSelectBox : v0.70 : Remote search (WIP) for users to test\nvanillaSelectBox : v0.65 : Two levels: bug fix : groups are checked/unchecked when check all/uncheck all is clicked\nvanillaSelectBox : v0.64 : Two levels: groups are now checkable to check/uncheck the children options \nvanillaSelectBox : v0.63 : Two levels: one click on the group selects / unselects children\nvanillaSelectBox : v0.62 : New option: maxOptionWidth set a maximum width for each option for narrow menus\nvanillaSelectBox : v0.61 : New option: maxSelect, set a maximum to the selectable options in a multiple choice menu\nvanillaSelectBox : v0.60 : Two levels: Optgroups are now used to show two level dropdowns \nvanillaSelectBox : v0.59 : Bug fix : search box was overlapping first item in single selects\nvanillaSelectBox : v0.58 : Bug fixes\nvanillaSelectBox : v0.57 : Bug fix (minWidth option not honored)\nvanillaSelectBox : v0.56 : The multiselect checkboxes are a little smaller, maxWidth option is now working + added minWidth option as well\n                           The button has now a style attribute to protect its appearance \nvanillaSelectBox : v0.55 : All attributes from the original select options are copied to the selectBox element\nvanillaSelectBox : v0.54 : if all the options of the select are selected by the user then the check all checkbox is checked\nvanillaSelectBox : v0.53 : if all the options of the select are selected then the check all checkbox is checked\nvanillaSelectBox : v0.52 : Better support of select('all') => command is consistent with checkbox and selecting / deselecting while searching select / uncheck only the found items\nvanillaSelectBox : v0.51 : Translations for select all/clear all + minor css corrections + don't select disabled items\nvanillaSelectBox : v0.50 : PR by jaguerra2017 adding a select all/clear all check button + optgroup support !\nvanillaSelectBox : v0.41 : Bug corrected, the menu content was misplaced if a css transform was applied on a parent\nvanillaSelectBox : v0.40 : A click on one selectBox close the other opened boxes\nvanillaSelectBox : v0.35 : You can enable and disable items\nvanillaSelectBox : v0.30 : The menu stops moving around on window resize and scroll + z-index in order of creation for multiple instances\nvanillaSelectBox : v0.26 : Corrected bug in stayOpen mode with disable() function\nvanillaSelectBox : v0.25 : New option stayOpen, and the dropbox is no longer a dropbox but a nice multi-select\nprevious version : v0.24 : corrected bug affecting options with more than one class\nhttps://github.com/PhilippeMarcMeyer/vanillaSelectBox\n*/\nvar VSBoxCounter = function () {\n  var count = 0;\n  var instances = [];\n  return {\n    set: function set(instancePtr) {\n      instances.push({\n        offset: ++count,\n        ptr: instancePtr\n      });\n      return instances[instances.length - 1].offset;\n    },\n    remove: function remove(instanceNr) {\n      var temp = instances.filter(function (x) {\n        return x.offset != instanceNr;\n      });\n      instances = temp.splice(0);\n    },\n    closeAllButMe: function closeAllButMe(instanceNr) {\n      instances.forEach(function (x) {\n        if (x.offset != instanceNr) {\n          x.ptr.closeOrder();\n        }\n      });\n    }\n  };\n}();\n\nfunction vanillaSelectBox(domSelector, options) {\n  var self = this;\n  this.instanceOffset = VSBoxCounter.set(self);\n  this.domSelector = domSelector;\n  this.root = document.querySelector(domSelector);\n  this.rootToken = null;\n  this.main;\n  this.button;\n  this.title;\n  this.isMultiple = this.root.hasAttribute(\"multiple\");\n  this.multipleSize = this.isMultiple && this.root.hasAttribute(\"size\") ? parseInt(this.root.getAttribute(\"size\")) : -1;\n  this.isOptgroups = false;\n  this.currentOptgroup = 0;\n  this.drop;\n  this.top;\n  this.left;\n  this.options;\n  this.listElements;\n  this.isDisabled = false;\n  this.search = false;\n  this.searchZone = null;\n  this.inputBox = null;\n  this.disabledItems = [];\n  this.ulminWidth = 140;\n  this.ulmaxWidth = 280;\n  this.ulminHeight = 25;\n  this.maxOptionWidth = Infinity;\n  this.maxSelect = Infinity;\n  this.isInitRemote = false;\n  this.isSearchRemote = false;\n  this.onInit = null;\n  this.onSearch = null; // if isRemote is true : a user defined function that loads more options from the back\n\n  this.onInitSize = null;\n  this.forbidenAttributes = [\"class\", \"selected\", \"disabled\", \"data-text\", \"data-value\", \"style\"];\n  this.forbidenClasses = [\"active\", \"disabled\"];\n  this.userOptions = {\n    maxWidth: 500,\n    minWidth: -1,\n    maxHeight: 400,\n    translations: {\n      \"all\": \"All\",\n      \"item\": \"item\",\n      \"items\": \"items\",\n      \"selectAll\": \"Select All\",\n      \"clearAll\": \"Clear All\"\n    },\n    search: false,\n    placeHolder: \"\",\n    stayOpen: false,\n    disableSelectAll: false,\n    buttonItemsSeparator: \",\"\n  };\n  this.keepInlineStyles = true;\n  this.keepInlineCaretStyles = true;\n\n  if (options) {\n    if (options.itemsSeparator != undefined) {\n      this.userOptions.buttonItemsSeparator = options.itemsSeparator;\n    }\n\n    if (options.maxWidth != undefined) {\n      this.userOptions.maxWidth = options.maxWidth;\n    }\n\n    if (options.minWidth != undefined) {\n      this.userOptions.minWidth = options.minWidth;\n    }\n\n    if (options.maxHeight != undefined) {\n      this.userOptions.maxHeight = options.maxHeight;\n    }\n\n    if (options.translations != undefined) {\n      for (var property in options.translations) {\n        if (options.translations.hasOwnProperty(property)) {\n          if (this.userOptions.translations[property]) {\n            this.userOptions.translations[property] = options.translations[property];\n          }\n        }\n      }\n    }\n\n    if (options.placeHolder != undefined) {\n      this.userOptions.placeHolder = options.placeHolder;\n    }\n\n    if (options.search != undefined) {\n      this.search = options.search;\n    }\n\n    if (options.remote != undefined && options.remote) {\n      // user defined onInit  function\n      if (options.remote.onInit != undefined && typeof options.remote.onInit === 'function') {\n        this.onInit = options.remote.onInit;\n        this.isInitRemote = true;\n      }\n\n      if (options.remote.onInitSize != undefined) {\n        this.onInitSize = options.remote.onInitSize;\n        if (this.onInitSize < 3) this.onInitSize = 3;\n      } // user defined remote search function\n\n\n      if (options.remote.onSearch != undefined && typeof options.remote.onSearch === 'function') {\n        this.onSearch = options.remote.onSearch;\n        this.isSearchRemote = true;\n      }\n    }\n\n    if (options.stayOpen != undefined) {\n      this.userOptions.stayOpen = options.stayOpen;\n    }\n\n    if (options.disableSelectAll != undefined) {\n      this.userOptions.disableSelectAll = options.disableSelectAll;\n    }\n\n    if (options.maxSelect != undefined && !isNaN(options.maxSelect) && options.maxSelect >= 1) {\n      this.maxSelect = options.maxSelect;\n      this.userOptions.disableSelectAll = true;\n    }\n\n    if (options.maxOptionWidth != undefined && !isNaN(options.maxOptionWidth) && options.maxOptionWidth >= 20) {\n      this.maxOptionWidth = options.maxOptionWidth;\n      this.ulminWidth = options.maxOptionWidth + 60;\n      this.ulmaxWidth = options.maxOptionWidth + 60;\n    }\n\n    if (options.keepInlineStyles != undefined) {\n      this.keepInlineStyles = options.keepInlineStyles;\n    }\n\n    if (options.keepInlineCaretStyles != undefined) {\n      this.keepInlineCaretStyles = options.keepInlineCaretStyles;\n    }\n  }\n\n  this.closeOrder = function () {\n    var self = this;\n\n    if (!self.userOptions.stayOpen) {\n      self.drop.style.visibility = \"hidden\";\n\n      if (self.search) {\n        self.inputBox.value = \"\";\n        Array.prototype.slice.call(self.listElements).forEach(function (x) {\n          x.classList.remove(\"hide\");\n        });\n      }\n    }\n  };\n\n  this.getCssArray = function (selector) {\n    // Why inline css ? To protect the button display from foreign css files\n    var cssArray = [];\n\n    if (selector === \".vsb-main button\") {\n      cssArray = [{\n        \"key\": \"min-width\",\n        \"value\": \"120px\"\n      }, {\n        \"key\": \"border-radius\",\n        \"value\": \"0\"\n      }, {\n        \"key\": \"width\",\n        \"value\": \"100%\"\n      }, {\n        \"key\": \"text-align\",\n        \"value\": \"left\"\n      }, {\n        \"key\": \"z-index\",\n        \"value\": \"1\"\n      }, {\n        \"key\": \"color\",\n        \"value\": \"#333\"\n      }, {\n        \"key\": \"background\",\n        \"value\": \"white !important\"\n      }, {\n        \"key\": \"border\",\n        \"value\": \"1px solid #999 !important\"\n      }, {\n        \"key\": \"line-height\",\n        \"value\": \"20px\"\n      }, {\n        \"key\": \"font-size\",\n        \"value\": \"14px\"\n      }, {\n        \"key\": \"padding\",\n        \"value\": \"6px 12px\"\n      }];\n    }\n\n    return cssArrayToString(cssArray);\n\n    function cssArrayToString(cssList) {\n      var list = \"\";\n      cssList.forEach(function (x) {\n        list += x.key + \":\" + x.value + \";\";\n      });\n      return list;\n    }\n  };\n\n  this.init = function () {\n    var self = this;\n\n    if (self.isInitRemote) {\n      self.onInit(\"\", self.onInitSize).then(function (data) {\n        self.buildSelect(data);\n        self.createTree();\n      });\n    } else {\n      self.createTree();\n    }\n  };\n\n  this.createTree = function () {\n    this.rootToken = self.domSelector.replace(/[^A-Za-z0-9]+/, \"\");\n    this.root.style.display = \"none\";\n    var already = document.getElementById(\"btn-group-\" + this.rootToken);\n\n    if (already) {\n      already.remove();\n    }\n\n    this.main = document.createElement(\"div\");\n    this.root.parentNode.insertBefore(this.main, this.root.nextSibling);\n    this.main.classList.add(\"vsb-main\");\n    this.main.setAttribute(\"id\", \"btn-group-\" + this.rootToken);\n    this.main.style.marginLeft = this.main.style.marginLeft;\n\n    if (self.userOptions.stayOpen) {\n      this.main.style.minHeight = this.userOptions.maxHeight + 10 + \"px\";\n    }\n\n    if (self.userOptions.stayOpen) {\n      this.button = document.createElement(\"div\");\n    } else {\n      this.button = document.createElement(\"button\");\n\n      if (this.keepInlineStyles) {\n        var cssList = self.getCssArray(\".vsb-main button\");\n        this.button.setAttribute(\"style\", cssList);\n      }\n    }\n\n    this.button.style.maxWidth = this.userOptions.maxWidth + \"px\";\n\n    if (this.userOptions.minWidth !== -1) {\n      this.button.style.minWidth = this.userOptions.minWidth + \"px\";\n    }\n\n    this.main.appendChild(this.button);\n    this.title = document.createElement(\"span\");\n    this.button.appendChild(this.title);\n    this.title.classList.add(\"title\");\n    var caret = document.createElement(\"span\");\n    this.button.appendChild(caret);\n    caret.classList.add(\"caret\");\n\n    if (this.keepInlineCaretStyles) {\n      caret.style.position = \"absolute\";\n      caret.style.right = \"8px\";\n      caret.style.marginTop = \"8px\";\n    }\n\n    if (self.userOptions.stayOpen) {\n      caret.style.display = \"none\";\n      this.title.style.paddingLeft = \"20px\";\n      this.title.style.fontStyle = \"italic\";\n      this.title.style.verticalAlign = \"20%\";\n    }\n\n    this.drop = document.createElement(\"div\");\n    this.main.appendChild(this.drop);\n    this.drop.classList.add(\"vsb-menu\");\n    this.drop.style.zIndex = 2000 - this.instanceOffset;\n    this.ul = document.createElement(\"ul\");\n    this.drop.appendChild(this.ul);\n    this.ul.style.maxHeight = this.userOptions.maxHeight + \"px\";\n    this.ul.style.minWidth = this.ulminWidth + \"px\";\n    this.ul.style.maxWidth = this.ulmaxWidth + \"px\";\n    this.ul.style.minHeight = this.ulminHeight + \"px\";\n\n    if (this.isMultiple) {\n      this.ul.classList.add(\"multi\");\n\n      if (!self.userOptions.disableSelectAll) {\n        var selectAll = document.createElement(\"option\");\n        selectAll.setAttribute(\"value\", 'all');\n        selectAll.innerText = self.userOptions.translations.selectAll;\n        this.root.insertBefore(selectAll, this.root.hasChildNodes() ? this.root.childNodes[0] : null);\n      }\n    }\n\n    var selectedTexts = \"\";\n    var sep = \"\";\n    var nrActives = 0;\n\n    if (this.search) {\n      this.searchZone = document.createElement(\"div\");\n      this.ul.appendChild(this.searchZone);\n      this.searchZone.classList.add(\"vsb-js-search-zone\");\n      this.searchZone.style.zIndex = 2001 - this.instanceOffset;\n      this.inputBox = document.createElement(\"input\");\n      this.searchZone.appendChild(this.inputBox);\n      this.inputBox.setAttribute(\"type\", \"text\");\n      this.inputBox.setAttribute(\"id\", \"search_\" + this.rootToken);\n\n      if (this.maxOptionWidth < Infinity) {\n        this.searchZone.style.maxWidth = self.maxOptionWidth + 30 + \"px\";\n        this.inputBox.style.maxWidth = self.maxOptionWidth + 30 + \"px\";\n      }\n\n      var para = document.createElement(\"p\");\n      this.ul.appendChild(para);\n      para.style.fontSize = \"12px\";\n      para.innerHTML = \"&nbsp;\";\n      this.ul.addEventListener(\"scroll\", function (e) {\n        var y = this.scrollTop;\n        self.searchZone.parentNode.style.top = y + \"px\";\n      });\n    }\n\n    this.options = document.querySelectorAll(this.domSelector + \" > option\");\n    Array.prototype.slice.call(this.options).forEach(function (x) {\n      var text = x.textContent;\n      var value = x.value;\n      var originalAttrs;\n\n      if (x.hasAttributes()) {\n        originalAttrs = Array.prototype.slice.call(x.attributes).filter(function (a) {\n          return self.forbidenAttributes.indexOf(a.name) === -1;\n        });\n      }\n\n      var classes = x.getAttribute(\"class\");\n\n      if (classes) {\n        classes = classes.split(\" \").filter(function (c) {\n          return self.forbidenClasses.indexOf(c) === -1;\n        });\n      } else {\n        classes = [];\n      }\n\n      var li = document.createElement(\"li\");\n      var isSelected = x.hasAttribute(\"selected\");\n      var isDisabled = x.hasAttribute(\"disabled\");\n      self.ul.appendChild(li);\n      li.setAttribute(\"data-value\", value);\n      li.setAttribute(\"data-text\", text);\n\n      if (originalAttrs !== undefined) {\n        originalAttrs.forEach(function (a) {\n          li.setAttribute(a.name, a.value);\n        });\n      }\n\n      classes.forEach(function (x) {\n        li.classList.add(x);\n      });\n\n      if (self.maxOptionWidth < Infinity) {\n        li.classList.add(\"short\");\n        li.style.maxWidth = self.maxOptionWidth + \"px\";\n      }\n\n      if (isSelected) {\n        nrActives++;\n        selectedTexts += sep + text;\n        sep = self.userOptions.buttonItemsSeparator;\n        li.classList.add(\"active\");\n\n        if (!self.isMultiple) {\n          self.title.textContent = text;\n\n          if (classes.length != 0) {\n            classes.forEach(function (x) {\n              self.title.classList.add(x);\n            });\n          }\n        }\n      }\n\n      if (isDisabled) {\n        li.classList.add(\"disabled\");\n      }\n\n      li.appendChild(document.createTextNode(\" \" + text));\n    });\n\n    if (document.querySelector(self.domSelector + ' optgroup') !== null) {\n      self.isOptgroups = true;\n      self.options = document.querySelectorAll(self.domSelector + \" option\");\n      var groups = document.querySelectorAll(self.domSelector + ' optgroup');\n      Array.prototype.slice.call(groups).forEach(function (group) {\n        var groupOptions = group.querySelectorAll('option');\n        var li = document.createElement(\"li\");\n        var span = document.createElement(\"span\");\n        var iCheck = document.createElement(\"i\");\n        var labelElement = document.createElement(\"b\");\n        var dataWay = group.getAttribute(\"data-way\");\n        if (!dataWay) dataWay = \"closed\";\n        if (!dataWay || dataWay !== \"closed\" && dataWay !== \"open\") dataWay = \"closed\";\n        li.appendChild(span);\n        li.appendChild(iCheck);\n        self.ul.appendChild(li);\n        li.classList.add('grouped-option');\n        li.classList.add(dataWay);\n        self.currentOptgroup++;\n        var optId = self.rootToken + \"-opt-\" + self.currentOptgroup;\n        li.id = optId;\n        li.appendChild(labelElement);\n        labelElement.appendChild(document.createTextNode(group.label));\n        li.setAttribute(\"data-text\", group.label);\n        self.ul.appendChild(li);\n        Array.prototype.slice.call(groupOptions).forEach(function (x) {\n          var text = x.textContent;\n          var value = x.value;\n          var classes = x.getAttribute(\"class\");\n\n          if (classes) {\n            classes = classes.split(\" \");\n          } else {\n            classes = [];\n          }\n\n          classes.push(dataWay);\n          var li = document.createElement(\"li\");\n          var isSelected = x.hasAttribute(\"selected\");\n          self.ul.appendChild(li);\n          li.setAttribute(\"data-value\", value);\n          li.setAttribute(\"data-text\", text);\n          li.setAttribute(\"data-parent\", optId);\n\n          if (classes.length != 0) {\n            classes.forEach(function (x) {\n              li.classList.add(x);\n            });\n          }\n\n          if (isSelected) {\n            nrActives++;\n            selectedTexts += sep + text;\n            sep = self.userOptions.buttonItemsSeparator;\n            li.classList.add(\"active\");\n\n            if (!self.isMultiple) {\n              self.title.textContent = text;\n\n              if (classes.length != 0) {\n                classes.forEach(function (x) {\n                  self.title.classList.add(x);\n                });\n              }\n            }\n          }\n\n          li.appendChild(document.createTextNode(text));\n        });\n      });\n    }\n\n    var optionsLength = self.options.length - Number(!self.userOptions.disableSelectAll);\n\n    if (optionsLength == nrActives) {\n      // Bastoune idea to preserve the placeholder\n      var wordForAll = self.userOptions.translations.all;\n      selectedTexts = wordForAll;\n    } else if (self.multipleSize != -1) {\n      if (nrActives > self.multipleSize) {\n        var wordForItems = nrActives === 1 ? self.userOptions.translations.item : self.userOptions.translations.items;\n        selectedTexts = nrActives + \" \" + wordForItems;\n      }\n    }\n\n    if (self.isMultiple) {\n      self.title.innerHTML = selectedTexts;\n    }\n\n    if (self.userOptions.placeHolder != \"\" && self.title.textContent == \"\") {\n      self.title.textContent = self.userOptions.placeHolder;\n    }\n\n    self.listElements = self.drop.querySelectorAll(\"li:not(.grouped-option)\");\n\n    if (self.search) {\n      self.inputBox.addEventListener(\"keyup\", function (e) {\n        var searchValue = e.target.value.toUpperCase();\n        var searchValueLength = searchValue.length;\n        var nrFound = 0;\n        var nrChecked = 0;\n        var selectAll = null;\n\n        if (self.isSearchRemote) {\n          if (searchValueLength == 0) {\n            self.remoteSearchIntegrate(null);\n          } else if (searchValueLength >= 3) {\n            self.onSearch(searchValue).then(function (data) {\n              self.remoteSearchIntegrate(data);\n            });\n          }\n        } else {\n          if (searchValueLength < 3) {\n            Array.prototype.slice.call(self.listElements).forEach(function (x) {\n              if (x.getAttribute('data-value') === 'all') {\n                selectAll = x;\n              } else {\n                x.classList.remove(\"hidden-search\");\n                nrFound++;\n                nrChecked += x.classList.contains('active');\n              }\n            });\n          } else {\n            Array.prototype.slice.call(self.listElements).forEach(function (x) {\n              if (x.getAttribute('data-value') !== 'all') {\n                var text = x.getAttribute(\"data-text\").toUpperCase();\n\n                if (text.indexOf(searchValue) === -1 && x.getAttribute('data-value') !== 'all') {\n                  x.classList.add(\"hidden-search\");\n                } else {\n                  nrFound++;\n                  x.classList.remove(\"hidden-search\");\n                  nrChecked += x.classList.contains('active');\n                }\n              } else {\n                selectAll = x;\n              }\n            });\n          }\n\n          if (selectAll) {\n            if (nrFound === 0) {\n              selectAll.classList.add('disabled');\n            } else {\n              selectAll.classList.remove('disabled');\n            }\n\n            if (nrChecked !== nrFound) {\n              selectAll.classList.remove(\"active\");\n              selectAll.innerText = self.userOptions.translations.selectAll;\n              selectAll.setAttribute('data-selected', 'false');\n            } else {\n              selectAll.classList.add(\"active\");\n              selectAll.innerText = self.userOptions.translations.clearAll;\n              selectAll.setAttribute('data-selected', 'true');\n            }\n          }\n        }\n      });\n    }\n\n    if (self.userOptions.stayOpen) {\n      self.drop.style.visibility = \"visible\";\n      self.drop.style.boxShadow = \"none\";\n      self.drop.style.minHeight = this.userOptions.maxHeight + 10 + \"px\";\n      self.drop.style.position = \"relative\";\n      self.drop.style.left = \"0px\";\n      self.drop.style.top = \"0px\";\n      self.button.style.border = \"none\";\n    } else {\n      this.main.addEventListener(\"click\", function (e) {\n        if (self.isDisabled) return;\n        self.drop.style.visibility = \"visible\";\n        document.addEventListener(\"click\", docListener);\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (!self.userOptions.stayOpen) {\n          VSBoxCounter.closeAllButMe(self.instanceOffset);\n        }\n      });\n    }\n\n    this.drop.addEventListener(\"click\", function (e) {\n      if (self.isDisabled) return;\n      if (e.target.tagName === 'INPUT') return;\n      var isShowHideCommand = e.target.tagName === 'SPAN';\n      var isCheckCommand = e.target.tagName === 'I';\n      var liClicked = e.target.parentElement;\n\n      if (!liClicked.hasAttribute(\"data-value\")) {\n        if (liClicked.classList.contains(\"grouped-option\")) {\n          if (!isShowHideCommand && !isCheckCommand) return;\n          var oldClass, newClass;\n\n          if (isCheckCommand) {\n            // check or uncheck children\n            self.checkUncheckFromParent(liClicked);\n          } else {\n            //open or close\n            if (liClicked.classList.contains(\"open\")) {\n              oldClass = \"open\";\n              newClass = \"closed\";\n            } else {\n              oldClass = \"closed\";\n              newClass = \"open\";\n            }\n\n            liClicked.classList.remove(oldClass);\n            liClicked.classList.add(newClass);\n            var theChildren = self.drop.querySelectorAll(\"[data-parent='\" + liClicked.id + \"']\");\n            theChildren.forEach(function (x) {\n              x.classList.remove(oldClass);\n              x.classList.add(newClass);\n            });\n          }\n\n          return;\n        }\n      }\n\n      var choiceValue = e.target.getAttribute(\"data-value\");\n      var choiceText = e.target.getAttribute(\"data-text\");\n      var className = e.target.getAttribute(\"class\");\n\n      if (className && className.indexOf(\"disabled\") != -1) {\n        return;\n      }\n\n      if (className && className.indexOf(\"overflow\") != -1) {\n        return;\n      }\n\n      if (choiceValue === 'all') {\n        if (e.target.hasAttribute('data-selected') && e.target.getAttribute('data-selected') === 'true') {\n          self.setValue('none');\n        } else {\n          self.setValue('all');\n        }\n\n        return;\n      }\n\n      if (!self.isMultiple) {\n        self.root.value = choiceValue;\n        self.title.textContent = choiceText;\n\n        if (className) {\n          self.title.setAttribute(\"class\", className + \" title\");\n        } else {\n          self.title.setAttribute(\"class\", \"title\");\n        }\n\n        Array.prototype.slice.call(self.listElements).forEach(function (x) {\n          x.classList.remove(\"active\");\n        });\n\n        if (choiceText != \"\") {\n          e.target.classList.add(\"active\");\n        }\n\n        self.privateSendChange();\n\n        if (!self.userOptions.stayOpen) {\n          docListener();\n        }\n      } else {\n        var wasActive = false;\n\n        if (className) {\n          wasActive = className.indexOf(\"active\") != -1;\n        }\n\n        if (wasActive) {\n          e.target.classList.remove(\"active\");\n        } else {\n          e.target.classList.add(\"active\");\n        }\n\n        if (e.target.hasAttribute(\"data-parent\")) {\n          self.checkUncheckFromChild(e.target);\n        }\n\n        var _selectedTexts = \"\";\n        var _sep = \"\";\n        var _nrActives = 0;\n        var nrAll = 0;\n\n        for (var i = 0; i < self.options.length; i++) {\n          nrAll++;\n\n          if (self.options[i].value == choiceValue) {\n            self.options[i].selected = !wasActive;\n          }\n\n          if (self.options[i].selected) {\n            _nrActives++;\n            _selectedTexts += _sep + self.options[i].textContent;\n            _sep = self.userOptions.buttonItemsSeparator;\n          }\n        }\n\n        if (nrAll == _nrActives - Number(!self.userOptions.disableSelectAll)) {\n          var _wordForAll = self.userOptions.translations.all;\n          _selectedTexts = _wordForAll;\n        } else if (self.multipleSize != -1) {\n          if (_nrActives > self.multipleSize) {\n            var _wordForItems = _nrActives === 1 ? self.userOptions.translations.item : self.userOptions.translations.items;\n\n            _selectedTexts = _nrActives + \" \" + _wordForItems;\n          }\n        }\n\n        self.title.textContent = _selectedTexts;\n        self.checkSelectMax(_nrActives);\n        self.checkUncheckAll();\n        self.privateSendChange();\n      }\n\n      e.preventDefault();\n      e.stopPropagation();\n\n      if (self.userOptions.placeHolder != \"\" && self.title.textContent == \"\") {\n        self.title.textContent = self.userOptions.placeHolder;\n      }\n    });\n\n    function docListener() {\n      document.removeEventListener(\"click\", docListener);\n      self.drop.style.visibility = \"hidden\";\n\n      if (self.search) {\n        self.inputBox.value = \"\";\n        Array.prototype.slice.call(self.listElements).forEach(function (x) {\n          x.classList.remove(\"hidden-search\");\n        });\n      }\n    }\n  };\n\n  this.init();\n  this.checkUncheckAll();\n}\n\nvanillaSelectBox.prototype.buildSelect = function (data) {\n  var self = this;\n  if (data == null || data.length < 1) return;\n\n  if (!self.isOptgroups) {\n    self.isOptgroups = data[0].parent != undefined && data[0].parent != \"\";\n  }\n\n  if (self.isOptgroups) {\n    var groups = {};\n    data = data.filter(function (x) {\n      return x.parent != undefined && x.parent != \"\";\n    });\n    data.forEach(function (x) {\n      if (!groups[x.parent]) {\n        groups[x.parent] = true;\n      }\n    });\n\n    var _loop = function _loop(group) {\n      var anOptgroup = document.createElement(\"optgroup\");\n      anOptgroup.setAttribute(\"label\", group);\n      options = data.filter(function (x) {\n        return x.parent == group;\n      });\n      options.forEach(function (x) {\n        var anOption = document.createElement(\"option\");\n        anOption.value = x.value;\n        anOption.text = x.text;\n\n        if (x.selected) {\n          anOption.setAttribute(\"selected\", true);\n        }\n\n        anOptgroup.appendChild(anOption);\n      });\n      self.root.appendChild(anOptgroup);\n    };\n\n    for (var group in groups) {\n      _loop(group);\n    }\n  } else {\n    data.forEach(function (x) {\n      var anOption = document.createElement(\"option\");\n      anOption.value = x.value;\n      anOption.text = x.text;\n\n      if (x.selected) {\n        anOption.setAttribute(\"selected\", true);\n      }\n\n      self.root.appendChild(anOption);\n    });\n  }\n};\n\nvanillaSelectBox.prototype.remoteSearchIntegrate = function (data) {\n  var self = this;\n\n  if (data == null || data.length == 0) {\n    var dataChecked = self.optionsCheckedToData();\n    if (dataChecked) data = dataChecked.slice(0);\n    self.remoteSearchIntegrateIt(data);\n  } else {\n    var _dataChecked = self.optionsCheckedToData();\n\n    if (_dataChecked.length > 0) {\n      for (var i = data.length - 1; i >= 0; i--) {\n        if (_dataChecked.indexOf(data[i].id) != -1) {\n          data.slice(i, 1);\n        }\n      }\n    }\n\n    data = data.concat(_dataChecked);\n    self.remoteSearchIntegrateIt(data);\n  }\n};\n\nvanillaSelectBox.prototype.optionsCheckedToData = function () {\n  var self = this;\n  var dataChecked = [];\n  var treeOptions = self.ul.querySelectorAll(\"li.active:not(.grouped-option)\");\n  var keepParents = {};\n\n  if (treeOptions) {\n    Array.prototype.slice.call(treeOptions).forEach(function (x) {\n      var oneData = {\n        \"value\": x.getAttribute(\"data-value\"),\n        \"text\": x.getAttribute(\"data-text\"),\n        \"selected\": true\n      };\n\n      if (oneData.value !== \"all\") {\n        if (self.isOptgroups) {\n          var parentId = x.getAttribute(\"data-parent\");\n\n          if (keepParents[parentId] != undefined) {\n            oneData.parent = keepParents[parentId];\n          } else {\n            var parentPtr = self.ul.querySelector(\"#\" + parentId);\n            var parentName = parentPtr.getAttribute(\"data-text\");\n            keepParents[parentId] = parentName;\n            oneData.parent = parentName;\n          }\n        }\n\n        dataChecked.push(oneData);\n      }\n    });\n  }\n\n  return dataChecked;\n};\n\nvanillaSelectBox.prototype.removeOptionsNotChecked = function (data) {\n  var self = this;\n  var minimumSize = self.onInitSize;\n  var newSearchSize = data == null ? 0 : data.length;\n  var presentSize = self.root.length;\n\n  if (presentSize + newSearchSize > minimumSize) {\n    var maxToRemove = presentSize + newSearchSize - minimumSize - 1;\n    var removed = 0;\n\n    for (var i = self.root.length - 1; i >= 0; i--) {\n      if (self.root.options[i].selected == false) {\n        if (removed <= maxToRemove) {\n          removed++;\n          self.root.remove(i);\n        }\n      }\n    }\n  }\n};\n\nvanillaSelectBox.prototype.changeTree = function (data, options) {\n  var self = this;\n  self.empty();\n  self.remoteSearchIntegrateIt(data);\n\n  if (options && options.onSearch) {\n    if (typeof options.onSearch === 'function') {\n      self.onSearch = options.onSearch;\n      self.isSearchRemote = true;\n    }\n  }\n\n  self.listElements = this.drop.querySelectorAll(\"li:not(.grouped-option)\");\n};\n\nvanillaSelectBox.prototype.remoteSearchIntegrateIt = function (data) {\n  var self = this;\n  if (data == null || data.length == 0) return;\n\n  while (self.root.firstChild) {\n    self.root.removeChild(self.root.firstChild);\n  }\n\n  self.buildSelect(data);\n  self.reloadTree();\n};\n\nvanillaSelectBox.prototype.reloadTree = function () {\n  var self = this;\n  var lis = self.ul.querySelectorAll(\"li\");\n\n  if (lis != null) {\n    for (var i = lis.length - 1; i >= 0; i--) {\n      if (lis[i].getAttribute('data-value') !== 'all') {\n        self.ul.removeChild(lis[i]);\n      }\n    }\n  }\n\n  var selectedTexts = \"\";\n  var sep = \"\";\n  var nrActives = 0;\n  var nrAll = 0;\n\n  if (self.isOptgroups) {\n    if (document.querySelector(self.domSelector + ' optgroup') !== null) {\n      self.options = document.querySelectorAll(this.domSelector + \" option\");\n      var groups = document.querySelectorAll(this.domSelector + ' optgroup');\n      Array.prototype.slice.call(groups).forEach(function (group) {\n        var groupOptions = group.querySelectorAll('option');\n        var li = document.createElement(\"li\");\n        var span = document.createElement(\"span\");\n        var iCheck = document.createElement(\"i\");\n        var labelElement = document.createElement(\"b\");\n        var dataWay = group.getAttribute(\"data-way\");\n        if (!dataWay) dataWay = \"closed\";\n        if (!dataWay || dataWay !== \"closed\" && dataWay !== \"open\") dataWay = \"closed\";\n        li.appendChild(span);\n        li.appendChild(iCheck);\n        self.ul.appendChild(li);\n        li.classList.add('grouped-option');\n        li.classList.add(dataWay);\n        self.currentOptgroup++;\n        var optId = self.rootToken + \"-opt-\" + self.currentOptgroup;\n        li.id = optId;\n        li.appendChild(labelElement);\n        labelElement.appendChild(document.createTextNode(group.label));\n        li.setAttribute(\"data-text\", group.label);\n        self.ul.appendChild(li);\n        Array.prototype.slice.call(groupOptions).forEach(function (x) {\n          var text = x.textContent;\n          var value = x.value;\n          var classes = x.getAttribute(\"class\");\n\n          if (classes) {\n            classes = classes.split(\" \");\n          } else {\n            classes = [];\n          }\n\n          classes.push(dataWay);\n          var li = document.createElement(\"li\");\n          var isSelected = x.hasAttribute(\"selected\");\n          self.ul.appendChild(li);\n          li.setAttribute(\"data-value\", value);\n          li.setAttribute(\"data-text\", text);\n          li.setAttribute(\"data-parent\", optId);\n\n          if (classes.length != 0) {\n            classes.forEach(function (x) {\n              li.classList.add(x);\n            });\n          }\n\n          if (isSelected) {\n            nrActives++;\n            selectedTexts += sep + text;\n            sep = self.userOptions.buttonItemsSeparator;\n            li.classList.add(\"active\");\n\n            if (!self.isMultiple) {\n              self.title.textContent = text;\n\n              if (classes.length != 0) {\n                classes.forEach(function (x) {\n                  self.title.classList.add(x);\n                });\n              }\n            }\n          }\n\n          li.appendChild(document.createTextNode(text));\n        });\n      });\n    }\n\n    self.listElements = this.drop.querySelectorAll(\"li:not(.grouped-option)\");\n  } else {\n    self.options = self.root.querySelectorAll(\"option\");\n    Array.prototype.slice.call(self.options).forEach(function (x) {\n      var text = x.textContent;\n      var value = x.value;\n\n      if (value != \"all\") {\n        var originalAttrs;\n\n        if (x.hasAttributes()) {\n          originalAttrs = Array.prototype.slice.call(x.attributes).filter(function (a) {\n            return self.forbidenAttributes.indexOf(a.name) === -1;\n          });\n        }\n\n        var classes = x.getAttribute(\"class\");\n\n        if (classes) {\n          classes = classes.split(\" \").filter(function (c) {\n            return self.forbidenClasses.indexOf(c) === -1;\n          });\n        } else {\n          classes = [];\n        }\n\n        var li = document.createElement(\"li\");\n        var isSelected = x.hasAttribute(\"selected\");\n        var isDisabled = x.disabled;\n        self.ul.appendChild(li);\n        li.setAttribute(\"data-value\", value);\n        li.setAttribute(\"data-text\", text);\n\n        if (originalAttrs !== undefined) {\n          originalAttrs.forEach(function (a) {\n            li.setAttribute(a.name, a.value);\n          });\n        }\n\n        classes.forEach(function (x) {\n          li.classList.add(x);\n        });\n\n        if (self.maxOptionWidth < Infinity) {\n          li.classList.add(\"short\");\n          li.style.maxWidth = self.maxOptionWidth + \"px\";\n        }\n\n        if (isSelected) {\n          nrActives++;\n          selectedTexts += sep + text;\n          sep = self.userOptions.buttonItemsSeparator;\n          li.classList.add(\"active\");\n\n          if (!self.isMultiple) {\n            self.title.textContent = text;\n\n            if (classes.length != 0) {\n              classes.forEach(function (x) {\n                self.title.classList.add(x);\n              });\n            }\n          }\n        }\n\n        if (isDisabled) {\n          li.classList.add(\"disabled\");\n        }\n\n        li.appendChild(document.createTextNode(\" \" + text));\n      }\n    });\n  }\n};\n\nvanillaSelectBox.prototype.disableItems = function (values) {\n  var self = this;\n  var foundValues = [];\n\n  if (vanillaSelectBox_type(values) == \"string\") {\n    values = values.split(\",\");\n  }\n\n  if (vanillaSelectBox_type(values) == \"array\") {\n    Array.prototype.slice.call(self.options).forEach(function (x) {\n      if (values.indexOf(x.value) != -1) {\n        foundValues.push(x.value);\n        x.setAttribute(\"disabled\", \"\");\n      }\n    });\n  }\n\n  Array.prototype.slice.call(self.listElements).forEach(function (x) {\n    var val = x.getAttribute(\"data-value\");\n\n    if (foundValues.indexOf(val) != -1) {\n      x.classList.add(\"disabled\");\n    }\n  });\n};\n\nvanillaSelectBox.prototype.enableItems = function (values) {\n  var self = this;\n  var foundValues = [];\n\n  if (vanillaSelectBox_type(values) == \"string\") {\n    values = values.split(\",\");\n  }\n\n  if (vanillaSelectBox_type(values) == \"array\") {\n    Array.prototype.slice.call(self.options).forEach(function (x) {\n      if (values.indexOf(x.value) != -1) {\n        foundValues.push(x.value);\n        x.removeAttribute(\"disabled\");\n      }\n    });\n  }\n\n  Array.prototype.slice.call(self.listElements).forEach(function (x) {\n    if (foundValues.indexOf(x.getAttribute(\"data-value\")) != -1) {\n      x.classList.remove(\"disabled\");\n    }\n  });\n};\n\nvanillaSelectBox.prototype.checkSelectMax = function (nrActives) {\n  var self = this;\n  if (self.maxSelect == Infinity || !self.isMultiple) return;\n\n  if (self.maxSelect <= nrActives) {\n    Array.prototype.slice.call(self.listElements).forEach(function (x) {\n      if (x.hasAttribute('data-value')) {\n        if (!x.classList.contains('disabled') && !x.classList.contains('active')) {\n          x.classList.add(\"overflow\");\n        }\n      }\n    });\n  } else {\n    Array.prototype.slice.call(self.listElements).forEach(function (x) {\n      if (x.classList.contains('overflow')) {\n        x.classList.remove(\"overflow\");\n      }\n    });\n  }\n};\n\nvanillaSelectBox.prototype.checkUncheckFromChild = function (liClicked) {\n  var self = this;\n  var parentId = liClicked.getAttribute('data-parent');\n  var parentLi = document.getElementById(parentId);\n  if (!self.isMultiple) return;\n  var listElements = self.drop.querySelectorAll(\"li\");\n  var childrenElements = Array.prototype.slice.call(listElements).filter(function (el) {\n    return el.hasAttribute(\"data-parent\") && el.getAttribute('data-parent') == parentId && !el.classList.contains('hidden-search');\n  });\n  var nrChecked = 0;\n  var nrCheckable = childrenElements.length;\n  if (nrCheckable == 0) return;\n  childrenElements.forEach(function (el) {\n    if (el.classList.contains('active')) nrChecked++;\n  });\n\n  if (nrChecked === nrCheckable || nrChecked === 0) {\n    if (nrChecked === 0) {\n      parentLi.classList.remove(\"checked\");\n    } else {\n      parentLi.classList.add(\"checked\");\n    }\n  } else {\n    parentLi.classList.remove(\"checked\");\n  }\n};\n\nvanillaSelectBox.prototype.checkUncheckFromParent = function (liClicked) {\n  var self = this;\n  var parentId = liClicked.id;\n  if (!self.isMultiple) return;\n  var listElements = self.drop.querySelectorAll(\"li\");\n  var childrenElements = Array.prototype.slice.call(listElements).filter(function (el) {\n    return el.hasAttribute(\"data-parent\") && el.getAttribute('data-parent') == parentId && !el.classList.contains('hidden-search');\n  });\n  var nrChecked = 0;\n  var nrCheckable = childrenElements.length;\n  if (nrCheckable == 0) return;\n  childrenElements.forEach(function (el) {\n    if (el.classList.contains('active')) nrChecked++;\n  });\n\n  if (nrChecked === nrCheckable || nrChecked === 0) {\n    //check all or uncheckAll : just do the opposite\n    childrenElements.forEach(function (el) {\n      var event = document.createEvent('HTMLEvents');\n      event.initEvent('click', true, false);\n      el.dispatchEvent(event);\n    });\n\n    if (nrChecked === 0) {\n      liClicked.classList.add(\"checked\");\n    } else {\n      liClicked.classList.remove(\"checked\");\n    }\n  } else {\n    //check all\n    liClicked.classList.remove(\"checked\");\n    childrenElements.forEach(function (el) {\n      if (!el.classList.contains('active')) {\n        var event = document.createEvent('HTMLEvents');\n        event.initEvent('click', true, false);\n        el.dispatchEvent(event);\n      }\n    });\n  }\n};\n\nvanillaSelectBox.prototype.checkUncheckAll = function () {\n  var self = this;\n  if (!self.isMultiple) return;\n  var nrChecked = 0;\n  var nrCheckable = 0;\n  var checkAllElement = null;\n  if (self.listElements == null) return;\n  Array.prototype.slice.call(self.listElements).forEach(function (x) {\n    if (x.hasAttribute('data-value')) {\n      if (x.getAttribute('data-value') === 'all') {\n        checkAllElement = x;\n      }\n\n      if (x.getAttribute('data-value') !== 'all' && !x.classList.contains('hidden-search') && !x.classList.contains('disabled')) {\n        nrCheckable++;\n        nrChecked += x.classList.contains('active');\n      }\n    }\n  });\n\n  if (checkAllElement) {\n    if (nrChecked === nrCheckable) {\n      // check the checkAll checkbox\n      self.title.textContent = self.userOptions.translations.all;\n      checkAllElement.classList.add(\"active\");\n      checkAllElement.innerText = self.userOptions.translations.clearAll;\n      checkAllElement.setAttribute('data-selected', 'true');\n    } else if (nrChecked === 0) {\n      // uncheck the checkAll checkbox\n      self.title.textContent = self.userOptions.placeHolder;\n      checkAllElement.classList.remove(\"active\");\n      checkAllElement.innerText = self.userOptions.translations.selectAll;\n      checkAllElement.setAttribute('data-selected', 'false');\n    }\n  }\n};\n\nvanillaSelectBox.prototype.setValue = function (values) {\n  var self = this;\n  var listElements = self.drop.querySelectorAll(\"li\");\n\n  if (values == null || values == undefined || values == \"\") {\n    self.empty();\n  } else {\n    if (self.isMultiple) {\n      if (vanillaSelectBox_type(values) == \"string\") {\n        if (values === \"all\") {\n          values = [];\n          Array.prototype.slice.call(listElements).forEach(function (x) {\n            if (x.hasAttribute('data-value')) {\n              var value = x.getAttribute('data-value');\n\n              if (value !== 'all') {\n                if (!x.classList.contains('hidden-search') && !x.classList.contains('disabled')) {\n                  values.push(x.getAttribute('data-value'));\n                } // already checked (but hidden by search)\n\n\n                if (x.classList.contains('active')) {\n                  if (x.classList.contains('hidden-search') || x.classList.contains('disabled')) {\n                    values.push(value);\n                  }\n                }\n              } else {\n                x.classList.add(\"active\");\n              }\n            } else if (x.classList.contains('grouped-option')) {\n              x.classList.add(\"checked\");\n            }\n          });\n        } else if (values === \"none\") {\n          values = [];\n          Array.prototype.slice.call(listElements).forEach(function (x) {\n            if (x.hasAttribute('data-value')) {\n              var value = x.getAttribute('data-value');\n\n              if (value !== 'all') {\n                if (x.classList.contains('active')) {\n                  if (x.classList.contains('hidden-search') || x.classList.contains('disabled')) {\n                    values.push(value);\n                  }\n                }\n              }\n            } else if (x.classList.contains('grouped-option')) {\n              x.classList.remove(\"checked\");\n            }\n          });\n        } else {\n          values = values.split(\",\");\n        }\n      }\n\n      var foundValues = [];\n\n      if (vanillaSelectBox_type(values) == \"array\") {\n        Array.prototype.slice.call(self.options).forEach(function (x) {\n          if (values.indexOf(x.value) !== -1) {\n            x.selected = true;\n            foundValues.push(x.value);\n          } else {\n            x.selected = false;\n          }\n        });\n        var selectedTexts = \"\";\n        var sep = \"\";\n        var nrActives = 0;\n        var nrAll = 0;\n        Array.prototype.slice.call(listElements).forEach(function (x) {\n          if (x.value !== 'all') {\n            nrAll++;\n          }\n\n          if (foundValues.indexOf(x.getAttribute(\"data-value\")) != -1) {\n            x.classList.add(\"active\");\n            nrActives++;\n            selectedTexts += sep + x.getAttribute(\"data-text\");\n            sep = self.userOptions.buttonItemsSeparator;\n          } else {\n            x.classList.remove(\"active\");\n          }\n        });\n\n        if (nrAll == nrActives - Number(!self.userOptions.disableSelectAll)) {\n          var wordForAll = self.userOptions.translations.all;\n          selectedTexts = wordForAll;\n        } else if (self.multipleSize != -1) {\n          if (nrActives > self.multipleSize) {\n            var wordForItems = nrActives === 1 ? self.userOptions.translations.item : self.userOptions.translations.items;\n            selectedTexts = nrActives + \" \" + wordForItems;\n          }\n        }\n\n        self.title.textContent = selectedTexts;\n        self.privateSendChange();\n      }\n\n      self.checkUncheckAll();\n    } else {\n      var found = false;\n      var text = \"\";\n      var classNames = \"\";\n      Array.prototype.slice.call(listElements).forEach(function (x) {\n        var liVal = x.getAttribute(\"data-value\") == values;\n\n        if (liVal !== \"all\") {\n          if (liVal == values) {\n            x.classList.add(\"active\");\n            found = true;\n            text = x.getAttribute(\"data-text\");\n          } else {\n            x.classList.remove(\"active\");\n          }\n        }\n      });\n      Array.prototype.slice.call(self.options).forEach(function (x) {\n        if (x.value == values) {\n          x.selected = true;\n          className = x.getAttribute(\"class\");\n          if (!className) className = \"\";\n        } else {\n          x.selected = false;\n        }\n      });\n\n      if (found) {\n        self.title.textContent = text;\n\n        if (self.userOptions.placeHolder != \"\" && self.title.textContent == \"\") {\n          self.title.textContent = self.userOptions.placeHolder;\n        }\n\n        if (className != \"\") {\n          self.title.setAttribute(\"class\", className + \" title\");\n        } else {\n          self.title.setAttribute(\"class\", \"title\");\n        }\n      }\n    }\n  }\n};\n\nvanillaSelectBox.prototype.privateSendChange = function () {\n  var event = document.createEvent('HTMLEvents');\n  event.initEvent('change', true, false);\n  this.root.dispatchEvent(event);\n};\n\nvanillaSelectBox.prototype.empty = function () {\n  Array.prototype.slice.call(this.listElements).forEach(function (x) {\n    x.classList.remove(\"active\");\n  });\n  var parentElements = this.drop.querySelectorAll(\"li.grouped-option\");\n\n  if (parentElements) {\n    Array.prototype.slice.call(parentElements).forEach(function (x) {\n      x.classList.remove(\"checked\");\n    });\n  }\n\n  Array.prototype.slice.call(this.options).forEach(function (x) {\n    x.selected = false;\n  });\n  this.title.textContent = \"\";\n\n  if (this.userOptions.placeHolder != \"\" && this.title.textContent == \"\") {\n    this.title.textContent = this.userOptions.placeHolder;\n  }\n\n  this.checkUncheckAll();\n  this.privateSendChange();\n};\n\nvanillaSelectBox.prototype.destroy = function () {\n  var already = document.getElementById(\"btn-group-\" + this.rootToken);\n\n  if (already) {\n    VSBoxCounter.remove(this.instanceOffset);\n    already.remove();\n    this.root.style.display = \"inline-block\";\n  }\n};\n\nvanillaSelectBox.prototype.disable = function () {\n  var already = document.getElementById(\"btn-group-\" + this.rootToken);\n\n  if (already) {\n    button = already.querySelector(\"button\");\n    if (button) button.classList.add(\"disabled\");\n    this.isDisabled = true;\n  }\n};\n\nvanillaSelectBox.prototype.enable = function () {\n  var already = document.getElementById(\"btn-group-\" + this.rootToken);\n\n  if (already) {\n    button = already.querySelector(\"button\");\n    if (button) button.classList.remove(\"disabled\");\n    this.isDisabled = false;\n  }\n};\n\nvanillaSelectBox.prototype.showOptions = function () {\n  console.log(this.userOptions);\n}; // Polyfills for IE\n\n\nif (!('remove' in Element.prototype)) {\n  Element.prototype.remove = function () {\n    if (this.parentNode) {\n      this.parentNode.removeChild(this);\n    }\n  };\n}\n\nfunction vanillaSelectBox_type(target) {\n  var computedType = Object.prototype.toString.call(target);\n  var stripped = computedType.replace(\"[object \", \"\").replace(\"]\", \"\");\n  var lowercased = stripped.toLowerCase();\n  return lowercased;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2dyYW50L211bHRpc2VsZWN0L3ZhbmlsbGFTZWxlY3RCb3guanM/YjgxYyJdLCJuYW1lcyI6WyJWU0JveENvdW50ZXIiLCJjb3VudCIsImluc3RhbmNlcyIsInNldCIsImluc3RhbmNlUHRyIiwicHVzaCIsIm9mZnNldCIsInB0ciIsImxlbmd0aCIsInJlbW92ZSIsImluc3RhbmNlTnIiLCJ0ZW1wIiwiZmlsdGVyIiwieCIsInNwbGljZSIsImNsb3NlQWxsQnV0TWUiLCJmb3JFYWNoIiwiY2xvc2VPcmRlciIsInZhbmlsbGFTZWxlY3RCb3giLCJkb21TZWxlY3RvciIsIm9wdGlvbnMiLCJzZWxmIiwiaW5zdGFuY2VPZmZzZXQiLCJyb290IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwicm9vdFRva2VuIiwibWFpbiIsImJ1dHRvbiIsInRpdGxlIiwiaXNNdWx0aXBsZSIsImhhc0F0dHJpYnV0ZSIsIm11bHRpcGxlU2l6ZSIsInBhcnNlSW50IiwiZ2V0QXR0cmlidXRlIiwiaXNPcHRncm91cHMiLCJjdXJyZW50T3B0Z3JvdXAiLCJkcm9wIiwidG9wIiwibGVmdCIsImxpc3RFbGVtZW50cyIsImlzRGlzYWJsZWQiLCJzZWFyY2giLCJzZWFyY2hab25lIiwiaW5wdXRCb3giLCJkaXNhYmxlZEl0ZW1zIiwidWxtaW5XaWR0aCIsInVsbWF4V2lkdGgiLCJ1bG1pbkhlaWdodCIsIm1heE9wdGlvbldpZHRoIiwiSW5maW5pdHkiLCJtYXhTZWxlY3QiLCJpc0luaXRSZW1vdGUiLCJpc1NlYXJjaFJlbW90ZSIsIm9uSW5pdCIsIm9uU2VhcmNoIiwib25Jbml0U2l6ZSIsImZvcmJpZGVuQXR0cmlidXRlcyIsImZvcmJpZGVuQ2xhc3NlcyIsInVzZXJPcHRpb25zIiwibWF4V2lkdGgiLCJtaW5XaWR0aCIsIm1heEhlaWdodCIsInRyYW5zbGF0aW9ucyIsInBsYWNlSG9sZGVyIiwic3RheU9wZW4iLCJkaXNhYmxlU2VsZWN0QWxsIiwiYnV0dG9uSXRlbXNTZXBhcmF0b3IiLCJrZWVwSW5saW5lU3R5bGVzIiwia2VlcElubGluZUNhcmV0U3R5bGVzIiwiaXRlbXNTZXBhcmF0b3IiLCJ1bmRlZmluZWQiLCJwcm9wZXJ0eSIsImhhc093blByb3BlcnR5IiwicmVtb3RlIiwiaXNOYU4iLCJzdHlsZSIsInZpc2liaWxpdHkiLCJ2YWx1ZSIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJjYWxsIiwiY2xhc3NMaXN0IiwiZ2V0Q3NzQXJyYXkiLCJzZWxlY3RvciIsImNzc0FycmF5IiwiY3NzQXJyYXlUb1N0cmluZyIsImNzc0xpc3QiLCJsaXN0Iiwia2V5IiwiaW5pdCIsInRoZW4iLCJkYXRhIiwiYnVpbGRTZWxlY3QiLCJjcmVhdGVUcmVlIiwicmVwbGFjZSIsImRpc3BsYXkiLCJhbHJlYWR5IiwiZ2V0RWxlbWVudEJ5SWQiLCJjcmVhdGVFbGVtZW50IiwicGFyZW50Tm9kZSIsImluc2VydEJlZm9yZSIsIm5leHRTaWJsaW5nIiwiYWRkIiwic2V0QXR0cmlidXRlIiwibWFyZ2luTGVmdCIsIm1pbkhlaWdodCIsImFwcGVuZENoaWxkIiwiY2FyZXQiLCJwb3NpdGlvbiIsInJpZ2h0IiwibWFyZ2luVG9wIiwicGFkZGluZ0xlZnQiLCJmb250U3R5bGUiLCJ2ZXJ0aWNhbEFsaWduIiwiekluZGV4IiwidWwiLCJzZWxlY3RBbGwiLCJpbm5lclRleHQiLCJoYXNDaGlsZE5vZGVzIiwiY2hpbGROb2RlcyIsInNlbGVjdGVkVGV4dHMiLCJzZXAiLCJuckFjdGl2ZXMiLCJwYXJhIiwiZm9udFNpemUiLCJpbm5lckhUTUwiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInkiLCJzY3JvbGxUb3AiLCJxdWVyeVNlbGVjdG9yQWxsIiwidGV4dCIsInRleHRDb250ZW50Iiwib3JpZ2luYWxBdHRycyIsImhhc0F0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwiYSIsImluZGV4T2YiLCJuYW1lIiwiY2xhc3NlcyIsInNwbGl0IiwiYyIsImxpIiwiaXNTZWxlY3RlZCIsImNyZWF0ZVRleHROb2RlIiwiZ3JvdXBzIiwiZ3JvdXAiLCJncm91cE9wdGlvbnMiLCJzcGFuIiwiaUNoZWNrIiwibGFiZWxFbGVtZW50IiwiZGF0YVdheSIsIm9wdElkIiwiaWQiLCJsYWJlbCIsIm9wdGlvbnNMZW5ndGgiLCJOdW1iZXIiLCJ3b3JkRm9yQWxsIiwiYWxsIiwid29yZEZvckl0ZW1zIiwiaXRlbSIsIml0ZW1zIiwic2VhcmNoVmFsdWUiLCJ0YXJnZXQiLCJ0b1VwcGVyQ2FzZSIsInNlYXJjaFZhbHVlTGVuZ3RoIiwibnJGb3VuZCIsIm5yQ2hlY2tlZCIsInJlbW90ZVNlYXJjaEludGVncmF0ZSIsImNvbnRhaW5zIiwiY2xlYXJBbGwiLCJib3hTaGFkb3ciLCJib3JkZXIiLCJkb2NMaXN0ZW5lciIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwidGFnTmFtZSIsImlzU2hvd0hpZGVDb21tYW5kIiwiaXNDaGVja0NvbW1hbmQiLCJsaUNsaWNrZWQiLCJwYXJlbnRFbGVtZW50Iiwib2xkQ2xhc3MiLCJuZXdDbGFzcyIsImNoZWNrVW5jaGVja0Zyb21QYXJlbnQiLCJ0aGVDaGlsZHJlbiIsImNob2ljZVZhbHVlIiwiY2hvaWNlVGV4dCIsImNsYXNzTmFtZSIsInNldFZhbHVlIiwicHJpdmF0ZVNlbmRDaGFuZ2UiLCJ3YXNBY3RpdmUiLCJjaGVja1VuY2hlY2tGcm9tQ2hpbGQiLCJuckFsbCIsImkiLCJzZWxlY3RlZCIsImNoZWNrU2VsZWN0TWF4IiwiY2hlY2tVbmNoZWNrQWxsIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInBhcmVudCIsImFuT3B0Z3JvdXAiLCJhbk9wdGlvbiIsImRhdGFDaGVja2VkIiwib3B0aW9uc0NoZWNrZWRUb0RhdGEiLCJyZW1vdGVTZWFyY2hJbnRlZ3JhdGVJdCIsImNvbmNhdCIsInRyZWVPcHRpb25zIiwia2VlcFBhcmVudHMiLCJvbmVEYXRhIiwicGFyZW50SWQiLCJwYXJlbnRQdHIiLCJwYXJlbnROYW1lIiwicmVtb3ZlT3B0aW9uc05vdENoZWNrZWQiLCJtaW5pbXVtU2l6ZSIsIm5ld1NlYXJjaFNpemUiLCJwcmVzZW50U2l6ZSIsIm1heFRvUmVtb3ZlIiwicmVtb3ZlZCIsImNoYW5nZVRyZWUiLCJlbXB0eSIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsInJlbG9hZFRyZWUiLCJsaXMiLCJkaXNhYmxlZCIsImRpc2FibGVJdGVtcyIsInZhbHVlcyIsImZvdW5kVmFsdWVzIiwidmFuaWxsYVNlbGVjdEJveF90eXBlIiwidmFsIiwiZW5hYmxlSXRlbXMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJwYXJlbnRMaSIsImNoaWxkcmVuRWxlbWVudHMiLCJlbCIsIm5yQ2hlY2thYmxlIiwiZXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJjaGVja0FsbEVsZW1lbnQiLCJmb3VuZCIsImNsYXNzTmFtZXMiLCJsaVZhbCIsInBhcmVudEVsZW1lbnRzIiwiZGVzdHJveSIsImRpc2FibGUiLCJlbmFibGUiLCJzaG93T3B0aW9ucyIsImNvbnNvbGUiLCJsb2ciLCJFbGVtZW50IiwiY29tcHV0ZWRUeXBlIiwiT2JqZWN0IiwidG9TdHJpbmciLCJzdHJpcHBlZCIsImxvd2VyY2FzZWQiLCJ0b0xvd2VyQ2FzZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLElBQUlBLFlBQVksR0FBRyxZQUFZO0FBQzNCLE1BQUlDLEtBQUssR0FBRyxDQUFaO0FBQ0EsTUFBSUMsU0FBUyxHQUFHLEVBQWhCO0FBQ0EsU0FBTztBQUNIQyxJQUFBQSxHQUFHLEVBQUUsYUFBVUMsV0FBVixFQUF1QjtBQUN4QkYsTUFBQUEsU0FBUyxDQUFDRyxJQUFWLENBQWU7QUFBRUMsUUFBQUEsTUFBTSxFQUFFLEVBQUVMLEtBQVo7QUFBbUJNLFFBQUFBLEdBQUcsRUFBRUg7QUFBeEIsT0FBZjtBQUNBLGFBQU9GLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDTSxNQUFWLEdBQW1CLENBQXBCLENBQVQsQ0FBZ0NGLE1BQXZDO0FBQ0gsS0FKRTtBQUtIRyxJQUFBQSxNQUFNLEVBQUUsZ0JBQVVDLFVBQVYsRUFBc0I7QUFDMUIsVUFBSUMsSUFBSSxHQUFHVCxTQUFTLENBQUNVLE1BQVYsQ0FBaUIsVUFBVUMsQ0FBVixFQUFhO0FBQ3JDLGVBQU9BLENBQUMsQ0FBQ1AsTUFBRixJQUFZSSxVQUFuQjtBQUNILE9BRlUsQ0FBWDtBQUdBUixNQUFBQSxTQUFTLEdBQUdTLElBQUksQ0FBQ0csTUFBTCxDQUFZLENBQVosQ0FBWjtBQUNILEtBVkU7QUFXSEMsSUFBQUEsYUFBYSxFQUFFLHVCQUFVTCxVQUFWLEVBQXNCO0FBQ2pDUixNQUFBQSxTQUFTLENBQUNjLE9BQVYsQ0FBa0IsVUFBVUgsQ0FBVixFQUFhO0FBQzNCLFlBQUlBLENBQUMsQ0FBQ1AsTUFBRixJQUFZSSxVQUFoQixFQUE0QjtBQUN4QkcsVUFBQUEsQ0FBQyxDQUFDTixHQUFGLENBQU1VLFVBQU47QUFDSDtBQUNKLE9BSkQ7QUFLSDtBQWpCRSxHQUFQO0FBbUJILENBdEJrQixFQUFuQjs7QUF3QkEsU0FBU0MsZ0JBQVQsQ0FBMEJDLFdBQTFCLEVBQXVDQyxPQUF2QyxFQUFnRDtBQUM1QyxNQUFJQyxJQUFJLEdBQUcsSUFBWDtBQUNBLE9BQUtDLGNBQUwsR0FBc0J0QixZQUFZLENBQUNHLEdBQWIsQ0FBaUJrQixJQUFqQixDQUF0QjtBQUNBLE9BQUtGLFdBQUwsR0FBbUJBLFdBQW5CO0FBQ0EsT0FBS0ksSUFBTCxHQUFZQyxRQUFRLENBQUNDLGFBQVQsQ0FBdUJOLFdBQXZCLENBQVo7QUFDQSxPQUFLTyxTQUFMLEdBQWlCLElBQWpCO0FBQ0EsT0FBS0MsSUFBTDtBQUNBLE9BQUtDLE1BQUw7QUFDQSxPQUFLQyxLQUFMO0FBQ0EsT0FBS0MsVUFBTCxHQUFrQixLQUFLUCxJQUFMLENBQVVRLFlBQVYsQ0FBdUIsVUFBdkIsQ0FBbEI7QUFDQSxPQUFLQyxZQUFMLEdBQW9CLEtBQUtGLFVBQUwsSUFBbUIsS0FBS1AsSUFBTCxDQUFVUSxZQUFWLENBQXVCLE1BQXZCLENBQW5CLEdBQW9ERSxRQUFRLENBQUMsS0FBS1YsSUFBTCxDQUFVVyxZQUFWLENBQXVCLE1BQXZCLENBQUQsQ0FBNUQsR0FBK0YsQ0FBQyxDQUFwSDtBQUNBLE9BQUtDLFdBQUwsR0FBbUIsS0FBbkI7QUFDQSxPQUFLQyxlQUFMLEdBQXVCLENBQXZCO0FBQ0EsT0FBS0MsSUFBTDtBQUNBLE9BQUtDLEdBQUw7QUFDQSxPQUFLQyxJQUFMO0FBQ0EsT0FBS25CLE9BQUw7QUFDQSxPQUFLb0IsWUFBTDtBQUNBLE9BQUtDLFVBQUwsR0FBa0IsS0FBbEI7QUFDQSxPQUFLQyxNQUFMLEdBQWMsS0FBZDtBQUNBLE9BQUtDLFVBQUwsR0FBa0IsSUFBbEI7QUFDQSxPQUFLQyxRQUFMLEdBQWdCLElBQWhCO0FBQ0EsT0FBS0MsYUFBTCxHQUFxQixFQUFyQjtBQUNBLE9BQUtDLFVBQUwsR0FBa0IsR0FBbEI7QUFDQSxPQUFLQyxVQUFMLEdBQWtCLEdBQWxCO0FBQ0EsT0FBS0MsV0FBTCxHQUFtQixFQUFuQjtBQUNBLE9BQUtDLGNBQUwsR0FBc0JDLFFBQXRCO0FBQ0EsT0FBS0MsU0FBTCxHQUFpQkQsUUFBakI7QUFDQSxPQUFLRSxZQUFMLEdBQW9CLEtBQXBCO0FBQ0EsT0FBS0MsY0FBTCxHQUFzQixLQUF0QjtBQUNBLE9BQUtDLE1BQUwsR0FBYyxJQUFkO0FBQ0EsT0FBS0MsUUFBTCxHQUFnQixJQUFoQixDQS9CNEMsQ0ErQnRCOztBQUN0QixPQUFLQyxVQUFMLEdBQWtCLElBQWxCO0FBQ0EsT0FBS0Msa0JBQUwsR0FBMEIsQ0FBQyxPQUFELEVBQVUsVUFBVixFQUFzQixVQUF0QixFQUFrQyxXQUFsQyxFQUErQyxZQUEvQyxFQUE2RCxPQUE3RCxDQUExQjtBQUNBLE9BQUtDLGVBQUwsR0FBdUIsQ0FBQyxRQUFELEVBQVcsVUFBWCxDQUF2QjtBQUNBLE9BQUtDLFdBQUwsR0FBbUI7QUFDZkMsSUFBQUEsUUFBUSxFQUFFLEdBREs7QUFFZkMsSUFBQUEsUUFBUSxFQUFFLENBQUMsQ0FGSTtBQUdmQyxJQUFBQSxTQUFTLEVBQUUsR0FISTtBQUlmQyxJQUFBQSxZQUFZLEVBQUU7QUFBRSxhQUFPLEtBQVQ7QUFBZ0IsY0FBUSxNQUF4QjtBQUErQixlQUFTLE9BQXhDO0FBQWlELG1CQUFhLFlBQTlEO0FBQTRFLGtCQUFZO0FBQXhGLEtBSkM7QUFLZnJCLElBQUFBLE1BQU0sRUFBRSxLQUxPO0FBTWZzQixJQUFBQSxXQUFXLEVBQUUsRUFORTtBQU9mQyxJQUFBQSxRQUFRLEVBQUUsS0FQSztBQVFmQyxJQUFBQSxnQkFBZ0IsRUFBRSxLQVJIO0FBU2ZDLElBQUFBLG9CQUFvQixFQUFHO0FBVFIsR0FBbkI7QUFXQSxPQUFLQyxnQkFBTCxHQUF3QixJQUF4QjtBQUNBLE9BQUtDLHFCQUFMLEdBQTZCLElBQTdCOztBQUNBLE1BQUlqRCxPQUFKLEVBQWE7QUFDVCxRQUFHQSxPQUFPLENBQUNrRCxjQUFSLElBQXlCQyxTQUE1QixFQUFzQztBQUNsQyxXQUFLWixXQUFMLENBQWlCUSxvQkFBakIsR0FBd0MvQyxPQUFPLENBQUNrRCxjQUFoRDtBQUNIOztBQUNELFFBQUlsRCxPQUFPLENBQUN3QyxRQUFSLElBQW9CVyxTQUF4QixFQUFtQztBQUMvQixXQUFLWixXQUFMLENBQWlCQyxRQUFqQixHQUE0QnhDLE9BQU8sQ0FBQ3dDLFFBQXBDO0FBQ0g7O0FBQ0QsUUFBSXhDLE9BQU8sQ0FBQ3lDLFFBQVIsSUFBb0JVLFNBQXhCLEVBQW1DO0FBQy9CLFdBQUtaLFdBQUwsQ0FBaUJFLFFBQWpCLEdBQTRCekMsT0FBTyxDQUFDeUMsUUFBcEM7QUFDSDs7QUFDRCxRQUFJekMsT0FBTyxDQUFDMEMsU0FBUixJQUFxQlMsU0FBekIsRUFBb0M7QUFDaEMsV0FBS1osV0FBTCxDQUFpQkcsU0FBakIsR0FBNkIxQyxPQUFPLENBQUMwQyxTQUFyQztBQUNIOztBQUNELFFBQUkxQyxPQUFPLENBQUMyQyxZQUFSLElBQXdCUSxTQUE1QixFQUF1QztBQUNuQyxXQUFLLElBQUlDLFFBQVQsSUFBcUJwRCxPQUFPLENBQUMyQyxZQUE3QixFQUEyQztBQUN2QyxZQUFJM0MsT0FBTyxDQUFDMkMsWUFBUixDQUFxQlUsY0FBckIsQ0FBb0NELFFBQXBDLENBQUosRUFBbUQ7QUFDL0MsY0FBSSxLQUFLYixXQUFMLENBQWlCSSxZQUFqQixDQUE4QlMsUUFBOUIsQ0FBSixFQUE2QztBQUN6QyxpQkFBS2IsV0FBTCxDQUFpQkksWUFBakIsQ0FBOEJTLFFBQTlCLElBQTBDcEQsT0FBTyxDQUFDMkMsWUFBUixDQUFxQlMsUUFBckIsQ0FBMUM7QUFDSDtBQUNKO0FBQ0o7QUFDSjs7QUFDRCxRQUFJcEQsT0FBTyxDQUFDNEMsV0FBUixJQUF1Qk8sU0FBM0IsRUFBc0M7QUFDbEMsV0FBS1osV0FBTCxDQUFpQkssV0FBakIsR0FBK0I1QyxPQUFPLENBQUM0QyxXQUF2QztBQUNIOztBQUNELFFBQUk1QyxPQUFPLENBQUNzQixNQUFSLElBQWtCNkIsU0FBdEIsRUFBaUM7QUFDN0IsV0FBSzdCLE1BQUwsR0FBY3RCLE9BQU8sQ0FBQ3NCLE1BQXRCO0FBQ0g7O0FBQ0QsUUFBSXRCLE9BQU8sQ0FBQ3NELE1BQVIsSUFBa0JILFNBQWxCLElBQStCbkQsT0FBTyxDQUFDc0QsTUFBM0MsRUFBbUQ7QUFFaEQ7QUFDQyxVQUFJdEQsT0FBTyxDQUFDc0QsTUFBUixDQUFlcEIsTUFBZixJQUF3QmlCLFNBQXhCLElBQXFDLE9BQU9uRCxPQUFPLENBQUNzRCxNQUFSLENBQWVwQixNQUF0QixLQUFpQyxVQUExRSxFQUFzRjtBQUNsRixhQUFLQSxNQUFMLEdBQWNsQyxPQUFPLENBQUNzRCxNQUFSLENBQWVwQixNQUE3QjtBQUNBLGFBQUtGLFlBQUwsR0FBb0IsSUFBcEI7QUFDSDs7QUFDRCxVQUFJaEMsT0FBTyxDQUFDc0QsTUFBUixDQUFlbEIsVUFBZixJQUE2QmUsU0FBakMsRUFBNEM7QUFDeEMsYUFBS2YsVUFBTCxHQUFrQnBDLE9BQU8sQ0FBQ3NELE1BQVIsQ0FBZWxCLFVBQWpDO0FBQ0EsWUFBSSxLQUFLQSxVQUFMLEdBQWtCLENBQXRCLEVBQXlCLEtBQUtBLFVBQUwsR0FBa0IsQ0FBbEI7QUFDNUIsT0FWOEMsQ0FXL0M7OztBQUNBLFVBQUlwQyxPQUFPLENBQUNzRCxNQUFSLENBQWVuQixRQUFmLElBQTJCZ0IsU0FBM0IsSUFBd0MsT0FBT25ELE9BQU8sQ0FBQ3NELE1BQVIsQ0FBZW5CLFFBQXRCLEtBQW1DLFVBQS9FLEVBQTJGO0FBQ3ZGLGFBQUtBLFFBQUwsR0FBZ0JuQyxPQUFPLENBQUNzRCxNQUFSLENBQWVuQixRQUEvQjtBQUNBLGFBQUtGLGNBQUwsR0FBc0IsSUFBdEI7QUFDSDtBQUNKOztBQUVELFFBQUlqQyxPQUFPLENBQUM2QyxRQUFSLElBQW9CTSxTQUF4QixFQUFtQztBQUMvQixXQUFLWixXQUFMLENBQWlCTSxRQUFqQixHQUE0QjdDLE9BQU8sQ0FBQzZDLFFBQXBDO0FBQ0g7O0FBRUQsUUFBSTdDLE9BQU8sQ0FBQzhDLGdCQUFSLElBQTRCSyxTQUFoQyxFQUEyQztBQUN2QyxXQUFLWixXQUFMLENBQWlCTyxnQkFBakIsR0FBb0M5QyxPQUFPLENBQUM4QyxnQkFBNUM7QUFDSDs7QUFFRCxRQUFJOUMsT0FBTyxDQUFDK0IsU0FBUixJQUFxQm9CLFNBQXJCLElBQWtDLENBQUNJLEtBQUssQ0FBQ3ZELE9BQU8sQ0FBQytCLFNBQVQsQ0FBeEMsSUFBK0QvQixPQUFPLENBQUMrQixTQUFSLElBQXFCLENBQXhGLEVBQTJGO0FBQ3ZGLFdBQUtBLFNBQUwsR0FBaUIvQixPQUFPLENBQUMrQixTQUF6QjtBQUNBLFdBQUtRLFdBQUwsQ0FBaUJPLGdCQUFqQixHQUFvQyxJQUFwQztBQUNIOztBQUVELFFBQUk5QyxPQUFPLENBQUM2QixjQUFSLElBQTBCc0IsU0FBMUIsSUFBdUMsQ0FBQ0ksS0FBSyxDQUFDdkQsT0FBTyxDQUFDNkIsY0FBVCxDQUE3QyxJQUF5RTdCLE9BQU8sQ0FBQzZCLGNBQVIsSUFBMEIsRUFBdkcsRUFBMkc7QUFDdkcsV0FBS0EsY0FBTCxHQUFzQjdCLE9BQU8sQ0FBQzZCLGNBQTlCO0FBQ0EsV0FBS0gsVUFBTCxHQUFrQjFCLE9BQU8sQ0FBQzZCLGNBQVIsR0FBeUIsRUFBM0M7QUFDQSxXQUFLRixVQUFMLEdBQWtCM0IsT0FBTyxDQUFDNkIsY0FBUixHQUF5QixFQUEzQztBQUNIOztBQUVELFFBQUc3QixPQUFPLENBQUNnRCxnQkFBUixJQUE0QkcsU0FBL0IsRUFBMkM7QUFDdkMsV0FBS0gsZ0JBQUwsR0FBd0JoRCxPQUFPLENBQUNnRCxnQkFBaEM7QUFDSDs7QUFDRCxRQUFHaEQsT0FBTyxDQUFDaUQscUJBQVIsSUFBaUNFLFNBQXBDLEVBQWdEO0FBQzVDLFdBQUtGLHFCQUFMLEdBQTZCakQsT0FBTyxDQUFDaUQscUJBQXJDO0FBQ0g7QUFFSjs7QUFFRCxPQUFLcEQsVUFBTCxHQUFrQixZQUFZO0FBQzFCLFFBQUlJLElBQUksR0FBRyxJQUFYOztBQUNBLFFBQUksQ0FBQ0EsSUFBSSxDQUFDc0MsV0FBTCxDQUFpQk0sUUFBdEIsRUFBZ0M7QUFDNUI1QyxNQUFBQSxJQUFJLENBQUNnQixJQUFMLENBQVV1QyxLQUFWLENBQWdCQyxVQUFoQixHQUE2QixRQUE3Qjs7QUFDQSxVQUFJeEQsSUFBSSxDQUFDcUIsTUFBVCxFQUFpQjtBQUNickIsUUFBQUEsSUFBSSxDQUFDdUIsUUFBTCxDQUFja0MsS0FBZCxHQUFzQixFQUF0QjtBQUNBQyxRQUFBQSxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQjdELElBQUksQ0FBQ21CLFlBQWhDLEVBQThDeEIsT0FBOUMsQ0FBc0QsVUFBVUgsQ0FBVixFQUFhO0FBQy9EQSxVQUFBQSxDQUFDLENBQUNzRSxTQUFGLENBQVkxRSxNQUFaLENBQW1CLE1BQW5CO0FBQ0gsU0FGRDtBQUdIO0FBQ0o7QUFDSixHQVhEOztBQWFBLE9BQUsyRSxXQUFMLEdBQW1CLFVBQVVDLFFBQVYsRUFBb0I7QUFDbkM7QUFDQSxRQUFJQyxRQUFRLEdBQUcsRUFBZjs7QUFDQSxRQUFJRCxRQUFRLEtBQUssa0JBQWpCLEVBQXFDO0FBQ2pDQyxNQUFBQSxRQUFRLEdBQUcsQ0FDUDtBQUFFLGVBQU8sV0FBVDtBQUFzQixpQkFBUztBQUEvQixPQURPLEVBRVA7QUFBRSxlQUFPLGVBQVQ7QUFBMEIsaUJBQVM7QUFBbkMsT0FGTyxFQUdQO0FBQUUsZUFBTyxPQUFUO0FBQWtCLGlCQUFTO0FBQTNCLE9BSE8sRUFJUDtBQUFFLGVBQU8sWUFBVDtBQUF1QixpQkFBUztBQUFoQyxPQUpPLEVBS1A7QUFBRSxlQUFPLFNBQVQ7QUFBb0IsaUJBQVM7QUFBN0IsT0FMTyxFQU1QO0FBQUUsZUFBTyxPQUFUO0FBQWtCLGlCQUFTO0FBQTNCLE9BTk8sRUFPUDtBQUFFLGVBQU8sWUFBVDtBQUF1QixpQkFBUztBQUFoQyxPQVBPLEVBUVA7QUFBRSxlQUFPLFFBQVQ7QUFBbUIsaUJBQVM7QUFBNUIsT0FSTyxFQVNQO0FBQUUsZUFBTyxhQUFUO0FBQXdCLGlCQUFTO0FBQWpDLE9BVE8sRUFVUDtBQUFFLGVBQU8sV0FBVDtBQUFzQixpQkFBUztBQUEvQixPQVZPLEVBV1A7QUFBRSxlQUFPLFNBQVQ7QUFBb0IsaUJBQVM7QUFBN0IsT0FYTyxDQUFYO0FBYUg7O0FBRUQsV0FBT0MsZ0JBQWdCLENBQUNELFFBQUQsQ0FBdkI7O0FBRUEsYUFBU0MsZ0JBQVQsQ0FBMEJDLE9BQTFCLEVBQW1DO0FBQy9CLFVBQUlDLElBQUksR0FBRyxFQUFYO0FBQ0FELE1BQUFBLE9BQU8sQ0FBQ3hFLE9BQVIsQ0FBZ0IsVUFBVUgsQ0FBVixFQUFhO0FBQ3pCNEUsUUFBQUEsSUFBSSxJQUFJNUUsQ0FBQyxDQUFDNkUsR0FBRixHQUFRLEdBQVIsR0FBYzdFLENBQUMsQ0FBQ2lFLEtBQWhCLEdBQXdCLEdBQWhDO0FBQ0gsT0FGRDtBQUdBLGFBQU9XLElBQVA7QUFDSDtBQUNKLEdBNUJEOztBQThCQSxPQUFLRSxJQUFMLEdBQVksWUFBWTtBQUNwQixRQUFJdEUsSUFBSSxHQUFHLElBQVg7O0FBQ0EsUUFBSUEsSUFBSSxDQUFDK0IsWUFBVCxFQUF1QjtBQUNuQi9CLE1BQUFBLElBQUksQ0FBQ2lDLE1BQUwsQ0FBWSxFQUFaLEVBQWVqQyxJQUFJLENBQUNtQyxVQUFwQixFQUNLb0MsSUFETCxDQUNVLFVBQVVDLElBQVYsRUFBZ0I7QUFDbEJ4RSxRQUFBQSxJQUFJLENBQUN5RSxXQUFMLENBQWlCRCxJQUFqQjtBQUNBeEUsUUFBQUEsSUFBSSxDQUFDMEUsVUFBTDtBQUNILE9BSkw7QUFLSCxLQU5ELE1BTU87QUFDSDFFLE1BQUFBLElBQUksQ0FBQzBFLFVBQUw7QUFDSDtBQUNKLEdBWEQ7O0FBYUEsT0FBS0EsVUFBTCxHQUFrQixZQUFZO0FBRTFCLFNBQUtyRSxTQUFMLEdBQWlCTCxJQUFJLENBQUNGLFdBQUwsQ0FBaUI2RSxPQUFqQixDQUF5QixlQUF6QixFQUEwQyxFQUExQyxDQUFqQjtBQUNBLFNBQUt6RSxJQUFMLENBQVVxRCxLQUFWLENBQWdCcUIsT0FBaEIsR0FBMEIsTUFBMUI7QUFDQSxRQUFJQyxPQUFPLEdBQUcxRSxRQUFRLENBQUMyRSxjQUFULENBQXdCLGVBQWUsS0FBS3pFLFNBQTVDLENBQWQ7O0FBQ0EsUUFBSXdFLE9BQUosRUFBYTtBQUNUQSxNQUFBQSxPQUFPLENBQUN6RixNQUFSO0FBQ0g7O0FBQ0QsU0FBS2tCLElBQUwsR0FBWUgsUUFBUSxDQUFDNEUsYUFBVCxDQUF1QixLQUF2QixDQUFaO0FBQ0EsU0FBSzdFLElBQUwsQ0FBVThFLFVBQVYsQ0FBcUJDLFlBQXJCLENBQWtDLEtBQUszRSxJQUF2QyxFQUE2QyxLQUFLSixJQUFMLENBQVVnRixXQUF2RDtBQUNBLFNBQUs1RSxJQUFMLENBQVV3RCxTQUFWLENBQW9CcUIsR0FBcEIsQ0FBd0IsVUFBeEI7QUFDQSxTQUFLN0UsSUFBTCxDQUFVOEUsWUFBVixDQUF1QixJQUF2QixFQUE2QixlQUFlLEtBQUsvRSxTQUFqRDtBQUNBLFNBQUtDLElBQUwsQ0FBVWlELEtBQVYsQ0FBZ0I4QixVQUFoQixHQUE2QixLQUFLL0UsSUFBTCxDQUFVaUQsS0FBVixDQUFnQjhCLFVBQTdDOztBQUNBLFFBQUlyRixJQUFJLENBQUNzQyxXQUFMLENBQWlCTSxRQUFyQixFQUErQjtBQUMzQixXQUFLdEMsSUFBTCxDQUFVaUQsS0FBVixDQUFnQitCLFNBQWhCLEdBQTZCLEtBQUtoRCxXQUFMLENBQWlCRyxTQUFqQixHQUE2QixFQUE5QixHQUFvQyxJQUFoRTtBQUNIOztBQUVELFFBQUl6QyxJQUFJLENBQUNzQyxXQUFMLENBQWlCTSxRQUFyQixFQUErQjtBQUMzQixXQUFLckMsTUFBTCxHQUFjSixRQUFRLENBQUM0RSxhQUFULENBQXVCLEtBQXZCLENBQWQ7QUFDSCxLQUZELE1BRU87QUFDSCxXQUFLeEUsTUFBTCxHQUFjSixRQUFRLENBQUM0RSxhQUFULENBQXVCLFFBQXZCLENBQWQ7O0FBQ0EsVUFBRyxLQUFLaEMsZ0JBQVIsRUFBMEI7QUFDdEIsWUFBSW9CLE9BQU8sR0FBR25FLElBQUksQ0FBQytELFdBQUwsQ0FBaUIsa0JBQWpCLENBQWQ7QUFDQSxhQUFLeEQsTUFBTCxDQUFZNkUsWUFBWixDQUF5QixPQUF6QixFQUFrQ2pCLE9BQWxDO0FBQ0g7QUFDSjs7QUFDRCxTQUFLNUQsTUFBTCxDQUFZZ0QsS0FBWixDQUFrQmhCLFFBQWxCLEdBQTZCLEtBQUtELFdBQUwsQ0FBaUJDLFFBQWpCLEdBQTRCLElBQXpEOztBQUNBLFFBQUksS0FBS0QsV0FBTCxDQUFpQkUsUUFBakIsS0FBOEIsQ0FBQyxDQUFuQyxFQUFzQztBQUNsQyxXQUFLakMsTUFBTCxDQUFZZ0QsS0FBWixDQUFrQmYsUUFBbEIsR0FBNkIsS0FBS0YsV0FBTCxDQUFpQkUsUUFBakIsR0FBNEIsSUFBekQ7QUFDSDs7QUFFRCxTQUFLbEMsSUFBTCxDQUFVaUYsV0FBVixDQUFzQixLQUFLaEYsTUFBM0I7QUFDQSxTQUFLQyxLQUFMLEdBQWFMLFFBQVEsQ0FBQzRFLGFBQVQsQ0FBdUIsTUFBdkIsQ0FBYjtBQUNBLFNBQUt4RSxNQUFMLENBQVlnRixXQUFaLENBQXdCLEtBQUsvRSxLQUE3QjtBQUNBLFNBQUtBLEtBQUwsQ0FBV3NELFNBQVgsQ0FBcUJxQixHQUFyQixDQUF5QixPQUF6QjtBQUNBLFFBQUlLLEtBQUssR0FBR3JGLFFBQVEsQ0FBQzRFLGFBQVQsQ0FBdUIsTUFBdkIsQ0FBWjtBQUNBLFNBQUt4RSxNQUFMLENBQVlnRixXQUFaLENBQXdCQyxLQUF4QjtBQUVBQSxJQUFBQSxLQUFLLENBQUMxQixTQUFOLENBQWdCcUIsR0FBaEIsQ0FBb0IsT0FBcEI7O0FBQ0EsUUFBRyxLQUFLbkMscUJBQVIsRUFBK0I7QUFDM0J3QyxNQUFBQSxLQUFLLENBQUNqQyxLQUFOLENBQVlrQyxRQUFaLEdBQXVCLFVBQXZCO0FBQ0FELE1BQUFBLEtBQUssQ0FBQ2pDLEtBQU4sQ0FBWW1DLEtBQVosR0FBb0IsS0FBcEI7QUFDQUYsTUFBQUEsS0FBSyxDQUFDakMsS0FBTixDQUFZb0MsU0FBWixHQUF3QixLQUF4QjtBQUNIOztBQUVELFFBQUkzRixJQUFJLENBQUNzQyxXQUFMLENBQWlCTSxRQUFyQixFQUErQjtBQUMzQjRDLE1BQUFBLEtBQUssQ0FBQ2pDLEtBQU4sQ0FBWXFCLE9BQVosR0FBc0IsTUFBdEI7QUFDQSxXQUFLcEUsS0FBTCxDQUFXK0MsS0FBWCxDQUFpQnFDLFdBQWpCLEdBQStCLE1BQS9CO0FBQ0EsV0FBS3BGLEtBQUwsQ0FBVytDLEtBQVgsQ0FBaUJzQyxTQUFqQixHQUE2QixRQUE3QjtBQUNBLFdBQUtyRixLQUFMLENBQVcrQyxLQUFYLENBQWlCdUMsYUFBakIsR0FBaUMsS0FBakM7QUFDSDs7QUFFRCxTQUFLOUUsSUFBTCxHQUFZYixRQUFRLENBQUM0RSxhQUFULENBQXVCLEtBQXZCLENBQVo7QUFDQSxTQUFLekUsSUFBTCxDQUFVaUYsV0FBVixDQUFzQixLQUFLdkUsSUFBM0I7QUFDQSxTQUFLQSxJQUFMLENBQVU4QyxTQUFWLENBQW9CcUIsR0FBcEIsQ0FBd0IsVUFBeEI7QUFDQSxTQUFLbkUsSUFBTCxDQUFVdUMsS0FBVixDQUFnQndDLE1BQWhCLEdBQXlCLE9BQU8sS0FBSzlGLGNBQXJDO0FBQ0EsU0FBSytGLEVBQUwsR0FBVTdGLFFBQVEsQ0FBQzRFLGFBQVQsQ0FBdUIsSUFBdkIsQ0FBVjtBQUNBLFNBQUsvRCxJQUFMLENBQVV1RSxXQUFWLENBQXNCLEtBQUtTLEVBQTNCO0FBRUEsU0FBS0EsRUFBTCxDQUFRekMsS0FBUixDQUFjZCxTQUFkLEdBQTBCLEtBQUtILFdBQUwsQ0FBaUJHLFNBQWpCLEdBQTZCLElBQXZEO0FBQ0EsU0FBS3VELEVBQUwsQ0FBUXpDLEtBQVIsQ0FBY2YsUUFBZCxHQUF5QixLQUFLZixVQUFMLEdBQWtCLElBQTNDO0FBQ0EsU0FBS3VFLEVBQUwsQ0FBUXpDLEtBQVIsQ0FBY2hCLFFBQWQsR0FBeUIsS0FBS2IsVUFBTCxHQUFrQixJQUEzQztBQUNBLFNBQUtzRSxFQUFMLENBQVF6QyxLQUFSLENBQWMrQixTQUFkLEdBQTBCLEtBQUszRCxXQUFMLEdBQW1CLElBQTdDOztBQUNBLFFBQUksS0FBS2xCLFVBQVQsRUFBcUI7QUFDakIsV0FBS3VGLEVBQUwsQ0FBUWxDLFNBQVIsQ0FBa0JxQixHQUFsQixDQUFzQixPQUF0Qjs7QUFDQSxVQUFJLENBQUNuRixJQUFJLENBQUNzQyxXQUFMLENBQWlCTyxnQkFBdEIsRUFBd0M7QUFDcEMsWUFBSW9ELFNBQVMsR0FBRzlGLFFBQVEsQ0FBQzRFLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBaEI7QUFDQWtCLFFBQUFBLFNBQVMsQ0FBQ2IsWUFBVixDQUF1QixPQUF2QixFQUFnQyxLQUFoQztBQUNBYSxRQUFBQSxTQUFTLENBQUNDLFNBQVYsR0FBc0JsRyxJQUFJLENBQUNzQyxXQUFMLENBQWlCSSxZQUFqQixDQUE4QnVELFNBQXBEO0FBQ0EsYUFBSy9GLElBQUwsQ0FBVStFLFlBQVYsQ0FBdUJnQixTQUF2QixFQUFtQyxLQUFLL0YsSUFBTCxDQUFVaUcsYUFBVixFQUFELEdBQzVCLEtBQUtqRyxJQUFMLENBQVVrRyxVQUFWLENBQXFCLENBQXJCLENBRDRCLEdBRTVCLElBRk47QUFHSDtBQUNKOztBQUNELFFBQUlDLGFBQWEsR0FBRyxFQUFwQjtBQUNBLFFBQUlDLEdBQUcsR0FBRyxFQUFWO0FBQ0EsUUFBSUMsU0FBUyxHQUFHLENBQWhCOztBQUVBLFFBQUksS0FBS2xGLE1BQVQsRUFBaUI7QUFDYixXQUFLQyxVQUFMLEdBQWtCbkIsUUFBUSxDQUFDNEUsYUFBVCxDQUF1QixLQUF2QixDQUFsQjtBQUNBLFdBQUtpQixFQUFMLENBQVFULFdBQVIsQ0FBb0IsS0FBS2pFLFVBQXpCO0FBQ0EsV0FBS0EsVUFBTCxDQUFnQndDLFNBQWhCLENBQTBCcUIsR0FBMUIsQ0FBOEIsb0JBQTlCO0FBQ0EsV0FBSzdELFVBQUwsQ0FBZ0JpQyxLQUFoQixDQUFzQndDLE1BQXRCLEdBQStCLE9BQU8sS0FBSzlGLGNBQTNDO0FBQ0EsV0FBS3NCLFFBQUwsR0FBZ0JwQixRQUFRLENBQUM0RSxhQUFULENBQXVCLE9BQXZCLENBQWhCO0FBQ0EsV0FBS3pELFVBQUwsQ0FBZ0JpRSxXQUFoQixDQUE0QixLQUFLaEUsUUFBakM7QUFDQSxXQUFLQSxRQUFMLENBQWM2RCxZQUFkLENBQTJCLE1BQTNCLEVBQW1DLE1BQW5DO0FBQ0EsV0FBSzdELFFBQUwsQ0FBYzZELFlBQWQsQ0FBMkIsSUFBM0IsRUFBaUMsWUFBWSxLQUFLL0UsU0FBbEQ7O0FBQ0EsVUFBSSxLQUFLdUIsY0FBTCxHQUFzQkMsUUFBMUIsRUFBb0M7QUFDaEMsYUFBS1AsVUFBTCxDQUFnQmlDLEtBQWhCLENBQXNCaEIsUUFBdEIsR0FBaUN2QyxJQUFJLENBQUM0QixjQUFMLEdBQXNCLEVBQXRCLEdBQTJCLElBQTVEO0FBQ0EsYUFBS0wsUUFBTCxDQUFjZ0MsS0FBZCxDQUFvQmhCLFFBQXBCLEdBQStCdkMsSUFBSSxDQUFDNEIsY0FBTCxHQUFzQixFQUF0QixHQUEyQixJQUExRDtBQUNIOztBQUVELFVBQUk0RSxJQUFJLEdBQUdyRyxRQUFRLENBQUM0RSxhQUFULENBQXVCLEdBQXZCLENBQVg7QUFDQSxXQUFLaUIsRUFBTCxDQUFRVCxXQUFSLENBQW9CaUIsSUFBcEI7QUFDQUEsTUFBQUEsSUFBSSxDQUFDakQsS0FBTCxDQUFXa0QsUUFBWCxHQUFzQixNQUF0QjtBQUNBRCxNQUFBQSxJQUFJLENBQUNFLFNBQUwsR0FBaUIsUUFBakI7QUFDQSxXQUFLVixFQUFMLENBQVFXLGdCQUFSLENBQXlCLFFBQXpCLEVBQW1DLFVBQVVDLENBQVYsRUFBYTtBQUM1QyxZQUFJQyxDQUFDLEdBQUcsS0FBS0MsU0FBYjtBQUNBOUcsUUFBQUEsSUFBSSxDQUFDc0IsVUFBTCxDQUFnQjBELFVBQWhCLENBQTJCekIsS0FBM0IsQ0FBaUN0QyxHQUFqQyxHQUF1QzRGLENBQUMsR0FBRyxJQUEzQztBQUNILE9BSEQ7QUFJSDs7QUFFRCxTQUFLOUcsT0FBTCxHQUFlSSxRQUFRLENBQUM0RyxnQkFBVCxDQUEwQixLQUFLakgsV0FBTCxHQUFtQixXQUE3QyxDQUFmO0FBQ0E0RCxJQUFBQSxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQixLQUFLOUQsT0FBaEMsRUFBeUNKLE9BQXpDLENBQWlELFVBQVVILENBQVYsRUFBYTtBQUMxRCxVQUFJd0gsSUFBSSxHQUFHeEgsQ0FBQyxDQUFDeUgsV0FBYjtBQUNBLFVBQUl4RCxLQUFLLEdBQUdqRSxDQUFDLENBQUNpRSxLQUFkO0FBQ0EsVUFBSXlELGFBQUo7O0FBQ0EsVUFBSTFILENBQUMsQ0FBQzJILGFBQUYsRUFBSixFQUF1QjtBQUNuQkQsUUFBQUEsYUFBYSxHQUFHeEQsS0FBSyxDQUFDQyxTQUFOLENBQWdCQyxLQUFoQixDQUFzQkMsSUFBdEIsQ0FBMkJyRSxDQUFDLENBQUM0SCxVQUE3QixFQUNYN0gsTUFEVyxDQUNKLFVBQVU4SCxDQUFWLEVBQWE7QUFDakIsaUJBQU9ySCxJQUFJLENBQUNvQyxrQkFBTCxDQUF3QmtGLE9BQXhCLENBQWdDRCxDQUFDLENBQUNFLElBQWxDLE1BQTRDLENBQUMsQ0FBcEQ7QUFDSCxTQUhXLENBQWhCO0FBSUg7O0FBQ0QsVUFBSUMsT0FBTyxHQUFHaEksQ0FBQyxDQUFDcUIsWUFBRixDQUFlLE9BQWYsQ0FBZDs7QUFDQSxVQUFJMkcsT0FBSixFQUFhO0FBQ1RBLFFBQUFBLE9BQU8sR0FBR0EsT0FBTyxDQUNaQyxLQURLLENBQ0MsR0FERCxFQUVMbEksTUFGSyxDQUVFLFVBQVVtSSxDQUFWLEVBQWE7QUFDakIsaUJBQU8xSCxJQUFJLENBQUNxQyxlQUFMLENBQXFCaUYsT0FBckIsQ0FBNkJJLENBQTdCLE1BQW9DLENBQUMsQ0FBNUM7QUFDSCxTQUpLLENBQVY7QUFLSCxPQU5ELE1BTU87QUFDSEYsUUFBQUEsT0FBTyxHQUFHLEVBQVY7QUFDSDs7QUFDRCxVQUFJRyxFQUFFLEdBQUd4SCxRQUFRLENBQUM0RSxhQUFULENBQXVCLElBQXZCLENBQVQ7QUFDQSxVQUFJNkMsVUFBVSxHQUFHcEksQ0FBQyxDQUFDa0IsWUFBRixDQUFlLFVBQWYsQ0FBakI7QUFDQSxVQUFJVSxVQUFVLEdBQUc1QixDQUFDLENBQUNrQixZQUFGLENBQWUsVUFBZixDQUFqQjtBQUVBVixNQUFBQSxJQUFJLENBQUNnRyxFQUFMLENBQVFULFdBQVIsQ0FBb0JvQyxFQUFwQjtBQUNBQSxNQUFBQSxFQUFFLENBQUN2QyxZQUFILENBQWdCLFlBQWhCLEVBQThCM0IsS0FBOUI7QUFDQWtFLE1BQUFBLEVBQUUsQ0FBQ3ZDLFlBQUgsQ0FBZ0IsV0FBaEIsRUFBNkI0QixJQUE3Qjs7QUFFQSxVQUFJRSxhQUFhLEtBQUtoRSxTQUF0QixFQUFpQztBQUM3QmdFLFFBQUFBLGFBQWEsQ0FBQ3ZILE9BQWQsQ0FBc0IsVUFBVTBILENBQVYsRUFBYTtBQUMvQk0sVUFBQUEsRUFBRSxDQUFDdkMsWUFBSCxDQUFnQmlDLENBQUMsQ0FBQ0UsSUFBbEIsRUFBd0JGLENBQUMsQ0FBQzVELEtBQTFCO0FBQ0gsU0FGRDtBQUdIOztBQUVEK0QsTUFBQUEsT0FBTyxDQUFDN0gsT0FBUixDQUFnQixVQUFVSCxDQUFWLEVBQWE7QUFDekJtSSxRQUFBQSxFQUFFLENBQUM3RCxTQUFILENBQWFxQixHQUFiLENBQWlCM0YsQ0FBakI7QUFDSCxPQUZEOztBQUlBLFVBQUlRLElBQUksQ0FBQzRCLGNBQUwsR0FBc0JDLFFBQTFCLEVBQW9DO0FBQ2hDOEYsUUFBQUEsRUFBRSxDQUFDN0QsU0FBSCxDQUFhcUIsR0FBYixDQUFpQixPQUFqQjtBQUNBd0MsUUFBQUEsRUFBRSxDQUFDcEUsS0FBSCxDQUFTaEIsUUFBVCxHQUFvQnZDLElBQUksQ0FBQzRCLGNBQUwsR0FBc0IsSUFBMUM7QUFDSDs7QUFFRCxVQUFJZ0csVUFBSixFQUFnQjtBQUNackIsUUFBQUEsU0FBUztBQUNURixRQUFBQSxhQUFhLElBQUlDLEdBQUcsR0FBR1UsSUFBdkI7QUFDQVYsUUFBQUEsR0FBRyxHQUFHdEcsSUFBSSxDQUFDc0MsV0FBTCxDQUFpQlEsb0JBQXZCO0FBQ0E2RSxRQUFBQSxFQUFFLENBQUM3RCxTQUFILENBQWFxQixHQUFiLENBQWlCLFFBQWpCOztBQUNBLFlBQUksQ0FBQ25GLElBQUksQ0FBQ1MsVUFBVixFQUFzQjtBQUNsQlQsVUFBQUEsSUFBSSxDQUFDUSxLQUFMLENBQVd5RyxXQUFYLEdBQXlCRCxJQUF6Qjs7QUFDQSxjQUFJUSxPQUFPLENBQUNySSxNQUFSLElBQWtCLENBQXRCLEVBQXlCO0FBQ3JCcUksWUFBQUEsT0FBTyxDQUFDN0gsT0FBUixDQUFnQixVQUFVSCxDQUFWLEVBQWE7QUFDekJRLGNBQUFBLElBQUksQ0FBQ1EsS0FBTCxDQUFXc0QsU0FBWCxDQUFxQnFCLEdBQXJCLENBQXlCM0YsQ0FBekI7QUFDSCxhQUZEO0FBR0g7QUFDSjtBQUNKOztBQUNELFVBQUk0QixVQUFKLEVBQWdCO0FBQ1p1RyxRQUFBQSxFQUFFLENBQUM3RCxTQUFILENBQWFxQixHQUFiLENBQWlCLFVBQWpCO0FBQ0g7O0FBQ0R3QyxNQUFBQSxFQUFFLENBQUNwQyxXQUFILENBQWVwRixRQUFRLENBQUMwSCxjQUFULENBQXdCLE1BQU1iLElBQTlCLENBQWY7QUFDSCxLQTdERDs7QUErREEsUUFBSTdHLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QkosSUFBSSxDQUFDRixXQUFMLEdBQW1CLFdBQTFDLE1BQTJELElBQS9ELEVBQXFFO0FBQ2pFRSxNQUFBQSxJQUFJLENBQUNjLFdBQUwsR0FBbUIsSUFBbkI7QUFDQWQsTUFBQUEsSUFBSSxDQUFDRCxPQUFMLEdBQWVJLFFBQVEsQ0FBQzRHLGdCQUFULENBQTBCL0csSUFBSSxDQUFDRixXQUFMLEdBQW1CLFNBQTdDLENBQWY7QUFDQSxVQUFJZ0ksTUFBTSxHQUFHM0gsUUFBUSxDQUFDNEcsZ0JBQVQsQ0FBMEIvRyxJQUFJLENBQUNGLFdBQUwsR0FBbUIsV0FBN0MsQ0FBYjtBQUNBNEQsTUFBQUEsS0FBSyxDQUFDQyxTQUFOLENBQWdCQyxLQUFoQixDQUFzQkMsSUFBdEIsQ0FBMkJpRSxNQUEzQixFQUFtQ25JLE9BQW5DLENBQTJDLFVBQVVvSSxLQUFWLEVBQWlCO0FBQ3hELFlBQUlDLFlBQVksR0FBR0QsS0FBSyxDQUFDaEIsZ0JBQU4sQ0FBdUIsUUFBdkIsQ0FBbkI7QUFDQSxZQUFJWSxFQUFFLEdBQUd4SCxRQUFRLENBQUM0RSxhQUFULENBQXVCLElBQXZCLENBQVQ7QUFDQSxZQUFJa0QsSUFBSSxHQUFHOUgsUUFBUSxDQUFDNEUsYUFBVCxDQUF1QixNQUF2QixDQUFYO0FBQ0EsWUFBSW1ELE1BQU0sR0FBRy9ILFFBQVEsQ0FBQzRFLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBYjtBQUNBLFlBQUlvRCxZQUFZLEdBQUdoSSxRQUFRLENBQUM0RSxhQUFULENBQXVCLEdBQXZCLENBQW5CO0FBQ0EsWUFBSXFELE9BQU8sR0FBR0wsS0FBSyxDQUFDbEgsWUFBTixDQUFtQixVQUFuQixDQUFkO0FBQ0EsWUFBSSxDQUFDdUgsT0FBTCxFQUFjQSxPQUFPLEdBQUcsUUFBVjtBQUNkLFlBQUksQ0FBQ0EsT0FBRCxJQUFhQSxPQUFPLEtBQUssUUFBWixJQUF3QkEsT0FBTyxLQUFLLE1BQXJELEVBQThEQSxPQUFPLEdBQUcsUUFBVjtBQUM5RFQsUUFBQUEsRUFBRSxDQUFDcEMsV0FBSCxDQUFlMEMsSUFBZjtBQUNBTixRQUFBQSxFQUFFLENBQUNwQyxXQUFILENBQWUyQyxNQUFmO0FBQ0FsSSxRQUFBQSxJQUFJLENBQUNnRyxFQUFMLENBQVFULFdBQVIsQ0FBb0JvQyxFQUFwQjtBQUNBQSxRQUFBQSxFQUFFLENBQUM3RCxTQUFILENBQWFxQixHQUFiLENBQWlCLGdCQUFqQjtBQUNBd0MsUUFBQUEsRUFBRSxDQUFDN0QsU0FBSCxDQUFhcUIsR0FBYixDQUFpQmlELE9BQWpCO0FBQ0FwSSxRQUFBQSxJQUFJLENBQUNlLGVBQUw7QUFDQSxZQUFJc0gsS0FBSyxHQUFHckksSUFBSSxDQUFDSyxTQUFMLEdBQWlCLE9BQWpCLEdBQTJCTCxJQUFJLENBQUNlLGVBQTVDO0FBQ0E0RyxRQUFBQSxFQUFFLENBQUNXLEVBQUgsR0FBUUQsS0FBUjtBQUNBVixRQUFBQSxFQUFFLENBQUNwQyxXQUFILENBQWU0QyxZQUFmO0FBQ0FBLFFBQUFBLFlBQVksQ0FBQzVDLFdBQWIsQ0FBeUJwRixRQUFRLENBQUMwSCxjQUFULENBQXdCRSxLQUFLLENBQUNRLEtBQTlCLENBQXpCO0FBQ0FaLFFBQUFBLEVBQUUsQ0FBQ3ZDLFlBQUgsQ0FBZ0IsV0FBaEIsRUFBNkIyQyxLQUFLLENBQUNRLEtBQW5DO0FBQ0F2SSxRQUFBQSxJQUFJLENBQUNnRyxFQUFMLENBQVFULFdBQVIsQ0FBb0JvQyxFQUFwQjtBQUVBakUsUUFBQUEsS0FBSyxDQUFDQyxTQUFOLENBQWdCQyxLQUFoQixDQUFzQkMsSUFBdEIsQ0FBMkJtRSxZQUEzQixFQUF5Q3JJLE9BQXpDLENBQWlELFVBQVVILENBQVYsRUFBYTtBQUMxRCxjQUFJd0gsSUFBSSxHQUFHeEgsQ0FBQyxDQUFDeUgsV0FBYjtBQUNBLGNBQUl4RCxLQUFLLEdBQUdqRSxDQUFDLENBQUNpRSxLQUFkO0FBQ0EsY0FBSStELE9BQU8sR0FBR2hJLENBQUMsQ0FBQ3FCLFlBQUYsQ0FBZSxPQUFmLENBQWQ7O0FBQ0EsY0FBSTJHLE9BQUosRUFBYTtBQUNUQSxZQUFBQSxPQUFPLEdBQUdBLE9BQU8sQ0FBQ0MsS0FBUixDQUFjLEdBQWQsQ0FBVjtBQUNILFdBRkQsTUFHSztBQUNERCxZQUFBQSxPQUFPLEdBQUcsRUFBVjtBQUNIOztBQUNEQSxVQUFBQSxPQUFPLENBQUN4SSxJQUFSLENBQWFvSixPQUFiO0FBQ0EsY0FBSVQsRUFBRSxHQUFHeEgsUUFBUSxDQUFDNEUsYUFBVCxDQUF1QixJQUF2QixDQUFUO0FBQ0EsY0FBSTZDLFVBQVUsR0FBR3BJLENBQUMsQ0FBQ2tCLFlBQUYsQ0FBZSxVQUFmLENBQWpCO0FBQ0FWLFVBQUFBLElBQUksQ0FBQ2dHLEVBQUwsQ0FBUVQsV0FBUixDQUFvQm9DLEVBQXBCO0FBQ0FBLFVBQUFBLEVBQUUsQ0FBQ3ZDLFlBQUgsQ0FBZ0IsWUFBaEIsRUFBOEIzQixLQUE5QjtBQUNBa0UsVUFBQUEsRUFBRSxDQUFDdkMsWUFBSCxDQUFnQixXQUFoQixFQUE2QjRCLElBQTdCO0FBQ0FXLFVBQUFBLEVBQUUsQ0FBQ3ZDLFlBQUgsQ0FBZ0IsYUFBaEIsRUFBK0JpRCxLQUEvQjs7QUFDQSxjQUFJYixPQUFPLENBQUNySSxNQUFSLElBQWtCLENBQXRCLEVBQXlCO0FBQ3JCcUksWUFBQUEsT0FBTyxDQUFDN0gsT0FBUixDQUFnQixVQUFVSCxDQUFWLEVBQWE7QUFDekJtSSxjQUFBQSxFQUFFLENBQUM3RCxTQUFILENBQWFxQixHQUFiLENBQWlCM0YsQ0FBakI7QUFDSCxhQUZEO0FBR0g7O0FBQ0QsY0FBSW9JLFVBQUosRUFBZ0I7QUFDWnJCLFlBQUFBLFNBQVM7QUFDVEYsWUFBQUEsYUFBYSxJQUFJQyxHQUFHLEdBQUdVLElBQXZCO0FBQ0FWLFlBQUFBLEdBQUcsR0FBR3RHLElBQUksQ0FBQ3NDLFdBQUwsQ0FBaUJRLG9CQUF2QjtBQUNBNkUsWUFBQUEsRUFBRSxDQUFDN0QsU0FBSCxDQUFhcUIsR0FBYixDQUFpQixRQUFqQjs7QUFDQSxnQkFBSSxDQUFDbkYsSUFBSSxDQUFDUyxVQUFWLEVBQXNCO0FBQ2xCVCxjQUFBQSxJQUFJLENBQUNRLEtBQUwsQ0FBV3lHLFdBQVgsR0FBeUJELElBQXpCOztBQUNBLGtCQUFJUSxPQUFPLENBQUNySSxNQUFSLElBQWtCLENBQXRCLEVBQXlCO0FBQ3JCcUksZ0JBQUFBLE9BQU8sQ0FBQzdILE9BQVIsQ0FBZ0IsVUFBVUgsQ0FBVixFQUFhO0FBQ3pCUSxrQkFBQUEsSUFBSSxDQUFDUSxLQUFMLENBQVdzRCxTQUFYLENBQXFCcUIsR0FBckIsQ0FBeUIzRixDQUF6QjtBQUNILGlCQUZEO0FBR0g7QUFDSjtBQUNKOztBQUNEbUksVUFBQUEsRUFBRSxDQUFDcEMsV0FBSCxDQUFlcEYsUUFBUSxDQUFDMEgsY0FBVCxDQUF3QmIsSUFBeEIsQ0FBZjtBQUNILFNBckNEO0FBc0NILE9BNUREO0FBNkRIOztBQUVELFFBQUl3QixhQUFhLEdBQUd4SSxJQUFJLENBQUNELE9BQUwsQ0FBYVosTUFBYixHQUFzQnNKLE1BQU0sQ0FBQyxDQUFDekksSUFBSSxDQUFDc0MsV0FBTCxDQUFpQk8sZ0JBQW5CLENBQWhEOztBQUVBLFFBQUkyRixhQUFhLElBQUlqQyxTQUFyQixFQUFnQztBQUFFO0FBQzlCLFVBQUltQyxVQUFVLEdBQUcxSSxJQUFJLENBQUNzQyxXQUFMLENBQWlCSSxZQUFqQixDQUE4QmlHLEdBQS9DO0FBQ0F0QyxNQUFBQSxhQUFhLEdBQUdxQyxVQUFoQjtBQUNILEtBSEQsTUFHTyxJQUFJMUksSUFBSSxDQUFDVyxZQUFMLElBQXFCLENBQUMsQ0FBMUIsRUFBNkI7QUFDaEMsVUFBSTRGLFNBQVMsR0FBR3ZHLElBQUksQ0FBQ1csWUFBckIsRUFBbUM7QUFDL0IsWUFBSWlJLFlBQVksR0FBR3JDLFNBQVMsS0FBSyxDQUFkLEdBQWtCdkcsSUFBSSxDQUFDc0MsV0FBTCxDQUFpQkksWUFBakIsQ0FBOEJtRyxJQUFoRCxHQUF1RDdJLElBQUksQ0FBQ3NDLFdBQUwsQ0FBaUJJLFlBQWpCLENBQThCb0csS0FBeEc7QUFDQXpDLFFBQUFBLGFBQWEsR0FBR0UsU0FBUyxHQUFHLEdBQVosR0FBa0JxQyxZQUFsQztBQUNIO0FBQ0o7O0FBQ0QsUUFBSTVJLElBQUksQ0FBQ1MsVUFBVCxFQUFxQjtBQUNqQlQsTUFBQUEsSUFBSSxDQUFDUSxLQUFMLENBQVdrRyxTQUFYLEdBQXVCTCxhQUF2QjtBQUNIOztBQUNELFFBQUlyRyxJQUFJLENBQUNzQyxXQUFMLENBQWlCSyxXQUFqQixJQUFnQyxFQUFoQyxJQUFzQzNDLElBQUksQ0FBQ1EsS0FBTCxDQUFXeUcsV0FBWCxJQUEwQixFQUFwRSxFQUF3RTtBQUNwRWpILE1BQUFBLElBQUksQ0FBQ1EsS0FBTCxDQUFXeUcsV0FBWCxHQUF5QmpILElBQUksQ0FBQ3NDLFdBQUwsQ0FBaUJLLFdBQTFDO0FBQ0g7O0FBQ0QzQyxJQUFBQSxJQUFJLENBQUNtQixZQUFMLEdBQW9CbkIsSUFBSSxDQUFDZ0IsSUFBTCxDQUFVK0YsZ0JBQVYsQ0FBMkIseUJBQTNCLENBQXBCOztBQUNBLFFBQUkvRyxJQUFJLENBQUNxQixNQUFULEVBQWlCO0FBQ2JyQixNQUFBQSxJQUFJLENBQUN1QixRQUFMLENBQWNvRixnQkFBZCxDQUErQixPQUEvQixFQUF3QyxVQUFVQyxDQUFWLEVBQWE7QUFDakQsWUFBSW1DLFdBQVcsR0FBR25DLENBQUMsQ0FBQ29DLE1BQUYsQ0FBU3ZGLEtBQVQsQ0FBZXdGLFdBQWYsRUFBbEI7QUFDQSxZQUFJQyxpQkFBaUIsR0FBR0gsV0FBVyxDQUFDNUosTUFBcEM7QUFDQSxZQUFJZ0ssT0FBTyxHQUFHLENBQWQ7QUFDQSxZQUFJQyxTQUFTLEdBQUcsQ0FBaEI7QUFDQSxZQUFJbkQsU0FBUyxHQUFHLElBQWhCOztBQUNBLFlBQUlqRyxJQUFJLENBQUNnQyxjQUFULEVBQXlCO0FBQ3JCLGNBQUlrSCxpQkFBaUIsSUFBSSxDQUF6QixFQUE0QjtBQUN4QmxKLFlBQUFBLElBQUksQ0FBQ3FKLHFCQUFMLENBQTJCLElBQTNCO0FBQ0gsV0FGRCxNQUVPLElBQUlILGlCQUFpQixJQUFJLENBQXpCLEVBQTRCO0FBQy9CbEosWUFBQUEsSUFBSSxDQUFDa0MsUUFBTCxDQUFjNkcsV0FBZCxFQUNLeEUsSUFETCxDQUNVLFVBQVVDLElBQVYsRUFBZ0I7QUFDbEJ4RSxjQUFBQSxJQUFJLENBQUNxSixxQkFBTCxDQUEyQjdFLElBQTNCO0FBQ0gsYUFITDtBQUlIO0FBQ0osU0FURCxNQVNPO0FBQ0gsY0FBSTBFLGlCQUFpQixHQUFHLENBQXhCLEVBQTJCO0FBQ3ZCeEYsWUFBQUEsS0FBSyxDQUFDQyxTQUFOLENBQWdCQyxLQUFoQixDQUFzQkMsSUFBdEIsQ0FBMkI3RCxJQUFJLENBQUNtQixZQUFoQyxFQUE4Q3hCLE9BQTlDLENBQXNELFVBQVVILENBQVYsRUFBYTtBQUMvRCxrQkFBSUEsQ0FBQyxDQUFDcUIsWUFBRixDQUFlLFlBQWYsTUFBaUMsS0FBckMsRUFBNEM7QUFDeENvRixnQkFBQUEsU0FBUyxHQUFHekcsQ0FBWjtBQUNILGVBRkQsTUFFTztBQUNIQSxnQkFBQUEsQ0FBQyxDQUFDc0UsU0FBRixDQUFZMUUsTUFBWixDQUFtQixlQUFuQjtBQUNBK0osZ0JBQUFBLE9BQU87QUFDUEMsZ0JBQUFBLFNBQVMsSUFBSTVKLENBQUMsQ0FBQ3NFLFNBQUYsQ0FBWXdGLFFBQVosQ0FBcUIsUUFBckIsQ0FBYjtBQUNIO0FBQ0osYUFSRDtBQVNILFdBVkQsTUFVTztBQUNINUYsWUFBQUEsS0FBSyxDQUFDQyxTQUFOLENBQWdCQyxLQUFoQixDQUFzQkMsSUFBdEIsQ0FBMkI3RCxJQUFJLENBQUNtQixZQUFoQyxFQUE4Q3hCLE9BQTlDLENBQXNELFVBQVVILENBQVYsRUFBYTtBQUMvRCxrQkFBSUEsQ0FBQyxDQUFDcUIsWUFBRixDQUFlLFlBQWYsTUFBaUMsS0FBckMsRUFBNEM7QUFDeEMsb0JBQUltRyxJQUFJLEdBQUd4SCxDQUFDLENBQUNxQixZQUFGLENBQWUsV0FBZixFQUE0Qm9JLFdBQTVCLEVBQVg7O0FBQ0Esb0JBQUlqQyxJQUFJLENBQUNNLE9BQUwsQ0FBYXlCLFdBQWIsTUFBOEIsQ0FBQyxDQUEvQixJQUFvQ3ZKLENBQUMsQ0FBQ3FCLFlBQUYsQ0FBZSxZQUFmLE1BQWlDLEtBQXpFLEVBQWdGO0FBQzVFckIsa0JBQUFBLENBQUMsQ0FBQ3NFLFNBQUYsQ0FBWXFCLEdBQVosQ0FBZ0IsZUFBaEI7QUFDSCxpQkFGRCxNQUVPO0FBQ0hnRSxrQkFBQUEsT0FBTztBQUNQM0osa0JBQUFBLENBQUMsQ0FBQ3NFLFNBQUYsQ0FBWTFFLE1BQVosQ0FBbUIsZUFBbkI7QUFDQWdLLGtCQUFBQSxTQUFTLElBQUk1SixDQUFDLENBQUNzRSxTQUFGLENBQVl3RixRQUFaLENBQXFCLFFBQXJCLENBQWI7QUFDSDtBQUNKLGVBVEQsTUFTTztBQUNIckQsZ0JBQUFBLFNBQVMsR0FBR3pHLENBQVo7QUFDSDtBQUNKLGFBYkQ7QUFjSDs7QUFDRCxjQUFJeUcsU0FBSixFQUFlO0FBQ1gsZ0JBQUlrRCxPQUFPLEtBQUssQ0FBaEIsRUFBbUI7QUFDZmxELGNBQUFBLFNBQVMsQ0FBQ25DLFNBQVYsQ0FBb0JxQixHQUFwQixDQUF3QixVQUF4QjtBQUNILGFBRkQsTUFFTztBQUNIYyxjQUFBQSxTQUFTLENBQUNuQyxTQUFWLENBQW9CMUUsTUFBcEIsQ0FBMkIsVUFBM0I7QUFDSDs7QUFDRCxnQkFBSWdLLFNBQVMsS0FBS0QsT0FBbEIsRUFBMkI7QUFDdkJsRCxjQUFBQSxTQUFTLENBQUNuQyxTQUFWLENBQW9CMUUsTUFBcEIsQ0FBMkIsUUFBM0I7QUFDQTZHLGNBQUFBLFNBQVMsQ0FBQ0MsU0FBVixHQUFzQmxHLElBQUksQ0FBQ3NDLFdBQUwsQ0FBaUJJLFlBQWpCLENBQThCdUQsU0FBcEQ7QUFDQUEsY0FBQUEsU0FBUyxDQUFDYixZQUFWLENBQXVCLGVBQXZCLEVBQXdDLE9BQXhDO0FBQ0gsYUFKRCxNQUlPO0FBQ0hhLGNBQUFBLFNBQVMsQ0FBQ25DLFNBQVYsQ0FBb0JxQixHQUFwQixDQUF3QixRQUF4QjtBQUNBYyxjQUFBQSxTQUFTLENBQUNDLFNBQVYsR0FBc0JsRyxJQUFJLENBQUNzQyxXQUFMLENBQWlCSSxZQUFqQixDQUE4QjZHLFFBQXBEO0FBQ0F0RCxjQUFBQSxTQUFTLENBQUNiLFlBQVYsQ0FBdUIsZUFBdkIsRUFBd0MsTUFBeEM7QUFDSDtBQUNKO0FBQ0o7QUFDSixPQTNERDtBQTRESDs7QUFFRCxRQUFJcEYsSUFBSSxDQUFDc0MsV0FBTCxDQUFpQk0sUUFBckIsRUFBK0I7QUFDM0I1QyxNQUFBQSxJQUFJLENBQUNnQixJQUFMLENBQVV1QyxLQUFWLENBQWdCQyxVQUFoQixHQUE2QixTQUE3QjtBQUNBeEQsTUFBQUEsSUFBSSxDQUFDZ0IsSUFBTCxDQUFVdUMsS0FBVixDQUFnQmlHLFNBQWhCLEdBQTRCLE1BQTVCO0FBQ0F4SixNQUFBQSxJQUFJLENBQUNnQixJQUFMLENBQVV1QyxLQUFWLENBQWdCK0IsU0FBaEIsR0FBNkIsS0FBS2hELFdBQUwsQ0FBaUJHLFNBQWpCLEdBQTZCLEVBQTlCLEdBQW9DLElBQWhFO0FBQ0F6QyxNQUFBQSxJQUFJLENBQUNnQixJQUFMLENBQVV1QyxLQUFWLENBQWdCa0MsUUFBaEIsR0FBMkIsVUFBM0I7QUFDQXpGLE1BQUFBLElBQUksQ0FBQ2dCLElBQUwsQ0FBVXVDLEtBQVYsQ0FBZ0JyQyxJQUFoQixHQUF1QixLQUF2QjtBQUNBbEIsTUFBQUEsSUFBSSxDQUFDZ0IsSUFBTCxDQUFVdUMsS0FBVixDQUFnQnRDLEdBQWhCLEdBQXNCLEtBQXRCO0FBQ0FqQixNQUFBQSxJQUFJLENBQUNPLE1BQUwsQ0FBWWdELEtBQVosQ0FBa0JrRyxNQUFsQixHQUEyQixNQUEzQjtBQUNILEtBUkQsTUFRTztBQUNILFdBQUtuSixJQUFMLENBQVVxRyxnQkFBVixDQUEyQixPQUEzQixFQUFvQyxVQUFVQyxDQUFWLEVBQWE7QUFDN0MsWUFBSTVHLElBQUksQ0FBQ29CLFVBQVQsRUFBcUI7QUFDckJwQixRQUFBQSxJQUFJLENBQUNnQixJQUFMLENBQVV1QyxLQUFWLENBQWdCQyxVQUFoQixHQUE2QixTQUE3QjtBQUNBckQsUUFBQUEsUUFBUSxDQUFDd0csZ0JBQVQsQ0FBMEIsT0FBMUIsRUFBbUMrQyxXQUFuQztBQUNBOUMsUUFBQUEsQ0FBQyxDQUFDK0MsY0FBRjtBQUNBL0MsUUFBQUEsQ0FBQyxDQUFDZ0QsZUFBRjs7QUFDQSxZQUFJLENBQUM1SixJQUFJLENBQUNzQyxXQUFMLENBQWlCTSxRQUF0QixFQUFnQztBQUM1QmpFLFVBQUFBLFlBQVksQ0FBQ2UsYUFBYixDQUEyQk0sSUFBSSxDQUFDQyxjQUFoQztBQUNIO0FBQ0osT0FURDtBQVVIOztBQUVELFNBQUtlLElBQUwsQ0FBVTJGLGdCQUFWLENBQTJCLE9BQTNCLEVBQW9DLFVBQVVDLENBQVYsRUFBYTtBQUM3QyxVQUFJNUcsSUFBSSxDQUFDb0IsVUFBVCxFQUFxQjtBQUNyQixVQUFJd0YsQ0FBQyxDQUFDb0MsTUFBRixDQUFTYSxPQUFULEtBQXFCLE9BQXpCLEVBQWtDO0FBQ2xDLFVBQUlDLGlCQUFpQixHQUFHbEQsQ0FBQyxDQUFDb0MsTUFBRixDQUFTYSxPQUFULEtBQXFCLE1BQTdDO0FBQ0EsVUFBSUUsY0FBYyxHQUFHbkQsQ0FBQyxDQUFDb0MsTUFBRixDQUFTYSxPQUFULEtBQXFCLEdBQTFDO0FBQ0EsVUFBSUcsU0FBUyxHQUFHcEQsQ0FBQyxDQUFDb0MsTUFBRixDQUFTaUIsYUFBekI7O0FBQ0EsVUFBSSxDQUFDRCxTQUFTLENBQUN0SixZQUFWLENBQXVCLFlBQXZCLENBQUwsRUFBMkM7QUFDdkMsWUFBSXNKLFNBQVMsQ0FBQ2xHLFNBQVYsQ0FBb0J3RixRQUFwQixDQUE2QixnQkFBN0IsQ0FBSixFQUFvRDtBQUNoRCxjQUFJLENBQUNRLGlCQUFELElBQXNCLENBQUNDLGNBQTNCLEVBQTJDO0FBQzNDLGNBQUlHLFFBQUosRUFBY0MsUUFBZDs7QUFDQSxjQUFJSixjQUFKLEVBQW9CO0FBQUU7QUFDbEIvSixZQUFBQSxJQUFJLENBQUNvSyxzQkFBTCxDQUE0QkosU0FBNUI7QUFDSCxXQUZELE1BRU87QUFBRTtBQUNMLGdCQUFJQSxTQUFTLENBQUNsRyxTQUFWLENBQW9Cd0YsUUFBcEIsQ0FBNkIsTUFBN0IsQ0FBSixFQUEwQztBQUN0Q1ksY0FBQUEsUUFBUSxHQUFHLE1BQVg7QUFDQUMsY0FBQUEsUUFBUSxHQUFHLFFBQVg7QUFDSCxhQUhELE1BR087QUFDSEQsY0FBQUEsUUFBUSxHQUFHLFFBQVg7QUFDQUMsY0FBQUEsUUFBUSxHQUFHLE1BQVg7QUFDSDs7QUFDREgsWUFBQUEsU0FBUyxDQUFDbEcsU0FBVixDQUFvQjFFLE1BQXBCLENBQTJCOEssUUFBM0I7QUFDQUYsWUFBQUEsU0FBUyxDQUFDbEcsU0FBVixDQUFvQnFCLEdBQXBCLENBQXdCZ0YsUUFBeEI7QUFDQSxnQkFBSUUsV0FBVyxHQUFHckssSUFBSSxDQUFDZ0IsSUFBTCxDQUFVK0YsZ0JBQVYsQ0FBMkIsbUJBQW1CaUQsU0FBUyxDQUFDMUIsRUFBN0IsR0FBa0MsSUFBN0QsQ0FBbEI7QUFDQStCLFlBQUFBLFdBQVcsQ0FBQzFLLE9BQVosQ0FBb0IsVUFBVUgsQ0FBVixFQUFhO0FBQzdCQSxjQUFBQSxDQUFDLENBQUNzRSxTQUFGLENBQVkxRSxNQUFaLENBQW1COEssUUFBbkI7QUFDQTFLLGNBQUFBLENBQUMsQ0FBQ3NFLFNBQUYsQ0FBWXFCLEdBQVosQ0FBZ0JnRixRQUFoQjtBQUNILGFBSEQ7QUFJSDs7QUFDRDtBQUNIO0FBQ0o7O0FBQ0QsVUFBSUcsV0FBVyxHQUFHMUQsQ0FBQyxDQUFDb0MsTUFBRixDQUFTbkksWUFBVCxDQUFzQixZQUF0QixDQUFsQjtBQUNBLFVBQUkwSixVQUFVLEdBQUczRCxDQUFDLENBQUNvQyxNQUFGLENBQVNuSSxZQUFULENBQXNCLFdBQXRCLENBQWpCO0FBQ0EsVUFBSTJKLFNBQVMsR0FBRzVELENBQUMsQ0FBQ29DLE1BQUYsQ0FBU25JLFlBQVQsQ0FBc0IsT0FBdEIsQ0FBaEI7O0FBRUEsVUFBSTJKLFNBQVMsSUFBSUEsU0FBUyxDQUFDbEQsT0FBVixDQUFrQixVQUFsQixLQUFpQyxDQUFDLENBQW5ELEVBQXNEO0FBQ2xEO0FBQ0g7O0FBRUQsVUFBSWtELFNBQVMsSUFBSUEsU0FBUyxDQUFDbEQsT0FBVixDQUFrQixVQUFsQixLQUFpQyxDQUFDLENBQW5ELEVBQXNEO0FBQ2xEO0FBQ0g7O0FBRUQsVUFBSWdELFdBQVcsS0FBSyxLQUFwQixFQUEyQjtBQUN2QixZQUFJMUQsQ0FBQyxDQUFDb0MsTUFBRixDQUFTdEksWUFBVCxDQUFzQixlQUF0QixLQUNHa0csQ0FBQyxDQUFDb0MsTUFBRixDQUFTbkksWUFBVCxDQUFzQixlQUF0QixNQUEyQyxNQURsRCxFQUMwRDtBQUN0RGIsVUFBQUEsSUFBSSxDQUFDeUssUUFBTCxDQUFjLE1BQWQ7QUFDSCxTQUhELE1BR087QUFDSHpLLFVBQUFBLElBQUksQ0FBQ3lLLFFBQUwsQ0FBYyxLQUFkO0FBQ0g7O0FBQ0Q7QUFDSDs7QUFFRCxVQUFJLENBQUN6SyxJQUFJLENBQUNTLFVBQVYsRUFBc0I7QUFDbEJULFFBQUFBLElBQUksQ0FBQ0UsSUFBTCxDQUFVdUQsS0FBVixHQUFrQjZHLFdBQWxCO0FBQ0F0SyxRQUFBQSxJQUFJLENBQUNRLEtBQUwsQ0FBV3lHLFdBQVgsR0FBeUJzRCxVQUF6Qjs7QUFDQSxZQUFJQyxTQUFKLEVBQWU7QUFDWHhLLFVBQUFBLElBQUksQ0FBQ1EsS0FBTCxDQUFXNEUsWUFBWCxDQUF3QixPQUF4QixFQUFpQ29GLFNBQVMsR0FBRyxRQUE3QztBQUNILFNBRkQsTUFFTztBQUNIeEssVUFBQUEsSUFBSSxDQUFDUSxLQUFMLENBQVc0RSxZQUFYLENBQXdCLE9BQXhCLEVBQWlDLE9BQWpDO0FBQ0g7O0FBQ0QxQixRQUFBQSxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQjdELElBQUksQ0FBQ21CLFlBQWhDLEVBQThDeEIsT0FBOUMsQ0FBc0QsVUFBVUgsQ0FBVixFQUFhO0FBQy9EQSxVQUFBQSxDQUFDLENBQUNzRSxTQUFGLENBQVkxRSxNQUFaLENBQW1CLFFBQW5CO0FBQ0gsU0FGRDs7QUFHQSxZQUFJbUwsVUFBVSxJQUFJLEVBQWxCLEVBQXNCO0FBQ2xCM0QsVUFBQUEsQ0FBQyxDQUFDb0MsTUFBRixDQUFTbEYsU0FBVCxDQUFtQnFCLEdBQW5CLENBQXVCLFFBQXZCO0FBQ0g7O0FBQ0RuRixRQUFBQSxJQUFJLENBQUMwSyxpQkFBTDs7QUFDQSxZQUFJLENBQUMxSyxJQUFJLENBQUNzQyxXQUFMLENBQWlCTSxRQUF0QixFQUFnQztBQUM1QjhHLFVBQUFBLFdBQVc7QUFDZDtBQUNKLE9BbEJELE1Ba0JPO0FBQ0gsWUFBSWlCLFNBQVMsR0FBRyxLQUFoQjs7QUFDQSxZQUFJSCxTQUFKLEVBQWU7QUFDWEcsVUFBQUEsU0FBUyxHQUFHSCxTQUFTLENBQUNsRCxPQUFWLENBQWtCLFFBQWxCLEtBQStCLENBQUMsQ0FBNUM7QUFDSDs7QUFDRCxZQUFJcUQsU0FBSixFQUFlO0FBQ1gvRCxVQUFBQSxDQUFDLENBQUNvQyxNQUFGLENBQVNsRixTQUFULENBQW1CMUUsTUFBbkIsQ0FBMEIsUUFBMUI7QUFDSCxTQUZELE1BRU87QUFDSHdILFVBQUFBLENBQUMsQ0FBQ29DLE1BQUYsQ0FBU2xGLFNBQVQsQ0FBbUJxQixHQUFuQixDQUF1QixRQUF2QjtBQUNIOztBQUNELFlBQUl5QixDQUFDLENBQUNvQyxNQUFGLENBQVN0SSxZQUFULENBQXNCLGFBQXRCLENBQUosRUFBMEM7QUFDdENWLFVBQUFBLElBQUksQ0FBQzRLLHFCQUFMLENBQTJCaEUsQ0FBQyxDQUFDb0MsTUFBN0I7QUFDSDs7QUFFRCxZQUFJM0MsY0FBYSxHQUFHLEVBQXBCO0FBQ0EsWUFBSUMsSUFBRyxHQUFHLEVBQVY7QUFDQSxZQUFJQyxVQUFTLEdBQUcsQ0FBaEI7QUFDQSxZQUFJc0UsS0FBSyxHQUFHLENBQVo7O0FBQ0EsYUFBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHOUssSUFBSSxDQUFDRCxPQUFMLENBQWFaLE1BQWpDLEVBQXlDMkwsQ0FBQyxFQUExQyxFQUE4QztBQUMxQ0QsVUFBQUEsS0FBSzs7QUFDTCxjQUFJN0ssSUFBSSxDQUFDRCxPQUFMLENBQWErSyxDQUFiLEVBQWdCckgsS0FBaEIsSUFBeUI2RyxXQUE3QixFQUEwQztBQUN0Q3RLLFlBQUFBLElBQUksQ0FBQ0QsT0FBTCxDQUFhK0ssQ0FBYixFQUFnQkMsUUFBaEIsR0FBMkIsQ0FBQ0osU0FBNUI7QUFDSDs7QUFDRCxjQUFJM0ssSUFBSSxDQUFDRCxPQUFMLENBQWErSyxDQUFiLEVBQWdCQyxRQUFwQixFQUE4QjtBQUMxQnhFLFlBQUFBLFVBQVM7QUFDVEYsWUFBQUEsY0FBYSxJQUFJQyxJQUFHLEdBQUd0RyxJQUFJLENBQUNELE9BQUwsQ0FBYStLLENBQWIsRUFBZ0I3RCxXQUF2QztBQUNBWCxZQUFBQSxJQUFHLEdBQUd0RyxJQUFJLENBQUNzQyxXQUFMLENBQWlCUSxvQkFBdkI7QUFDSDtBQUNKOztBQUNELFlBQUkrSCxLQUFLLElBQUl0RSxVQUFTLEdBQUdrQyxNQUFNLENBQUMsQ0FBQ3pJLElBQUksQ0FBQ3NDLFdBQUwsQ0FBaUJPLGdCQUFuQixDQUEvQixFQUFxRTtBQUNqRSxjQUFJNkYsV0FBVSxHQUFHMUksSUFBSSxDQUFDc0MsV0FBTCxDQUFpQkksWUFBakIsQ0FBOEJpRyxHQUEvQztBQUNBdEMsVUFBQUEsY0FBYSxHQUFHcUMsV0FBaEI7QUFDSCxTQUhELE1BR08sSUFBSTFJLElBQUksQ0FBQ1csWUFBTCxJQUFxQixDQUFDLENBQTFCLEVBQTZCO0FBQ2hDLGNBQUk0RixVQUFTLEdBQUd2RyxJQUFJLENBQUNXLFlBQXJCLEVBQW1DO0FBQy9CLGdCQUFJaUksYUFBWSxHQUFHckMsVUFBUyxLQUFLLENBQWQsR0FBa0J2RyxJQUFJLENBQUNzQyxXQUFMLENBQWlCSSxZQUFqQixDQUE4Qm1HLElBQWhELEdBQXVEN0ksSUFBSSxDQUFDc0MsV0FBTCxDQUFpQkksWUFBakIsQ0FBOEJvRyxLQUF4Rzs7QUFDQXpDLFlBQUFBLGNBQWEsR0FBR0UsVUFBUyxHQUFHLEdBQVosR0FBa0JxQyxhQUFsQztBQUNIO0FBQ0o7O0FBQ0Q1SSxRQUFBQSxJQUFJLENBQUNRLEtBQUwsQ0FBV3lHLFdBQVgsR0FBeUJaLGNBQXpCO0FBQ0FyRyxRQUFBQSxJQUFJLENBQUNnTCxjQUFMLENBQW9CekUsVUFBcEI7QUFDQXZHLFFBQUFBLElBQUksQ0FBQ2lMLGVBQUw7QUFDQWpMLFFBQUFBLElBQUksQ0FBQzBLLGlCQUFMO0FBQ0g7O0FBQ0Q5RCxNQUFBQSxDQUFDLENBQUMrQyxjQUFGO0FBQ0EvQyxNQUFBQSxDQUFDLENBQUNnRCxlQUFGOztBQUNBLFVBQUk1SixJQUFJLENBQUNzQyxXQUFMLENBQWlCSyxXQUFqQixJQUFnQyxFQUFoQyxJQUFzQzNDLElBQUksQ0FBQ1EsS0FBTCxDQUFXeUcsV0FBWCxJQUEwQixFQUFwRSxFQUF3RTtBQUNwRWpILFFBQUFBLElBQUksQ0FBQ1EsS0FBTCxDQUFXeUcsV0FBWCxHQUF5QmpILElBQUksQ0FBQ3NDLFdBQUwsQ0FBaUJLLFdBQTFDO0FBQ0g7QUFDSixLQXZIRDs7QUF3SEEsYUFBUytHLFdBQVQsR0FBdUI7QUFDbkJ2SixNQUFBQSxRQUFRLENBQUMrSyxtQkFBVCxDQUE2QixPQUE3QixFQUFzQ3hCLFdBQXRDO0FBQ0ExSixNQUFBQSxJQUFJLENBQUNnQixJQUFMLENBQVV1QyxLQUFWLENBQWdCQyxVQUFoQixHQUE2QixRQUE3Qjs7QUFDQSxVQUFJeEQsSUFBSSxDQUFDcUIsTUFBVCxFQUFpQjtBQUNickIsUUFBQUEsSUFBSSxDQUFDdUIsUUFBTCxDQUFja0MsS0FBZCxHQUFzQixFQUF0QjtBQUNBQyxRQUFBQSxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQjdELElBQUksQ0FBQ21CLFlBQWhDLEVBQThDeEIsT0FBOUMsQ0FBc0QsVUFBVUgsQ0FBVixFQUFhO0FBQy9EQSxVQUFBQSxDQUFDLENBQUNzRSxTQUFGLENBQVkxRSxNQUFaLENBQW1CLGVBQW5CO0FBQ0gsU0FGRDtBQUdIO0FBQ0o7QUFDSixHQWpkRDs7QUFrZEEsT0FBS2tGLElBQUw7QUFDQSxPQUFLMkcsZUFBTDtBQUNIOztBQUVEcEwsZ0JBQWdCLENBQUM4RCxTQUFqQixDQUEyQmMsV0FBM0IsR0FBeUMsVUFBVUQsSUFBVixFQUFnQjtBQUNyRCxNQUFJeEUsSUFBSSxHQUFHLElBQVg7QUFDQSxNQUFHd0UsSUFBSSxJQUFJLElBQVIsSUFBZ0JBLElBQUksQ0FBQ3JGLE1BQUwsR0FBYyxDQUFqQyxFQUFvQzs7QUFDcEMsTUFBRyxDQUFDYSxJQUFJLENBQUNjLFdBQVQsRUFBcUI7QUFDakJkLElBQUFBLElBQUksQ0FBQ2MsV0FBTCxHQUFtQjBELElBQUksQ0FBQyxDQUFELENBQUosQ0FBUTJHLE1BQVIsSUFBa0JqSSxTQUFsQixJQUErQnNCLElBQUksQ0FBQyxDQUFELENBQUosQ0FBUTJHLE1BQVIsSUFBa0IsRUFBcEU7QUFDSDs7QUFFRCxNQUFHbkwsSUFBSSxDQUFDYyxXQUFSLEVBQW9CO0FBQ2hCLFFBQUlnSCxNQUFNLEdBQUcsRUFBYjtBQUNBdEQsSUFBQUEsSUFBSSxHQUFHQSxJQUFJLENBQUNqRixNQUFMLENBQVksVUFBU0MsQ0FBVCxFQUFXO0FBQzFCLGFBQU9BLENBQUMsQ0FBQzJMLE1BQUYsSUFBWWpJLFNBQVosSUFBeUIxRCxDQUFDLENBQUMyTCxNQUFGLElBQVksRUFBNUM7QUFDSCxLQUZNLENBQVA7QUFJQTNHLElBQUFBLElBQUksQ0FBQzdFLE9BQUwsQ0FBYSxVQUFVSCxDQUFWLEVBQWE7QUFDdEIsVUFBRyxDQUFDc0ksTUFBTSxDQUFDdEksQ0FBQyxDQUFDMkwsTUFBSCxDQUFWLEVBQXFCO0FBQ2pCckQsUUFBQUEsTUFBTSxDQUFDdEksQ0FBQyxDQUFDMkwsTUFBSCxDQUFOLEdBQW1CLElBQW5CO0FBQ0g7QUFDSixLQUpEOztBQU5nQiwrQkFXUHBELEtBWE87QUFZWixVQUFJcUQsVUFBVSxHQUFHakwsUUFBUSxDQUFDNEUsYUFBVCxDQUF1QixVQUF2QixDQUFqQjtBQUNBcUcsTUFBQUEsVUFBVSxDQUFDaEcsWUFBWCxDQUF3QixPQUF4QixFQUFpQzJDLEtBQWpDO0FBRUFoSSxNQUFBQSxPQUFPLEdBQUd5RSxJQUFJLENBQUNqRixNQUFMLENBQVksVUFBU0MsQ0FBVCxFQUFXO0FBQzdCLGVBQU9BLENBQUMsQ0FBQzJMLE1BQUYsSUFBWXBELEtBQW5CO0FBQ0gsT0FGUyxDQUFWO0FBR0FoSSxNQUFBQSxPQUFPLENBQUNKLE9BQVIsQ0FBZ0IsVUFBVUgsQ0FBVixFQUFhO0FBQ3pCLFlBQUk2TCxRQUFRLEdBQUdsTCxRQUFRLENBQUM0RSxhQUFULENBQXVCLFFBQXZCLENBQWY7QUFDQXNHLFFBQUFBLFFBQVEsQ0FBQzVILEtBQVQsR0FBaUJqRSxDQUFDLENBQUNpRSxLQUFuQjtBQUNBNEgsUUFBQUEsUUFBUSxDQUFDckUsSUFBVCxHQUFnQnhILENBQUMsQ0FBQ3dILElBQWxCOztBQUNBLFlBQUd4SCxDQUFDLENBQUN1TCxRQUFMLEVBQWM7QUFDVk0sVUFBQUEsUUFBUSxDQUFDakcsWUFBVCxDQUFzQixVQUF0QixFQUFpQyxJQUFqQztBQUNIOztBQUNEZ0csUUFBQUEsVUFBVSxDQUFDN0YsV0FBWCxDQUF1QjhGLFFBQXZCO0FBQ0gsT0FSRDtBQVNBckwsTUFBQUEsSUFBSSxDQUFDRSxJQUFMLENBQVVxRixXQUFWLENBQXNCNkYsVUFBdEI7QUEzQlk7O0FBV2hCLFNBQUssSUFBSXJELEtBQVQsSUFBa0JELE1BQWxCLEVBQTBCO0FBQUEsWUFBakJDLEtBQWlCO0FBaUJ6QjtBQUNKLEdBN0JELE1BNkJLO0FBQ0R2RCxJQUFBQSxJQUFJLENBQUM3RSxPQUFMLENBQWEsVUFBVUgsQ0FBVixFQUFhO0FBQ3RCLFVBQUk2TCxRQUFRLEdBQUdsTCxRQUFRLENBQUM0RSxhQUFULENBQXVCLFFBQXZCLENBQWY7QUFDQXNHLE1BQUFBLFFBQVEsQ0FBQzVILEtBQVQsR0FBaUJqRSxDQUFDLENBQUNpRSxLQUFuQjtBQUNBNEgsTUFBQUEsUUFBUSxDQUFDckUsSUFBVCxHQUFnQnhILENBQUMsQ0FBQ3dILElBQWxCOztBQUNBLFVBQUd4SCxDQUFDLENBQUN1TCxRQUFMLEVBQWM7QUFDVk0sUUFBQUEsUUFBUSxDQUFDakcsWUFBVCxDQUFzQixVQUF0QixFQUFpQyxJQUFqQztBQUNIOztBQUNEcEYsTUFBQUEsSUFBSSxDQUFDRSxJQUFMLENBQVVxRixXQUFWLENBQXNCOEYsUUFBdEI7QUFDSCxLQVJEO0FBU0g7QUFDSixDQS9DRDs7QUFpREF4TCxnQkFBZ0IsQ0FBQzhELFNBQWpCLENBQTJCMEYscUJBQTNCLEdBQW1ELFVBQVU3RSxJQUFWLEVBQWdCO0FBQy9ELE1BQUl4RSxJQUFJLEdBQUcsSUFBWDs7QUFFQSxNQUFJd0UsSUFBSSxJQUFJLElBQVIsSUFBZ0JBLElBQUksQ0FBQ3JGLE1BQUwsSUFBZSxDQUFuQyxFQUFzQztBQUNsQyxRQUFJbU0sV0FBVyxHQUFHdEwsSUFBSSxDQUFDdUwsb0JBQUwsRUFBbEI7QUFDQSxRQUFHRCxXQUFILEVBQ0k5RyxJQUFJLEdBQUc4RyxXQUFXLENBQUMxSCxLQUFaLENBQWtCLENBQWxCLENBQVA7QUFDSjVELElBQUFBLElBQUksQ0FBQ3dMLHVCQUFMLENBQTZCaEgsSUFBN0I7QUFDSCxHQUxELE1BS087QUFDSCxRQUFJOEcsWUFBVyxHQUFHdEwsSUFBSSxDQUFDdUwsb0JBQUwsRUFBbEI7O0FBQ0EsUUFBSUQsWUFBVyxDQUFDbk0sTUFBWixHQUFxQixDQUF6QixFQUEyQjtBQUN2QixXQUFLLElBQUkyTCxDQUFDLEdBQUd0RyxJQUFJLENBQUNyRixNQUFMLEdBQWMsQ0FBM0IsRUFBOEIyTCxDQUFDLElBQUksQ0FBbkMsRUFBc0NBLENBQUMsRUFBdkMsRUFBMkM7QUFDdkMsWUFBR1EsWUFBVyxDQUFDaEUsT0FBWixDQUFvQjlDLElBQUksQ0FBQ3NHLENBQUQsQ0FBSixDQUFReEMsRUFBNUIsS0FBa0MsQ0FBQyxDQUF0QyxFQUF3QztBQUNwQzlELFVBQUFBLElBQUksQ0FBQ1osS0FBTCxDQUFXa0gsQ0FBWCxFQUFhLENBQWI7QUFDSDtBQUNKO0FBQ0o7O0FBQ0R0RyxJQUFBQSxJQUFJLEdBQUdBLElBQUksQ0FBQ2lILE1BQUwsQ0FBWUgsWUFBWixDQUFQO0FBRUF0TCxJQUFBQSxJQUFJLENBQUN3TCx1QkFBTCxDQUE2QmhILElBQTdCO0FBQ0g7QUFDSixDQXJCRDs7QUF1QkEzRSxnQkFBZ0IsQ0FBQzhELFNBQWpCLENBQTJCNEgsb0JBQTNCLEdBQWtELFlBQVk7QUFDMUQsTUFBSXZMLElBQUksR0FBRyxJQUFYO0FBQ0EsTUFBSXNMLFdBQVcsR0FBRyxFQUFsQjtBQUNBLE1BQUlJLFdBQVcsR0FBRzFMLElBQUksQ0FBQ2dHLEVBQUwsQ0FBUWUsZ0JBQVIsQ0FBeUIsZ0NBQXpCLENBQWxCO0FBQ0EsTUFBSTRFLFdBQVcsR0FBRyxFQUFsQjs7QUFDSSxNQUFJRCxXQUFKLEVBQWlCO0FBQ2JoSSxJQUFBQSxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQjZILFdBQTNCLEVBQXdDL0wsT0FBeEMsQ0FBZ0QsVUFBVUgsQ0FBVixFQUFhO0FBQ3pELFVBQUlvTSxPQUFPLEdBQUc7QUFBQyxpQkFBUXBNLENBQUMsQ0FBQ3FCLFlBQUYsQ0FBZSxZQUFmLENBQVQ7QUFBc0MsZ0JBQU9yQixDQUFDLENBQUNxQixZQUFGLENBQWUsV0FBZixDQUE3QztBQUF5RSxvQkFBVztBQUFwRixPQUFkOztBQUNBLFVBQUcrSyxPQUFPLENBQUNuSSxLQUFSLEtBQWtCLEtBQXJCLEVBQTJCO0FBQ3ZCLFlBQUd6RCxJQUFJLENBQUNjLFdBQVIsRUFBb0I7QUFDaEIsY0FBSStLLFFBQVEsR0FBR3JNLENBQUMsQ0FBQ3FCLFlBQUYsQ0FBZSxhQUFmLENBQWY7O0FBQ0EsY0FBRzhLLFdBQVcsQ0FBQ0UsUUFBRCxDQUFYLElBQXVCM0ksU0FBMUIsRUFBb0M7QUFDaEMwSSxZQUFBQSxPQUFPLENBQUNULE1BQVIsR0FBaUJRLFdBQVcsQ0FBQ0UsUUFBRCxDQUE1QjtBQUNILFdBRkQsTUFFSztBQUNELGdCQUFJQyxTQUFTLEdBQUc5TCxJQUFJLENBQUNnRyxFQUFMLENBQVE1RixhQUFSLENBQXNCLE1BQUl5TCxRQUExQixDQUFoQjtBQUNBLGdCQUFJRSxVQUFVLEdBQUdELFNBQVMsQ0FBQ2pMLFlBQVYsQ0FBdUIsV0FBdkIsQ0FBakI7QUFDQThLLFlBQUFBLFdBQVcsQ0FBQ0UsUUFBRCxDQUFYLEdBQXdCRSxVQUF4QjtBQUNBSCxZQUFBQSxPQUFPLENBQUNULE1BQVIsR0FBaUJZLFVBQWpCO0FBQ0g7QUFDSjs7QUFDRFQsUUFBQUEsV0FBVyxDQUFDdE0sSUFBWixDQUFpQjRNLE9BQWpCO0FBQ0g7QUFDSixLQWhCRDtBQWlCSDs7QUFDRCxTQUFPTixXQUFQO0FBQ1AsQ0F6QkQ7O0FBMkJBekwsZ0JBQWdCLENBQUM4RCxTQUFqQixDQUEyQnFJLHVCQUEzQixHQUFxRCxVQUFVeEgsSUFBVixFQUFnQjtBQUNqRSxNQUFJeEUsSUFBSSxHQUFHLElBQVg7QUFDQSxNQUFJaU0sV0FBVyxHQUFHak0sSUFBSSxDQUFDbUMsVUFBdkI7QUFDQSxNQUFJK0osYUFBYSxHQUFHMUgsSUFBSSxJQUFJLElBQVIsR0FBZSxDQUFmLEdBQW1CQSxJQUFJLENBQUNyRixNQUE1QztBQUNBLE1BQUlnTixXQUFXLEdBQUduTSxJQUFJLENBQUNFLElBQUwsQ0FBVWYsTUFBNUI7O0FBQ0EsTUFBSWdOLFdBQVcsR0FBR0QsYUFBZCxHQUE4QkQsV0FBbEMsRUFBK0M7QUFDM0MsUUFBSUcsV0FBVyxHQUFHRCxXQUFXLEdBQUdELGFBQWQsR0FBOEJELFdBQTlCLEdBQTRDLENBQTlEO0FBQ0EsUUFBSUksT0FBTyxHQUFHLENBQWQ7O0FBQ0EsU0FBSyxJQUFJdkIsQ0FBQyxHQUFHOUssSUFBSSxDQUFDRSxJQUFMLENBQVVmLE1BQVYsR0FBbUIsQ0FBaEMsRUFBbUMyTCxDQUFDLElBQUksQ0FBeEMsRUFBMkNBLENBQUMsRUFBNUMsRUFBZ0Q7QUFDNUMsVUFBSTlLLElBQUksQ0FBQ0UsSUFBTCxDQUFVSCxPQUFWLENBQWtCK0ssQ0FBbEIsRUFBcUJDLFFBQXJCLElBQWlDLEtBQXJDLEVBQTRDO0FBQ3hDLFlBQUlzQixPQUFPLElBQUlELFdBQWYsRUFBNEI7QUFDeEJDLFVBQUFBLE9BQU87QUFDUHJNLFVBQUFBLElBQUksQ0FBQ0UsSUFBTCxDQUFVZCxNQUFWLENBQWlCMEwsQ0FBakI7QUFDSDtBQUNKO0FBQ0o7QUFDSjtBQUNKLENBakJEOztBQW1CQWpMLGdCQUFnQixDQUFDOEQsU0FBakIsQ0FBMkIySSxVQUEzQixHQUF3QyxVQUFVOUgsSUFBVixFQUFnQnpFLE9BQWhCLEVBQXlCO0FBQzdELE1BQUlDLElBQUksR0FBRyxJQUFYO0FBQ0FBLEVBQUFBLElBQUksQ0FBQ3VNLEtBQUw7QUFDQXZNLEVBQUFBLElBQUksQ0FBQ3dMLHVCQUFMLENBQTZCaEgsSUFBN0I7O0FBQ0EsTUFBSXpFLE9BQU8sSUFBSUEsT0FBTyxDQUFDbUMsUUFBdkIsRUFBaUM7QUFDN0IsUUFBSSxPQUFPbkMsT0FBTyxDQUFDbUMsUUFBZixLQUE0QixVQUFoQyxFQUE0QztBQUN4Q2xDLE1BQUFBLElBQUksQ0FBQ2tDLFFBQUwsR0FBZ0JuQyxPQUFPLENBQUNtQyxRQUF4QjtBQUNBbEMsTUFBQUEsSUFBSSxDQUFDZ0MsY0FBTCxHQUFzQixJQUF0QjtBQUNIO0FBQ0o7O0FBQ0RoQyxFQUFBQSxJQUFJLENBQUNtQixZQUFMLEdBQW9CLEtBQUtILElBQUwsQ0FBVStGLGdCQUFWLENBQTJCLHlCQUEzQixDQUFwQjtBQUNILENBWEQ7O0FBYUFsSCxnQkFBZ0IsQ0FBQzhELFNBQWpCLENBQTJCNkgsdUJBQTNCLEdBQXFELFVBQVVoSCxJQUFWLEVBQWdCO0FBQ2pFLE1BQUl4RSxJQUFJLEdBQUcsSUFBWDtBQUNBLE1BQUl3RSxJQUFJLElBQUksSUFBUixJQUFnQkEsSUFBSSxDQUFDckYsTUFBTCxJQUFlLENBQW5DLEVBQXNDOztBQUN0QyxTQUFNYSxJQUFJLENBQUNFLElBQUwsQ0FBVXNNLFVBQWhCO0FBQ0F4TSxJQUFBQSxJQUFJLENBQUNFLElBQUwsQ0FBVXVNLFdBQVYsQ0FBc0J6TSxJQUFJLENBQUNFLElBQUwsQ0FBVXNNLFVBQWhDO0FBREE7O0FBR0F4TSxFQUFBQSxJQUFJLENBQUN5RSxXQUFMLENBQWlCRCxJQUFqQjtBQUNBeEUsRUFBQUEsSUFBSSxDQUFDME0sVUFBTDtBQUNILENBUkQ7O0FBVUE3TSxnQkFBZ0IsQ0FBQzhELFNBQWpCLENBQTJCK0ksVUFBM0IsR0FBd0MsWUFBWTtBQUNoRCxNQUFJMU0sSUFBSSxHQUFHLElBQVg7QUFDQSxNQUFJMk0sR0FBRyxHQUFHM00sSUFBSSxDQUFDZ0csRUFBTCxDQUFRZSxnQkFBUixDQUF5QixJQUF6QixDQUFWOztBQUNBLE1BQUk0RixHQUFHLElBQUksSUFBWCxFQUFpQjtBQUNiLFNBQUssSUFBSTdCLENBQUMsR0FBRzZCLEdBQUcsQ0FBQ3hOLE1BQUosR0FBYSxDQUExQixFQUE2QjJMLENBQUMsSUFBSSxDQUFsQyxFQUFxQ0EsQ0FBQyxFQUF0QyxFQUEwQztBQUN0QyxVQUFJNkIsR0FBRyxDQUFDN0IsQ0FBRCxDQUFILENBQU9qSyxZQUFQLENBQW9CLFlBQXBCLE1BQXNDLEtBQTFDLEVBQWlEO0FBQzdDYixRQUFBQSxJQUFJLENBQUNnRyxFQUFMLENBQVF5RyxXQUFSLENBQW9CRSxHQUFHLENBQUM3QixDQUFELENBQXZCO0FBQ0g7QUFDSjtBQUNKOztBQUVELE1BQUl6RSxhQUFhLEdBQUcsRUFBcEI7QUFDQSxNQUFJQyxHQUFHLEdBQUcsRUFBVjtBQUNBLE1BQUlDLFNBQVMsR0FBRyxDQUFoQjtBQUNBLE1BQUlzRSxLQUFLLEdBQUcsQ0FBWjs7QUFFQSxNQUFJN0ssSUFBSSxDQUFDYyxXQUFULEVBQXNCO0FBQ2xCLFFBQUlYLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QkosSUFBSSxDQUFDRixXQUFMLEdBQW1CLFdBQTFDLE1BQTJELElBQS9ELEVBQXFFO0FBQ2pFRSxNQUFBQSxJQUFJLENBQUNELE9BQUwsR0FBZUksUUFBUSxDQUFDNEcsZ0JBQVQsQ0FBMEIsS0FBS2pILFdBQUwsR0FBbUIsU0FBN0MsQ0FBZjtBQUNBLFVBQUlnSSxNQUFNLEdBQUczSCxRQUFRLENBQUM0RyxnQkFBVCxDQUEwQixLQUFLakgsV0FBTCxHQUFtQixXQUE3QyxDQUFiO0FBQ0E0RCxNQUFBQSxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQmlFLE1BQTNCLEVBQW1DbkksT0FBbkMsQ0FBMkMsVUFBVW9JLEtBQVYsRUFBaUI7QUFDeEQsWUFBSUMsWUFBWSxHQUFHRCxLQUFLLENBQUNoQixnQkFBTixDQUF1QixRQUF2QixDQUFuQjtBQUNBLFlBQUlZLEVBQUUsR0FBR3hILFFBQVEsQ0FBQzRFLGFBQVQsQ0FBdUIsSUFBdkIsQ0FBVDtBQUNBLFlBQUlrRCxJQUFJLEdBQUc5SCxRQUFRLENBQUM0RSxhQUFULENBQXVCLE1BQXZCLENBQVg7QUFDQSxZQUFJbUQsTUFBTSxHQUFHL0gsUUFBUSxDQUFDNEUsYUFBVCxDQUF1QixHQUF2QixDQUFiO0FBQ0EsWUFBSW9ELFlBQVksR0FBR2hJLFFBQVEsQ0FBQzRFLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBbkI7QUFDQSxZQUFJcUQsT0FBTyxHQUFHTCxLQUFLLENBQUNsSCxZQUFOLENBQW1CLFVBQW5CLENBQWQ7QUFDQSxZQUFJLENBQUN1SCxPQUFMLEVBQWNBLE9BQU8sR0FBRyxRQUFWO0FBQ2QsWUFBSSxDQUFDQSxPQUFELElBQWFBLE9BQU8sS0FBSyxRQUFaLElBQXdCQSxPQUFPLEtBQUssTUFBckQsRUFBOERBLE9BQU8sR0FBRyxRQUFWO0FBQzlEVCxRQUFBQSxFQUFFLENBQUNwQyxXQUFILENBQWUwQyxJQUFmO0FBQ0FOLFFBQUFBLEVBQUUsQ0FBQ3BDLFdBQUgsQ0FBZTJDLE1BQWY7QUFDQWxJLFFBQUFBLElBQUksQ0FBQ2dHLEVBQUwsQ0FBUVQsV0FBUixDQUFvQm9DLEVBQXBCO0FBQ0FBLFFBQUFBLEVBQUUsQ0FBQzdELFNBQUgsQ0FBYXFCLEdBQWIsQ0FBaUIsZ0JBQWpCO0FBQ0F3QyxRQUFBQSxFQUFFLENBQUM3RCxTQUFILENBQWFxQixHQUFiLENBQWlCaUQsT0FBakI7QUFDQXBJLFFBQUFBLElBQUksQ0FBQ2UsZUFBTDtBQUNBLFlBQUlzSCxLQUFLLEdBQUdySSxJQUFJLENBQUNLLFNBQUwsR0FBaUIsT0FBakIsR0FBMkJMLElBQUksQ0FBQ2UsZUFBNUM7QUFDQTRHLFFBQUFBLEVBQUUsQ0FBQ1csRUFBSCxHQUFRRCxLQUFSO0FBQ0FWLFFBQUFBLEVBQUUsQ0FBQ3BDLFdBQUgsQ0FBZTRDLFlBQWY7QUFDQUEsUUFBQUEsWUFBWSxDQUFDNUMsV0FBYixDQUF5QnBGLFFBQVEsQ0FBQzBILGNBQVQsQ0FBd0JFLEtBQUssQ0FBQ1EsS0FBOUIsQ0FBekI7QUFDQVosUUFBQUEsRUFBRSxDQUFDdkMsWUFBSCxDQUFnQixXQUFoQixFQUE2QjJDLEtBQUssQ0FBQ1EsS0FBbkM7QUFDQXZJLFFBQUFBLElBQUksQ0FBQ2dHLEVBQUwsQ0FBUVQsV0FBUixDQUFvQm9DLEVBQXBCO0FBRUFqRSxRQUFBQSxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQm1FLFlBQTNCLEVBQXlDckksT0FBekMsQ0FBaUQsVUFBVUgsQ0FBVixFQUFhO0FBQzFELGNBQUl3SCxJQUFJLEdBQUd4SCxDQUFDLENBQUN5SCxXQUFiO0FBQ0EsY0FBSXhELEtBQUssR0FBR2pFLENBQUMsQ0FBQ2lFLEtBQWQ7QUFDQSxjQUFJK0QsT0FBTyxHQUFHaEksQ0FBQyxDQUFDcUIsWUFBRixDQUFlLE9BQWYsQ0FBZDs7QUFDQSxjQUFJMkcsT0FBSixFQUFhO0FBQ1RBLFlBQUFBLE9BQU8sR0FBR0EsT0FBTyxDQUFDQyxLQUFSLENBQWMsR0FBZCxDQUFWO0FBQ0gsV0FGRCxNQUdLO0FBQ0RELFlBQUFBLE9BQU8sR0FBRyxFQUFWO0FBQ0g7O0FBQ0RBLFVBQUFBLE9BQU8sQ0FBQ3hJLElBQVIsQ0FBYW9KLE9BQWI7QUFDQSxjQUFJVCxFQUFFLEdBQUd4SCxRQUFRLENBQUM0RSxhQUFULENBQXVCLElBQXZCLENBQVQ7QUFDQSxjQUFJNkMsVUFBVSxHQUFHcEksQ0FBQyxDQUFDa0IsWUFBRixDQUFlLFVBQWYsQ0FBakI7QUFDQVYsVUFBQUEsSUFBSSxDQUFDZ0csRUFBTCxDQUFRVCxXQUFSLENBQW9Cb0MsRUFBcEI7QUFDQUEsVUFBQUEsRUFBRSxDQUFDdkMsWUFBSCxDQUFnQixZQUFoQixFQUE4QjNCLEtBQTlCO0FBQ0FrRSxVQUFBQSxFQUFFLENBQUN2QyxZQUFILENBQWdCLFdBQWhCLEVBQTZCNEIsSUFBN0I7QUFDQVcsVUFBQUEsRUFBRSxDQUFDdkMsWUFBSCxDQUFnQixhQUFoQixFQUErQmlELEtBQS9COztBQUNBLGNBQUliLE9BQU8sQ0FBQ3JJLE1BQVIsSUFBa0IsQ0FBdEIsRUFBeUI7QUFDckJxSSxZQUFBQSxPQUFPLENBQUM3SCxPQUFSLENBQWdCLFVBQVVILENBQVYsRUFBYTtBQUN6Qm1JLGNBQUFBLEVBQUUsQ0FBQzdELFNBQUgsQ0FBYXFCLEdBQWIsQ0FBaUIzRixDQUFqQjtBQUNILGFBRkQ7QUFHSDs7QUFDRCxjQUFJb0ksVUFBSixFQUFnQjtBQUNackIsWUFBQUEsU0FBUztBQUNURixZQUFBQSxhQUFhLElBQUlDLEdBQUcsR0FBR1UsSUFBdkI7QUFDQVYsWUFBQUEsR0FBRyxHQUFHdEcsSUFBSSxDQUFDc0MsV0FBTCxDQUFpQlEsb0JBQXZCO0FBQ0E2RSxZQUFBQSxFQUFFLENBQUM3RCxTQUFILENBQWFxQixHQUFiLENBQWlCLFFBQWpCOztBQUNBLGdCQUFJLENBQUNuRixJQUFJLENBQUNTLFVBQVYsRUFBc0I7QUFDbEJULGNBQUFBLElBQUksQ0FBQ1EsS0FBTCxDQUFXeUcsV0FBWCxHQUF5QkQsSUFBekI7O0FBQ0Esa0JBQUlRLE9BQU8sQ0FBQ3JJLE1BQVIsSUFBa0IsQ0FBdEIsRUFBeUI7QUFDckJxSSxnQkFBQUEsT0FBTyxDQUFDN0gsT0FBUixDQUFnQixVQUFVSCxDQUFWLEVBQWE7QUFDekJRLGtCQUFBQSxJQUFJLENBQUNRLEtBQUwsQ0FBV3NELFNBQVgsQ0FBcUJxQixHQUFyQixDQUF5QjNGLENBQXpCO0FBQ0gsaUJBRkQ7QUFHSDtBQUNKO0FBQ0o7O0FBQ0RtSSxVQUFBQSxFQUFFLENBQUNwQyxXQUFILENBQWVwRixRQUFRLENBQUMwSCxjQUFULENBQXdCYixJQUF4QixDQUFmO0FBQ0gsU0FyQ0Q7QUFzQ0gsT0E1REQ7QUE2REg7O0FBQ0RoSCxJQUFBQSxJQUFJLENBQUNtQixZQUFMLEdBQW9CLEtBQUtILElBQUwsQ0FBVStGLGdCQUFWLENBQTJCLHlCQUEzQixDQUFwQjtBQUNILEdBbkVELE1BbUVPO0FBQ0gvRyxJQUFBQSxJQUFJLENBQUNELE9BQUwsR0FBZUMsSUFBSSxDQUFDRSxJQUFMLENBQVU2RyxnQkFBVixDQUEyQixRQUEzQixDQUFmO0FBQ0FyRCxJQUFBQSxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQjdELElBQUksQ0FBQ0QsT0FBaEMsRUFBeUNKLE9BQXpDLENBQWlELFVBQVVILENBQVYsRUFBYTtBQUMxRCxVQUFJd0gsSUFBSSxHQUFHeEgsQ0FBQyxDQUFDeUgsV0FBYjtBQUNBLFVBQUl4RCxLQUFLLEdBQUdqRSxDQUFDLENBQUNpRSxLQUFkOztBQUNBLFVBQUlBLEtBQUssSUFBSSxLQUFiLEVBQW9CO0FBQ2hCLFlBQUl5RCxhQUFKOztBQUNBLFlBQUkxSCxDQUFDLENBQUMySCxhQUFGLEVBQUosRUFBdUI7QUFDbkJELFVBQUFBLGFBQWEsR0FBR3hELEtBQUssQ0FBQ0MsU0FBTixDQUFnQkMsS0FBaEIsQ0FBc0JDLElBQXRCLENBQTJCckUsQ0FBQyxDQUFDNEgsVUFBN0IsRUFDWDdILE1BRFcsQ0FDSixVQUFVOEgsQ0FBVixFQUFhO0FBQ2pCLG1CQUFPckgsSUFBSSxDQUFDb0Msa0JBQUwsQ0FBd0JrRixPQUF4QixDQUFnQ0QsQ0FBQyxDQUFDRSxJQUFsQyxNQUE0QyxDQUFDLENBQXBEO0FBQ0gsV0FIVyxDQUFoQjtBQUlIOztBQUNELFlBQUlDLE9BQU8sR0FBR2hJLENBQUMsQ0FBQ3FCLFlBQUYsQ0FBZSxPQUFmLENBQWQ7O0FBQ0EsWUFBSTJHLE9BQUosRUFBYTtBQUNUQSxVQUFBQSxPQUFPLEdBQUdBLE9BQU8sQ0FDWkMsS0FESyxDQUNDLEdBREQsRUFFTGxJLE1BRkssQ0FFRSxVQUFVbUksQ0FBVixFQUFhO0FBQ2pCLG1CQUFPMUgsSUFBSSxDQUFDcUMsZUFBTCxDQUFxQmlGLE9BQXJCLENBQTZCSSxDQUE3QixNQUFvQyxDQUFDLENBQTVDO0FBQ0gsV0FKSyxDQUFWO0FBS0gsU0FORCxNQU1PO0FBQ0hGLFVBQUFBLE9BQU8sR0FBRyxFQUFWO0FBQ0g7O0FBQ0QsWUFBSUcsRUFBRSxHQUFHeEgsUUFBUSxDQUFDNEUsYUFBVCxDQUF1QixJQUF2QixDQUFUO0FBQ0EsWUFBSTZDLFVBQVUsR0FBR3BJLENBQUMsQ0FBQ2tCLFlBQUYsQ0FBZSxVQUFmLENBQWpCO0FBRUEsWUFBSVUsVUFBVSxHQUFHNUIsQ0FBQyxDQUFDb04sUUFBbkI7QUFFQTVNLFFBQUFBLElBQUksQ0FBQ2dHLEVBQUwsQ0FBUVQsV0FBUixDQUFvQm9DLEVBQXBCO0FBQ0FBLFFBQUFBLEVBQUUsQ0FBQ3ZDLFlBQUgsQ0FBZ0IsWUFBaEIsRUFBOEIzQixLQUE5QjtBQUNBa0UsUUFBQUEsRUFBRSxDQUFDdkMsWUFBSCxDQUFnQixXQUFoQixFQUE2QjRCLElBQTdCOztBQUVBLFlBQUlFLGFBQWEsS0FBS2hFLFNBQXRCLEVBQWlDO0FBQzdCZ0UsVUFBQUEsYUFBYSxDQUFDdkgsT0FBZCxDQUFzQixVQUFVMEgsQ0FBVixFQUFhO0FBQy9CTSxZQUFBQSxFQUFFLENBQUN2QyxZQUFILENBQWdCaUMsQ0FBQyxDQUFDRSxJQUFsQixFQUF3QkYsQ0FBQyxDQUFDNUQsS0FBMUI7QUFDSCxXQUZEO0FBR0g7O0FBRUQrRCxRQUFBQSxPQUFPLENBQUM3SCxPQUFSLENBQWdCLFVBQVVILENBQVYsRUFBYTtBQUN6Qm1JLFVBQUFBLEVBQUUsQ0FBQzdELFNBQUgsQ0FBYXFCLEdBQWIsQ0FBaUIzRixDQUFqQjtBQUNILFNBRkQ7O0FBSUEsWUFBSVEsSUFBSSxDQUFDNEIsY0FBTCxHQUFzQkMsUUFBMUIsRUFBb0M7QUFDaEM4RixVQUFBQSxFQUFFLENBQUM3RCxTQUFILENBQWFxQixHQUFiLENBQWlCLE9BQWpCO0FBQ0F3QyxVQUFBQSxFQUFFLENBQUNwRSxLQUFILENBQVNoQixRQUFULEdBQW9CdkMsSUFBSSxDQUFDNEIsY0FBTCxHQUFzQixJQUExQztBQUNIOztBQUVELFlBQUlnRyxVQUFKLEVBQWdCO0FBQ1pyQixVQUFBQSxTQUFTO0FBQ1RGLFVBQUFBLGFBQWEsSUFBSUMsR0FBRyxHQUFHVSxJQUF2QjtBQUNBVixVQUFBQSxHQUFHLEdBQUd0RyxJQUFJLENBQUNzQyxXQUFMLENBQWlCUSxvQkFBdkI7QUFDQTZFLFVBQUFBLEVBQUUsQ0FBQzdELFNBQUgsQ0FBYXFCLEdBQWIsQ0FBaUIsUUFBakI7O0FBQ0EsY0FBSSxDQUFDbkYsSUFBSSxDQUFDUyxVQUFWLEVBQXNCO0FBQ2xCVCxZQUFBQSxJQUFJLENBQUNRLEtBQUwsQ0FBV3lHLFdBQVgsR0FBeUJELElBQXpCOztBQUNBLGdCQUFJUSxPQUFPLENBQUNySSxNQUFSLElBQWtCLENBQXRCLEVBQXlCO0FBQ3JCcUksY0FBQUEsT0FBTyxDQUFDN0gsT0FBUixDQUFnQixVQUFVSCxDQUFWLEVBQWE7QUFDekJRLGdCQUFBQSxJQUFJLENBQUNRLEtBQUwsQ0FBV3NELFNBQVgsQ0FBcUJxQixHQUFyQixDQUF5QjNGLENBQXpCO0FBQ0gsZUFGRDtBQUdIO0FBQ0o7QUFDSjs7QUFDRCxZQUFJNEIsVUFBSixFQUFnQjtBQUNadUcsVUFBQUEsRUFBRSxDQUFDN0QsU0FBSCxDQUFhcUIsR0FBYixDQUFpQixVQUFqQjtBQUNIOztBQUNEd0MsUUFBQUEsRUFBRSxDQUFDcEMsV0FBSCxDQUFlcEYsUUFBUSxDQUFDMEgsY0FBVCxDQUF3QixNQUFNYixJQUE5QixDQUFmO0FBQ0g7QUFDSixLQWhFRDtBQWlFSDtBQUVKLENBeEpEOztBQTBKQW5ILGdCQUFnQixDQUFDOEQsU0FBakIsQ0FBMkJrSixZQUEzQixHQUEwQyxVQUFVQyxNQUFWLEVBQWtCO0FBQ3hELE1BQUk5TSxJQUFJLEdBQUcsSUFBWDtBQUNBLE1BQUkrTSxXQUFXLEdBQUcsRUFBbEI7O0FBQ0EsTUFBSUMscUJBQXFCLENBQUNGLE1BQUQsQ0FBckIsSUFBaUMsUUFBckMsRUFBK0M7QUFDM0NBLElBQUFBLE1BQU0sR0FBR0EsTUFBTSxDQUFDckYsS0FBUCxDQUFhLEdBQWIsQ0FBVDtBQUNIOztBQUVELE1BQUl1RixxQkFBcUIsQ0FBQ0YsTUFBRCxDQUFyQixJQUFpQyxPQUFyQyxFQUE4QztBQUMxQ3BKLElBQUFBLEtBQUssQ0FBQ0MsU0FBTixDQUFnQkMsS0FBaEIsQ0FBc0JDLElBQXRCLENBQTJCN0QsSUFBSSxDQUFDRCxPQUFoQyxFQUF5Q0osT0FBekMsQ0FBaUQsVUFBVUgsQ0FBVixFQUFhO0FBQzFELFVBQUlzTixNQUFNLENBQUN4RixPQUFQLENBQWU5SCxDQUFDLENBQUNpRSxLQUFqQixLQUEyQixDQUFDLENBQWhDLEVBQW1DO0FBQy9Cc0osUUFBQUEsV0FBVyxDQUFDL04sSUFBWixDQUFpQlEsQ0FBQyxDQUFDaUUsS0FBbkI7QUFDQWpFLFFBQUFBLENBQUMsQ0FBQzRGLFlBQUYsQ0FBZSxVQUFmLEVBQTJCLEVBQTNCO0FBQ0g7QUFDSixLQUxEO0FBTUg7O0FBQ0QxQixFQUFBQSxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQjdELElBQUksQ0FBQ21CLFlBQWhDLEVBQThDeEIsT0FBOUMsQ0FBc0QsVUFBVUgsQ0FBVixFQUFhO0FBQy9ELFFBQUl5TixHQUFHLEdBQUd6TixDQUFDLENBQUNxQixZQUFGLENBQWUsWUFBZixDQUFWOztBQUNBLFFBQUlrTSxXQUFXLENBQUN6RixPQUFaLENBQW9CMkYsR0FBcEIsS0FBNEIsQ0FBQyxDQUFqQyxFQUFvQztBQUNoQ3pOLE1BQUFBLENBQUMsQ0FBQ3NFLFNBQUYsQ0FBWXFCLEdBQVosQ0FBZ0IsVUFBaEI7QUFDSDtBQUNKLEdBTEQ7QUFNSCxDQXJCRDs7QUF1QkF0RixnQkFBZ0IsQ0FBQzhELFNBQWpCLENBQTJCdUosV0FBM0IsR0FBeUMsVUFBVUosTUFBVixFQUFrQjtBQUN2RCxNQUFJOU0sSUFBSSxHQUFHLElBQVg7QUFDQSxNQUFJK00sV0FBVyxHQUFHLEVBQWxCOztBQUNBLE1BQUlDLHFCQUFxQixDQUFDRixNQUFELENBQXJCLElBQWlDLFFBQXJDLEVBQStDO0FBQzNDQSxJQUFBQSxNQUFNLEdBQUdBLE1BQU0sQ0FBQ3JGLEtBQVAsQ0FBYSxHQUFiLENBQVQ7QUFDSDs7QUFFRCxNQUFJdUYscUJBQXFCLENBQUNGLE1BQUQsQ0FBckIsSUFBaUMsT0FBckMsRUFBOEM7QUFDMUNwSixJQUFBQSxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQjdELElBQUksQ0FBQ0QsT0FBaEMsRUFBeUNKLE9BQXpDLENBQWlELFVBQVVILENBQVYsRUFBYTtBQUMxRCxVQUFJc04sTUFBTSxDQUFDeEYsT0FBUCxDQUFlOUgsQ0FBQyxDQUFDaUUsS0FBakIsS0FBMkIsQ0FBQyxDQUFoQyxFQUFtQztBQUMvQnNKLFFBQUFBLFdBQVcsQ0FBQy9OLElBQVosQ0FBaUJRLENBQUMsQ0FBQ2lFLEtBQW5CO0FBQ0FqRSxRQUFBQSxDQUFDLENBQUMyTixlQUFGLENBQWtCLFVBQWxCO0FBQ0g7QUFDSixLQUxEO0FBTUg7O0FBRUR6SixFQUFBQSxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQjdELElBQUksQ0FBQ21CLFlBQWhDLEVBQThDeEIsT0FBOUMsQ0FBc0QsVUFBVUgsQ0FBVixFQUFhO0FBQy9ELFFBQUl1TixXQUFXLENBQUN6RixPQUFaLENBQW9COUgsQ0FBQyxDQUFDcUIsWUFBRixDQUFlLFlBQWYsQ0FBcEIsS0FBcUQsQ0FBQyxDQUExRCxFQUE2RDtBQUN6RHJCLE1BQUFBLENBQUMsQ0FBQ3NFLFNBQUYsQ0FBWTFFLE1BQVosQ0FBbUIsVUFBbkI7QUFDSDtBQUNKLEdBSkQ7QUFLSCxDQXJCRDs7QUF1QkFTLGdCQUFnQixDQUFDOEQsU0FBakIsQ0FBMkJxSCxjQUEzQixHQUE0QyxVQUFVekUsU0FBVixFQUFxQjtBQUM3RCxNQUFJdkcsSUFBSSxHQUFHLElBQVg7QUFDQSxNQUFJQSxJQUFJLENBQUM4QixTQUFMLElBQWtCRCxRQUFsQixJQUE4QixDQUFDN0IsSUFBSSxDQUFDUyxVQUF4QyxFQUFvRDs7QUFDcEQsTUFBSVQsSUFBSSxDQUFDOEIsU0FBTCxJQUFrQnlFLFNBQXRCLEVBQWlDO0FBQzdCN0MsSUFBQUEsS0FBSyxDQUFDQyxTQUFOLENBQWdCQyxLQUFoQixDQUFzQkMsSUFBdEIsQ0FBMkI3RCxJQUFJLENBQUNtQixZQUFoQyxFQUE4Q3hCLE9BQTlDLENBQXNELFVBQVVILENBQVYsRUFBYTtBQUMvRCxVQUFJQSxDQUFDLENBQUNrQixZQUFGLENBQWUsWUFBZixDQUFKLEVBQWtDO0FBQzlCLFlBQUksQ0FBQ2xCLENBQUMsQ0FBQ3NFLFNBQUYsQ0FBWXdGLFFBQVosQ0FBcUIsVUFBckIsQ0FBRCxJQUFxQyxDQUFDOUosQ0FBQyxDQUFDc0UsU0FBRixDQUFZd0YsUUFBWixDQUFxQixRQUFyQixDQUExQyxFQUEwRTtBQUN0RTlKLFVBQUFBLENBQUMsQ0FBQ3NFLFNBQUYsQ0FBWXFCLEdBQVosQ0FBZ0IsVUFBaEI7QUFDSDtBQUNKO0FBQ0osS0FORDtBQU9ILEdBUkQsTUFRTztBQUNIekIsSUFBQUEsS0FBSyxDQUFDQyxTQUFOLENBQWdCQyxLQUFoQixDQUFzQkMsSUFBdEIsQ0FBMkI3RCxJQUFJLENBQUNtQixZQUFoQyxFQUE4Q3hCLE9BQTlDLENBQXNELFVBQVVILENBQVYsRUFBYTtBQUMvRCxVQUFJQSxDQUFDLENBQUNzRSxTQUFGLENBQVl3RixRQUFaLENBQXFCLFVBQXJCLENBQUosRUFBc0M7QUFDbEM5SixRQUFBQSxDQUFDLENBQUNzRSxTQUFGLENBQVkxRSxNQUFaLENBQW1CLFVBQW5CO0FBQ0g7QUFDSixLQUpEO0FBS0g7QUFDSixDQWxCRDs7QUFvQkFTLGdCQUFnQixDQUFDOEQsU0FBakIsQ0FBMkJpSCxxQkFBM0IsR0FBbUQsVUFBVVosU0FBVixFQUFxQjtBQUNwRSxNQUFJaEssSUFBSSxHQUFHLElBQVg7QUFDQSxNQUFJNkwsUUFBUSxHQUFHN0IsU0FBUyxDQUFDbkosWUFBVixDQUF1QixhQUF2QixDQUFmO0FBQ0EsTUFBSXVNLFFBQVEsR0FBR2pOLFFBQVEsQ0FBQzJFLGNBQVQsQ0FBd0IrRyxRQUF4QixDQUFmO0FBQ0EsTUFBSSxDQUFDN0wsSUFBSSxDQUFDUyxVQUFWLEVBQXNCO0FBQ3RCLE1BQUlVLFlBQVksR0FBR25CLElBQUksQ0FBQ2dCLElBQUwsQ0FBVStGLGdCQUFWLENBQTJCLElBQTNCLENBQW5CO0FBQ0EsTUFBSXNHLGdCQUFnQixHQUFHM0osS0FBSyxDQUFDQyxTQUFOLENBQWdCQyxLQUFoQixDQUFzQkMsSUFBdEIsQ0FBMkIxQyxZQUEzQixFQUF5QzVCLE1BQXpDLENBQWdELFVBQVUrTixFQUFWLEVBQWM7QUFDakYsV0FBT0EsRUFBRSxDQUFDNU0sWUFBSCxDQUFnQixhQUFoQixLQUFrQzRNLEVBQUUsQ0FBQ3pNLFlBQUgsQ0FBZ0IsYUFBaEIsS0FBa0NnTCxRQUFwRSxJQUFpRixDQUFDeUIsRUFBRSxDQUFDeEosU0FBSCxDQUFhd0YsUUFBYixDQUFzQixlQUF0QixDQUF6RjtBQUNILEdBRnNCLENBQXZCO0FBR0EsTUFBSUYsU0FBUyxHQUFHLENBQWhCO0FBQ0EsTUFBSW1FLFdBQVcsR0FBR0YsZ0JBQWdCLENBQUNsTyxNQUFuQztBQUNBLE1BQUlvTyxXQUFXLElBQUksQ0FBbkIsRUFBc0I7QUFDdEJGLEVBQUFBLGdCQUFnQixDQUFDMU4sT0FBakIsQ0FBeUIsVUFBVTJOLEVBQVYsRUFBYztBQUNuQyxRQUFJQSxFQUFFLENBQUN4SixTQUFILENBQWF3RixRQUFiLENBQXNCLFFBQXRCLENBQUosRUFBcUNGLFNBQVM7QUFDakQsR0FGRDs7QUFHQSxNQUFJQSxTQUFTLEtBQUttRSxXQUFkLElBQTZCbkUsU0FBUyxLQUFLLENBQS9DLEVBQWtEO0FBQzlDLFFBQUlBLFNBQVMsS0FBSyxDQUFsQixFQUFxQjtBQUNqQmdFLE1BQUFBLFFBQVEsQ0FBQ3RKLFNBQVQsQ0FBbUIxRSxNQUFuQixDQUEwQixTQUExQjtBQUNILEtBRkQsTUFFTztBQUNIZ08sTUFBQUEsUUFBUSxDQUFDdEosU0FBVCxDQUFtQnFCLEdBQW5CLENBQXVCLFNBQXZCO0FBQ0g7QUFDSixHQU5ELE1BTU87QUFDSGlJLElBQUFBLFFBQVEsQ0FBQ3RKLFNBQVQsQ0FBbUIxRSxNQUFuQixDQUEwQixTQUExQjtBQUNIO0FBQ0osQ0F4QkQ7O0FBMEJBUyxnQkFBZ0IsQ0FBQzhELFNBQWpCLENBQTJCeUcsc0JBQTNCLEdBQW9ELFVBQVVKLFNBQVYsRUFBcUI7QUFDckUsTUFBSWhLLElBQUksR0FBRyxJQUFYO0FBQ0EsTUFBSTZMLFFBQVEsR0FBRzdCLFNBQVMsQ0FBQzFCLEVBQXpCO0FBQ0EsTUFBSSxDQUFDdEksSUFBSSxDQUFDUyxVQUFWLEVBQXNCO0FBQ3RCLE1BQUlVLFlBQVksR0FBR25CLElBQUksQ0FBQ2dCLElBQUwsQ0FBVStGLGdCQUFWLENBQTJCLElBQTNCLENBQW5CO0FBQ0EsTUFBSXNHLGdCQUFnQixHQUFHM0osS0FBSyxDQUFDQyxTQUFOLENBQWdCQyxLQUFoQixDQUFzQkMsSUFBdEIsQ0FBMkIxQyxZQUEzQixFQUF5QzVCLE1BQXpDLENBQWdELFVBQVUrTixFQUFWLEVBQWM7QUFDakYsV0FBT0EsRUFBRSxDQUFDNU0sWUFBSCxDQUFnQixhQUFoQixLQUFrQzRNLEVBQUUsQ0FBQ3pNLFlBQUgsQ0FBZ0IsYUFBaEIsS0FBa0NnTCxRQUFwRSxJQUFnRixDQUFDeUIsRUFBRSxDQUFDeEosU0FBSCxDQUFhd0YsUUFBYixDQUFzQixlQUF0QixDQUF4RjtBQUNILEdBRnNCLENBQXZCO0FBR0EsTUFBSUYsU0FBUyxHQUFHLENBQWhCO0FBQ0EsTUFBSW1FLFdBQVcsR0FBR0YsZ0JBQWdCLENBQUNsTyxNQUFuQztBQUNBLE1BQUlvTyxXQUFXLElBQUksQ0FBbkIsRUFBc0I7QUFDdEJGLEVBQUFBLGdCQUFnQixDQUFDMU4sT0FBakIsQ0FBeUIsVUFBVTJOLEVBQVYsRUFBYztBQUNuQyxRQUFJQSxFQUFFLENBQUN4SixTQUFILENBQWF3RixRQUFiLENBQXNCLFFBQXRCLENBQUosRUFBcUNGLFNBQVM7QUFDakQsR0FGRDs7QUFHQSxNQUFJQSxTQUFTLEtBQUttRSxXQUFkLElBQTZCbkUsU0FBUyxLQUFLLENBQS9DLEVBQWtEO0FBQzlDO0FBQ0FpRSxJQUFBQSxnQkFBZ0IsQ0FBQzFOLE9BQWpCLENBQXlCLFVBQVUyTixFQUFWLEVBQWM7QUFDbkMsVUFBSUUsS0FBSyxHQUFHck4sUUFBUSxDQUFDc04sV0FBVCxDQUFxQixZQUFyQixDQUFaO0FBQ0FELE1BQUFBLEtBQUssQ0FBQ0UsU0FBTixDQUFnQixPQUFoQixFQUF5QixJQUF6QixFQUErQixLQUEvQjtBQUNBSixNQUFBQSxFQUFFLENBQUNLLGFBQUgsQ0FBaUJILEtBQWpCO0FBQ0gsS0FKRDs7QUFLQSxRQUFJcEUsU0FBUyxLQUFLLENBQWxCLEVBQXFCO0FBQ2pCWSxNQUFBQSxTQUFTLENBQUNsRyxTQUFWLENBQW9CcUIsR0FBcEIsQ0FBd0IsU0FBeEI7QUFDSCxLQUZELE1BRU87QUFDSDZFLE1BQUFBLFNBQVMsQ0FBQ2xHLFNBQVYsQ0FBb0IxRSxNQUFwQixDQUEyQixTQUEzQjtBQUNIO0FBQ0osR0FaRCxNQVlPO0FBQ0g7QUFDQTRLLElBQUFBLFNBQVMsQ0FBQ2xHLFNBQVYsQ0FBb0IxRSxNQUFwQixDQUEyQixTQUEzQjtBQUNBaU8sSUFBQUEsZ0JBQWdCLENBQUMxTixPQUFqQixDQUF5QixVQUFVMk4sRUFBVixFQUFjO0FBQ25DLFVBQUksQ0FBQ0EsRUFBRSxDQUFDeEosU0FBSCxDQUFhd0YsUUFBYixDQUFzQixRQUF0QixDQUFMLEVBQXNDO0FBQ2xDLFlBQUlrRSxLQUFLLEdBQUdyTixRQUFRLENBQUNzTixXQUFULENBQXFCLFlBQXJCLENBQVo7QUFDQUQsUUFBQUEsS0FBSyxDQUFDRSxTQUFOLENBQWdCLE9BQWhCLEVBQXlCLElBQXpCLEVBQStCLEtBQS9CO0FBQ0FKLFFBQUFBLEVBQUUsQ0FBQ0ssYUFBSCxDQUFpQkgsS0FBakI7QUFDSDtBQUNKLEtBTkQ7QUFPSDtBQUNKLENBckNEOztBQXVDQTNOLGdCQUFnQixDQUFDOEQsU0FBakIsQ0FBMkJzSCxlQUEzQixHQUE2QyxZQUFZO0FBQ3JELE1BQUlqTCxJQUFJLEdBQUcsSUFBWDtBQUNBLE1BQUksQ0FBQ0EsSUFBSSxDQUFDUyxVQUFWLEVBQXNCO0FBQ3RCLE1BQUkySSxTQUFTLEdBQUcsQ0FBaEI7QUFDQSxNQUFJbUUsV0FBVyxHQUFHLENBQWxCO0FBQ0EsTUFBSUssZUFBZSxHQUFHLElBQXRCO0FBQ0EsTUFBSTVOLElBQUksQ0FBQ21CLFlBQUwsSUFBcUIsSUFBekIsRUFBK0I7QUFDL0J1QyxFQUFBQSxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQjdELElBQUksQ0FBQ21CLFlBQWhDLEVBQThDeEIsT0FBOUMsQ0FBc0QsVUFBVUgsQ0FBVixFQUFhO0FBQy9ELFFBQUlBLENBQUMsQ0FBQ2tCLFlBQUYsQ0FBZSxZQUFmLENBQUosRUFBa0M7QUFDOUIsVUFBSWxCLENBQUMsQ0FBQ3FCLFlBQUYsQ0FBZSxZQUFmLE1BQWlDLEtBQXJDLEVBQTRDO0FBQ3hDK00sUUFBQUEsZUFBZSxHQUFHcE8sQ0FBbEI7QUFDSDs7QUFDRCxVQUFJQSxDQUFDLENBQUNxQixZQUFGLENBQWUsWUFBZixNQUFpQyxLQUFqQyxJQUNHLENBQUNyQixDQUFDLENBQUNzRSxTQUFGLENBQVl3RixRQUFaLENBQXFCLGVBQXJCLENBREosSUFFRyxDQUFDOUosQ0FBQyxDQUFDc0UsU0FBRixDQUFZd0YsUUFBWixDQUFxQixVQUFyQixDQUZSLEVBRTBDO0FBQ3RDaUUsUUFBQUEsV0FBVztBQUNYbkUsUUFBQUEsU0FBUyxJQUFJNUosQ0FBQyxDQUFDc0UsU0FBRixDQUFZd0YsUUFBWixDQUFxQixRQUFyQixDQUFiO0FBQ0g7QUFDSjtBQUNKLEdBWkQ7O0FBY0EsTUFBSXNFLGVBQUosRUFBcUI7QUFDakIsUUFBSXhFLFNBQVMsS0FBS21FLFdBQWxCLEVBQStCO0FBQzNCO0FBQ0F2TixNQUFBQSxJQUFJLENBQUNRLEtBQUwsQ0FBV3lHLFdBQVgsR0FBeUJqSCxJQUFJLENBQUNzQyxXQUFMLENBQWlCSSxZQUFqQixDQUE4QmlHLEdBQXZEO0FBQ0FpRixNQUFBQSxlQUFlLENBQUM5SixTQUFoQixDQUEwQnFCLEdBQTFCLENBQThCLFFBQTlCO0FBQ0F5SSxNQUFBQSxlQUFlLENBQUMxSCxTQUFoQixHQUE0QmxHLElBQUksQ0FBQ3NDLFdBQUwsQ0FBaUJJLFlBQWpCLENBQThCNkcsUUFBMUQ7QUFDQXFFLE1BQUFBLGVBQWUsQ0FBQ3hJLFlBQWhCLENBQTZCLGVBQTdCLEVBQThDLE1BQTlDO0FBQ0gsS0FORCxNQU1PLElBQUlnRSxTQUFTLEtBQUssQ0FBbEIsRUFBcUI7QUFDeEI7QUFDQXBKLE1BQUFBLElBQUksQ0FBQ1EsS0FBTCxDQUFXeUcsV0FBWCxHQUF5QmpILElBQUksQ0FBQ3NDLFdBQUwsQ0FBaUJLLFdBQTFDO0FBQ0FpTCxNQUFBQSxlQUFlLENBQUM5SixTQUFoQixDQUEwQjFFLE1BQTFCLENBQWlDLFFBQWpDO0FBQ0F3TyxNQUFBQSxlQUFlLENBQUMxSCxTQUFoQixHQUE0QmxHLElBQUksQ0FBQ3NDLFdBQUwsQ0FBaUJJLFlBQWpCLENBQThCdUQsU0FBMUQ7QUFDQTJILE1BQUFBLGVBQWUsQ0FBQ3hJLFlBQWhCLENBQTZCLGVBQTdCLEVBQThDLE9BQTlDO0FBQ0g7QUFDSjtBQUNKLENBcENEOztBQXNDQXZGLGdCQUFnQixDQUFDOEQsU0FBakIsQ0FBMkI4RyxRQUEzQixHQUFzQyxVQUFVcUMsTUFBVixFQUFrQjtBQUNwRCxNQUFJOU0sSUFBSSxHQUFHLElBQVg7QUFDQSxNQUFJbUIsWUFBWSxHQUFHbkIsSUFBSSxDQUFDZ0IsSUFBTCxDQUFVK0YsZ0JBQVYsQ0FBMkIsSUFBM0IsQ0FBbkI7O0FBRUEsTUFBSStGLE1BQU0sSUFBSSxJQUFWLElBQWtCQSxNQUFNLElBQUk1SixTQUE1QixJQUF5QzRKLE1BQU0sSUFBSSxFQUF2RCxFQUEyRDtBQUN2RDlNLElBQUFBLElBQUksQ0FBQ3VNLEtBQUw7QUFDSCxHQUZELE1BRU87QUFDSCxRQUFJdk0sSUFBSSxDQUFDUyxVQUFULEVBQXFCO0FBQ2pCLFVBQUl1TSxxQkFBcUIsQ0FBQ0YsTUFBRCxDQUFyQixJQUFpQyxRQUFyQyxFQUErQztBQUMzQyxZQUFJQSxNQUFNLEtBQUssS0FBZixFQUFzQjtBQUNsQkEsVUFBQUEsTUFBTSxHQUFHLEVBQVQ7QUFDQXBKLFVBQUFBLEtBQUssQ0FBQ0MsU0FBTixDQUFnQkMsS0FBaEIsQ0FBc0JDLElBQXRCLENBQTJCMUMsWUFBM0IsRUFBeUN4QixPQUF6QyxDQUFpRCxVQUFVSCxDQUFWLEVBQWE7QUFDMUQsZ0JBQUlBLENBQUMsQ0FBQ2tCLFlBQUYsQ0FBZSxZQUFmLENBQUosRUFBa0M7QUFDOUIsa0JBQUkrQyxLQUFLLEdBQUdqRSxDQUFDLENBQUNxQixZQUFGLENBQWUsWUFBZixDQUFaOztBQUNBLGtCQUFJNEMsS0FBSyxLQUFLLEtBQWQsRUFBcUI7QUFDakIsb0JBQUksQ0FBQ2pFLENBQUMsQ0FBQ3NFLFNBQUYsQ0FBWXdGLFFBQVosQ0FBcUIsZUFBckIsQ0FBRCxJQUEwQyxDQUFDOUosQ0FBQyxDQUFDc0UsU0FBRixDQUFZd0YsUUFBWixDQUFxQixVQUFyQixDQUEvQyxFQUFpRjtBQUM3RXdELGtCQUFBQSxNQUFNLENBQUM5TixJQUFQLENBQVlRLENBQUMsQ0FBQ3FCLFlBQUYsQ0FBZSxZQUFmLENBQVo7QUFDSCxpQkFIZ0IsQ0FJakI7OztBQUNBLG9CQUFJckIsQ0FBQyxDQUFDc0UsU0FBRixDQUFZd0YsUUFBWixDQUFxQixRQUFyQixDQUFKLEVBQW9DO0FBQ2hDLHNCQUFJOUosQ0FBQyxDQUFDc0UsU0FBRixDQUFZd0YsUUFBWixDQUFxQixlQUFyQixLQUF5QzlKLENBQUMsQ0FBQ3NFLFNBQUYsQ0FBWXdGLFFBQVosQ0FBcUIsVUFBckIsQ0FBN0MsRUFBK0U7QUFDM0V3RCxvQkFBQUEsTUFBTSxDQUFDOU4sSUFBUCxDQUFZeUUsS0FBWjtBQUNIO0FBQ0o7QUFDSixlQVZELE1BVUs7QUFDRGpFLGdCQUFBQSxDQUFDLENBQUNzRSxTQUFGLENBQVlxQixHQUFaLENBQWdCLFFBQWhCO0FBQ0g7QUFDSixhQWZELE1BZU8sSUFBSTNGLENBQUMsQ0FBQ3NFLFNBQUYsQ0FBWXdGLFFBQVosQ0FBcUIsZ0JBQXJCLENBQUosRUFBNEM7QUFDL0M5SixjQUFBQSxDQUFDLENBQUNzRSxTQUFGLENBQVlxQixHQUFaLENBQWdCLFNBQWhCO0FBQ0g7QUFDSixXQW5CRDtBQW9CSCxTQXRCRCxNQXNCTyxJQUFJMkgsTUFBTSxLQUFLLE1BQWYsRUFBdUI7QUFDMUJBLFVBQUFBLE1BQU0sR0FBRyxFQUFUO0FBQ0FwSixVQUFBQSxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQjFDLFlBQTNCLEVBQXlDeEIsT0FBekMsQ0FBaUQsVUFBVUgsQ0FBVixFQUFhO0FBQzFELGdCQUFJQSxDQUFDLENBQUNrQixZQUFGLENBQWUsWUFBZixDQUFKLEVBQWtDO0FBQzlCLGtCQUFJK0MsS0FBSyxHQUFHakUsQ0FBQyxDQUFDcUIsWUFBRixDQUFlLFlBQWYsQ0FBWjs7QUFDQSxrQkFBSTRDLEtBQUssS0FBSyxLQUFkLEVBQXFCO0FBQ2pCLG9CQUFJakUsQ0FBQyxDQUFDc0UsU0FBRixDQUFZd0YsUUFBWixDQUFxQixRQUFyQixDQUFKLEVBQW9DO0FBQ2hDLHNCQUFJOUosQ0FBQyxDQUFDc0UsU0FBRixDQUFZd0YsUUFBWixDQUFxQixlQUFyQixLQUF5QzlKLENBQUMsQ0FBQ3NFLFNBQUYsQ0FBWXdGLFFBQVosQ0FBcUIsVUFBckIsQ0FBN0MsRUFBK0U7QUFDM0V3RCxvQkFBQUEsTUFBTSxDQUFDOU4sSUFBUCxDQUFZeUUsS0FBWjtBQUNIO0FBQ0o7QUFDSjtBQUNKLGFBVEQsTUFTTyxJQUFJakUsQ0FBQyxDQUFDc0UsU0FBRixDQUFZd0YsUUFBWixDQUFxQixnQkFBckIsQ0FBSixFQUE0QztBQUMvQzlKLGNBQUFBLENBQUMsQ0FBQ3NFLFNBQUYsQ0FBWTFFLE1BQVosQ0FBbUIsU0FBbkI7QUFDSDtBQUNKLFdBYkQ7QUFjSCxTQWhCTSxNQWdCQTtBQUNIME4sVUFBQUEsTUFBTSxHQUFHQSxNQUFNLENBQUNyRixLQUFQLENBQWEsR0FBYixDQUFUO0FBQ0g7QUFDSjs7QUFDRCxVQUFJc0YsV0FBVyxHQUFHLEVBQWxCOztBQUNBLFVBQUlDLHFCQUFxQixDQUFDRixNQUFELENBQXJCLElBQWlDLE9BQXJDLEVBQThDO0FBQzFDcEosUUFBQUEsS0FBSyxDQUFDQyxTQUFOLENBQWdCQyxLQUFoQixDQUFzQkMsSUFBdEIsQ0FBMkI3RCxJQUFJLENBQUNELE9BQWhDLEVBQXlDSixPQUF6QyxDQUFpRCxVQUFVSCxDQUFWLEVBQWE7QUFDMUQsY0FBSXNOLE1BQU0sQ0FBQ3hGLE9BQVAsQ0FBZTlILENBQUMsQ0FBQ2lFLEtBQWpCLE1BQTRCLENBQUMsQ0FBakMsRUFBb0M7QUFDaENqRSxZQUFBQSxDQUFDLENBQUN1TCxRQUFGLEdBQWEsSUFBYjtBQUNBZ0MsWUFBQUEsV0FBVyxDQUFDL04sSUFBWixDQUFpQlEsQ0FBQyxDQUFDaUUsS0FBbkI7QUFDSCxXQUhELE1BR087QUFDSGpFLFlBQUFBLENBQUMsQ0FBQ3VMLFFBQUYsR0FBYSxLQUFiO0FBQ0g7QUFDSixTQVBEO0FBUUEsWUFBSTFFLGFBQWEsR0FBRyxFQUFwQjtBQUNBLFlBQUlDLEdBQUcsR0FBRyxFQUFWO0FBQ0EsWUFBSUMsU0FBUyxHQUFHLENBQWhCO0FBQ0EsWUFBSXNFLEtBQUssR0FBRyxDQUFaO0FBQ0FuSCxRQUFBQSxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQjFDLFlBQTNCLEVBQXlDeEIsT0FBekMsQ0FBaUQsVUFBVUgsQ0FBVixFQUFhO0FBQzFELGNBQUlBLENBQUMsQ0FBQ2lFLEtBQUYsS0FBWSxLQUFoQixFQUF1QjtBQUNuQm9ILFlBQUFBLEtBQUs7QUFDUjs7QUFDRCxjQUFJa0MsV0FBVyxDQUFDekYsT0FBWixDQUFvQjlILENBQUMsQ0FBQ3FCLFlBQUYsQ0FBZSxZQUFmLENBQXBCLEtBQXFELENBQUMsQ0FBMUQsRUFBNkQ7QUFDekRyQixZQUFBQSxDQUFDLENBQUNzRSxTQUFGLENBQVlxQixHQUFaLENBQWdCLFFBQWhCO0FBQ0FvQixZQUFBQSxTQUFTO0FBQ1RGLFlBQUFBLGFBQWEsSUFBSUMsR0FBRyxHQUFHOUcsQ0FBQyxDQUFDcUIsWUFBRixDQUFlLFdBQWYsQ0FBdkI7QUFDQXlGLFlBQUFBLEdBQUcsR0FBR3RHLElBQUksQ0FBQ3NDLFdBQUwsQ0FBaUJRLG9CQUF2QjtBQUNILFdBTEQsTUFLTztBQUNIdEQsWUFBQUEsQ0FBQyxDQUFDc0UsU0FBRixDQUFZMUUsTUFBWixDQUFtQixRQUFuQjtBQUNIO0FBQ0osU0FaRDs7QUFhQSxZQUFJeUwsS0FBSyxJQUFJdEUsU0FBUyxHQUFHa0MsTUFBTSxDQUFDLENBQUN6SSxJQUFJLENBQUNzQyxXQUFMLENBQWlCTyxnQkFBbkIsQ0FBL0IsRUFBcUU7QUFDakUsY0FBSTZGLFVBQVUsR0FBRzFJLElBQUksQ0FBQ3NDLFdBQUwsQ0FBaUJJLFlBQWpCLENBQThCaUcsR0FBL0M7QUFDQXRDLFVBQUFBLGFBQWEsR0FBR3FDLFVBQWhCO0FBQ0gsU0FIRCxNQUdPLElBQUkxSSxJQUFJLENBQUNXLFlBQUwsSUFBcUIsQ0FBQyxDQUExQixFQUE2QjtBQUNoQyxjQUFJNEYsU0FBUyxHQUFHdkcsSUFBSSxDQUFDVyxZQUFyQixFQUFtQztBQUMvQixnQkFBSWlJLFlBQVksR0FBR3JDLFNBQVMsS0FBSyxDQUFkLEdBQWtCdkcsSUFBSSxDQUFDc0MsV0FBTCxDQUFpQkksWUFBakIsQ0FBOEJtRyxJQUFoRCxHQUF1RDdJLElBQUksQ0FBQ3NDLFdBQUwsQ0FBaUJJLFlBQWpCLENBQThCb0csS0FBeEc7QUFDQXpDLFlBQUFBLGFBQWEsR0FBR0UsU0FBUyxHQUFHLEdBQVosR0FBa0JxQyxZQUFsQztBQUNIO0FBQ0o7O0FBQ0Q1SSxRQUFBQSxJQUFJLENBQUNRLEtBQUwsQ0FBV3lHLFdBQVgsR0FBeUJaLGFBQXpCO0FBQ0FyRyxRQUFBQSxJQUFJLENBQUMwSyxpQkFBTDtBQUNIOztBQUNEMUssTUFBQUEsSUFBSSxDQUFDaUwsZUFBTDtBQUNILEtBcEZELE1Bb0ZPO0FBQ0gsVUFBSTRDLEtBQUssR0FBRyxLQUFaO0FBQ0EsVUFBSTdHLElBQUksR0FBRyxFQUFYO0FBQ0EsVUFBSThHLFVBQVUsR0FBRyxFQUFqQjtBQUNBcEssTUFBQUEsS0FBSyxDQUFDQyxTQUFOLENBQWdCQyxLQUFoQixDQUFzQkMsSUFBdEIsQ0FBMkIxQyxZQUEzQixFQUF5Q3hCLE9BQXpDLENBQWlELFVBQVVILENBQVYsRUFBYTtBQUMxRCxZQUFJdU8sS0FBSyxHQUFHdk8sQ0FBQyxDQUFDcUIsWUFBRixDQUFlLFlBQWYsS0FBZ0NpTSxNQUE1Qzs7QUFDQSxZQUFHaUIsS0FBSyxLQUFLLEtBQWIsRUFBbUI7QUFDZixjQUFJQSxLQUFLLElBQUlqQixNQUFiLEVBQXFCO0FBQ2pCdE4sWUFBQUEsQ0FBQyxDQUFDc0UsU0FBRixDQUFZcUIsR0FBWixDQUFnQixRQUFoQjtBQUNBMEksWUFBQUEsS0FBSyxHQUFHLElBQVI7QUFDQTdHLFlBQUFBLElBQUksR0FBR3hILENBQUMsQ0FBQ3FCLFlBQUYsQ0FBZSxXQUFmLENBQVA7QUFDSCxXQUpELE1BSU87QUFDSHJCLFlBQUFBLENBQUMsQ0FBQ3NFLFNBQUYsQ0FBWTFFLE1BQVosQ0FBbUIsUUFBbkI7QUFDSDtBQUNKO0FBQ0osT0FYRDtBQVlBc0UsTUFBQUEsS0FBSyxDQUFDQyxTQUFOLENBQWdCQyxLQUFoQixDQUFzQkMsSUFBdEIsQ0FBMkI3RCxJQUFJLENBQUNELE9BQWhDLEVBQXlDSixPQUF6QyxDQUFpRCxVQUFVSCxDQUFWLEVBQWE7QUFDMUQsWUFBSUEsQ0FBQyxDQUFDaUUsS0FBRixJQUFXcUosTUFBZixFQUF1QjtBQUNuQnROLFVBQUFBLENBQUMsQ0FBQ3VMLFFBQUYsR0FBYSxJQUFiO0FBQ0FQLFVBQUFBLFNBQVMsR0FBR2hMLENBQUMsQ0FBQ3FCLFlBQUYsQ0FBZSxPQUFmLENBQVo7QUFDQSxjQUFJLENBQUMySixTQUFMLEVBQWdCQSxTQUFTLEdBQUcsRUFBWjtBQUNuQixTQUpELE1BSU87QUFDSGhMLFVBQUFBLENBQUMsQ0FBQ3VMLFFBQUYsR0FBYSxLQUFiO0FBQ0g7QUFDSixPQVJEOztBQVNBLFVBQUk4QyxLQUFKLEVBQVc7QUFDUDdOLFFBQUFBLElBQUksQ0FBQ1EsS0FBTCxDQUFXeUcsV0FBWCxHQUF5QkQsSUFBekI7O0FBQ0EsWUFBSWhILElBQUksQ0FBQ3NDLFdBQUwsQ0FBaUJLLFdBQWpCLElBQWdDLEVBQWhDLElBQXNDM0MsSUFBSSxDQUFDUSxLQUFMLENBQVd5RyxXQUFYLElBQTBCLEVBQXBFLEVBQXdFO0FBQ3BFakgsVUFBQUEsSUFBSSxDQUFDUSxLQUFMLENBQVd5RyxXQUFYLEdBQXlCakgsSUFBSSxDQUFDc0MsV0FBTCxDQUFpQkssV0FBMUM7QUFDSDs7QUFDRCxZQUFJNkgsU0FBUyxJQUFJLEVBQWpCLEVBQXFCO0FBQ2pCeEssVUFBQUEsSUFBSSxDQUFDUSxLQUFMLENBQVc0RSxZQUFYLENBQXdCLE9BQXhCLEVBQWlDb0YsU0FBUyxHQUFHLFFBQTdDO0FBQ0gsU0FGRCxNQUVPO0FBQ0h4SyxVQUFBQSxJQUFJLENBQUNRLEtBQUwsQ0FBVzRFLFlBQVgsQ0FBd0IsT0FBeEIsRUFBaUMsT0FBakM7QUFDSDtBQUNKO0FBQ0o7QUFDSjtBQUNKLENBaklEOztBQW1JQXZGLGdCQUFnQixDQUFDOEQsU0FBakIsQ0FBMkIrRyxpQkFBM0IsR0FBK0MsWUFBWTtBQUN2RCxNQUFJOEMsS0FBSyxHQUFHck4sUUFBUSxDQUFDc04sV0FBVCxDQUFxQixZQUFyQixDQUFaO0FBQ0FELEVBQUFBLEtBQUssQ0FBQ0UsU0FBTixDQUFnQixRQUFoQixFQUEwQixJQUExQixFQUFnQyxLQUFoQztBQUNBLE9BQUt4TixJQUFMLENBQVV5TixhQUFWLENBQXdCSCxLQUF4QjtBQUNILENBSkQ7O0FBTUEzTixnQkFBZ0IsQ0FBQzhELFNBQWpCLENBQTJCNEksS0FBM0IsR0FBbUMsWUFBWTtBQUMzQzdJLEVBQUFBLEtBQUssQ0FBQ0MsU0FBTixDQUFnQkMsS0FBaEIsQ0FBc0JDLElBQXRCLENBQTJCLEtBQUsxQyxZQUFoQyxFQUE4Q3hCLE9BQTlDLENBQXNELFVBQVVILENBQVYsRUFBYTtBQUMvREEsSUFBQUEsQ0FBQyxDQUFDc0UsU0FBRixDQUFZMUUsTUFBWixDQUFtQixRQUFuQjtBQUNILEdBRkQ7QUFHQSxNQUFJNE8sY0FBYyxHQUFHLEtBQUtoTixJQUFMLENBQVUrRixnQkFBVixDQUEyQixtQkFBM0IsQ0FBckI7O0FBQ0EsTUFBR2lILGNBQUgsRUFBa0I7QUFDZHRLLElBQUFBLEtBQUssQ0FBQ0MsU0FBTixDQUFnQkMsS0FBaEIsQ0FBc0JDLElBQXRCLENBQTJCbUssY0FBM0IsRUFBMkNyTyxPQUEzQyxDQUFtRCxVQUFVSCxDQUFWLEVBQWE7QUFDNURBLE1BQUFBLENBQUMsQ0FBQ3NFLFNBQUYsQ0FBWTFFLE1BQVosQ0FBbUIsU0FBbkI7QUFDSCxLQUZEO0FBR0g7O0FBQ0RzRSxFQUFBQSxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQixLQUFLOUQsT0FBaEMsRUFBeUNKLE9BQXpDLENBQWlELFVBQVVILENBQVYsRUFBYTtBQUMxREEsSUFBQUEsQ0FBQyxDQUFDdUwsUUFBRixHQUFhLEtBQWI7QUFDSCxHQUZEO0FBR0EsT0FBS3ZLLEtBQUwsQ0FBV3lHLFdBQVgsR0FBeUIsRUFBekI7O0FBQ0EsTUFBSSxLQUFLM0UsV0FBTCxDQUFpQkssV0FBakIsSUFBZ0MsRUFBaEMsSUFBc0MsS0FBS25DLEtBQUwsQ0FBV3lHLFdBQVgsSUFBMEIsRUFBcEUsRUFBd0U7QUFDcEUsU0FBS3pHLEtBQUwsQ0FBV3lHLFdBQVgsR0FBeUIsS0FBSzNFLFdBQUwsQ0FBaUJLLFdBQTFDO0FBQ0g7O0FBQ0QsT0FBS3NJLGVBQUw7QUFDQSxPQUFLUCxpQkFBTDtBQUNILENBbkJEOztBQXFCQTdLLGdCQUFnQixDQUFDOEQsU0FBakIsQ0FBMkJzSyxPQUEzQixHQUFxQyxZQUFZO0FBQzdDLE1BQUlwSixPQUFPLEdBQUcxRSxRQUFRLENBQUMyRSxjQUFULENBQXdCLGVBQWUsS0FBS3pFLFNBQTVDLENBQWQ7O0FBQ0EsTUFBSXdFLE9BQUosRUFBYTtBQUNUbEcsSUFBQUEsWUFBWSxDQUFDUyxNQUFiLENBQW9CLEtBQUthLGNBQXpCO0FBQ0E0RSxJQUFBQSxPQUFPLENBQUN6RixNQUFSO0FBQ0EsU0FBS2MsSUFBTCxDQUFVcUQsS0FBVixDQUFnQnFCLE9BQWhCLEdBQTBCLGNBQTFCO0FBQ0g7QUFDSixDQVBEOztBQVFBL0UsZ0JBQWdCLENBQUM4RCxTQUFqQixDQUEyQnVLLE9BQTNCLEdBQXFDLFlBQVk7QUFDN0MsTUFBSXJKLE9BQU8sR0FBRzFFLFFBQVEsQ0FBQzJFLGNBQVQsQ0FBd0IsZUFBZSxLQUFLekUsU0FBNUMsQ0FBZDs7QUFDQSxNQUFJd0UsT0FBSixFQUFhO0FBQ1R0RSxJQUFBQSxNQUFNLEdBQUdzRSxPQUFPLENBQUN6RSxhQUFSLENBQXNCLFFBQXRCLENBQVQ7QUFDQSxRQUFJRyxNQUFKLEVBQVlBLE1BQU0sQ0FBQ3VELFNBQVAsQ0FBaUJxQixHQUFqQixDQUFxQixVQUFyQjtBQUNaLFNBQUsvRCxVQUFMLEdBQWtCLElBQWxCO0FBQ0g7QUFDSixDQVBEOztBQVFBdkIsZ0JBQWdCLENBQUM4RCxTQUFqQixDQUEyQndLLE1BQTNCLEdBQW9DLFlBQVk7QUFDNUMsTUFBSXRKLE9BQU8sR0FBRzFFLFFBQVEsQ0FBQzJFLGNBQVQsQ0FBd0IsZUFBZSxLQUFLekUsU0FBNUMsQ0FBZDs7QUFDQSxNQUFJd0UsT0FBSixFQUFhO0FBQ1R0RSxJQUFBQSxNQUFNLEdBQUdzRSxPQUFPLENBQUN6RSxhQUFSLENBQXNCLFFBQXRCLENBQVQ7QUFDQSxRQUFJRyxNQUFKLEVBQVlBLE1BQU0sQ0FBQ3VELFNBQVAsQ0FBaUIxRSxNQUFqQixDQUF3QixVQUF4QjtBQUNaLFNBQUtnQyxVQUFMLEdBQWtCLEtBQWxCO0FBQ0g7QUFDSixDQVBEOztBQVNBdkIsZ0JBQWdCLENBQUM4RCxTQUFqQixDQUEyQnlLLFdBQTNCLEdBQXlDLFlBQVk7QUFDakRDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLEtBQUtoTSxXQUFqQjtBQUNILENBRkQsQyxDQUdBOzs7QUFDQSxJQUFJLEVBQUUsWUFBWWlNLE9BQU8sQ0FBQzVLLFNBQXRCLENBQUosRUFBc0M7QUFDbEM0SyxFQUFBQSxPQUFPLENBQUM1SyxTQUFSLENBQWtCdkUsTUFBbEIsR0FBMkIsWUFBWTtBQUNuQyxRQUFJLEtBQUs0RixVQUFULEVBQXFCO0FBQ2pCLFdBQUtBLFVBQUwsQ0FBZ0J5SCxXQUFoQixDQUE0QixJQUE1QjtBQUNIO0FBQ0osR0FKRDtBQUtIOztBQUVELFNBQVNPLHFCQUFULENBQStCaEUsTUFBL0IsRUFBdUM7QUFDbkMsTUFBTXdGLFlBQVksR0FBR0MsTUFBTSxDQUFDOUssU0FBUCxDQUFpQitLLFFBQWpCLENBQTBCN0ssSUFBMUIsQ0FBK0JtRixNQUEvQixDQUFyQjtBQUNBLE1BQU0yRixRQUFRLEdBQUdILFlBQVksQ0FBQzdKLE9BQWIsQ0FBcUIsVUFBckIsRUFBaUMsRUFBakMsRUFBcUNBLE9BQXJDLENBQTZDLEdBQTdDLEVBQWtELEVBQWxELENBQWpCO0FBQ0EsTUFBTWlLLFVBQVUsR0FBR0QsUUFBUSxDQUFDRSxXQUFULEVBQW5CO0FBQ0EsU0FBT0QsVUFBUDtBQUNIIiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAoQykgUGhpbGlwcGUgTWV5ZXIgMjAxOS0yMDIxXG5EaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgXG5cbnZhbmlsbGFTZWxlY3RCb3ggOiB2MS4wMiA6IEFkZGluZyAyIG5ldyBvcHRpb25zIFwiaXRlbXNTZXBhcmF0b3JcIiB0byBjaGFuZ2UgdGhlIGRlZmF1bHQgXCIsXCIgaXRlbSBzZXBhcmF0b3Igc2hvd2luZyBpbiB0aGUgYnV0dG9uIGFuZCB0cmFuc2xhdGlvbnMuaXRlbSB0byBzaG93IHRoZSBpdGVtIGluIHNpbmd1bGFyIGlmIHRoZXJlIGlzIG9ubHkgb25lLlxudmFuaWxsYVNlbGVjdEJveCA6IHYxLjAxIDogUmVtb3ZpbmcgdXNlbGVzcyBjb2RlIGxpbmUgNTUwLDU1MSBpc3N1ZSA3MSBieSBjaGNoY2hcbnZhbmlsbGFTZWxlY3RCb3ggOiB2MS4wMCA6IEFkZGluZyBhIHBhY2thZ2UuanNvbiBmaWxlIFxudmFuaWxsYVNlbGVjdEJveCA6IHYwLjc4IDogU3RvcCB1c2luZyBpbmxpbmUgc3R5bGVzIGluIHRoZSBtYWluIGJ1dHRvbi4gWW91IGNhbiBzdGVhbCB1c2Uga2VlcElubGluZVN0eWxlczp0cnVlIHRvIHVzZSB0aGUgbGVnYWN5IGJlaGF2aW91clxudmFuaWxsYVNlbGVjdEJveCA6IHYwLjc3IDogV29yayBvbiBwbGFjZSBob2xkZXIgd2l0aCBiYXN0b3VuZSBoZWxwID0+IHN0aWxsIHNlZW1zIHRvIGxvc2UgcGxhY2Vob2xkZXIgdmFsdWUgb24gbXVsdGlwbGUgZHJvcGRvd24gY2hlY2thbGxcbnZhbmlsbGFTZWxlY3RCb3ggOiB2MC43NiA6IE5ldyBjaGFuZ2VUcmVlIGZ1bmN0aW9uIDogdG8gcmVidWlsZCB0aGUgb3JpZ2luYWwgdHJlZSB3aXRoIG5ldyBkYXRhICsgY29ycmVjdGluZyBlbXB0eSgpIGZ1bmN0aW9uXG52YW5pbGxhU2VsZWN0Qm94IDogdjAuNzUgOiBSZW1vdGUgc2VhcmNoIHJlYWR5ICsgbG9jYWwgc2VhcmNoIG1vZGlmaWNhdGlvbiA6IHdoZW4gYSBjaGVjayBvbiBvcHRncm91cCBjaGVja3MgY2hpbGRyZW4gb25seSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHRoZXkgbm90IGV4Y2x1ZGVkIGZyb20gc2VhcmNoLlxudmFuaWxsYVNlbGVjdEJveCA6IHYwLjcyIDogUmVtb3RlIHNlYXJjaCAoV0lQKSBidWdmaXggW3hdIFNlbGVjdCBhbGwgZHVwbGljYXRlZFxudmFuaWxsYVNlbGVjdEJveCA6IHYwLjcxIDogUmVtb3RlIHNlYXJjaCAoV0lQKSBiZXR0ZXIgY29kZVxudmFuaWxsYVNlbGVjdEJveCA6IHYwLjcwIDogUmVtb3RlIHNlYXJjaCAoV0lQKSBmb3IgdXNlcnMgdG8gdGVzdFxudmFuaWxsYVNlbGVjdEJveCA6IHYwLjY1IDogVHdvIGxldmVsczogYnVnIGZpeCA6IGdyb3VwcyBhcmUgY2hlY2tlZC91bmNoZWNrZWQgd2hlbiBjaGVjayBhbGwvdW5jaGVjayBhbGwgaXMgY2xpY2tlZFxudmFuaWxsYVNlbGVjdEJveCA6IHYwLjY0IDogVHdvIGxldmVsczogZ3JvdXBzIGFyZSBub3cgY2hlY2thYmxlIHRvIGNoZWNrL3VuY2hlY2sgdGhlIGNoaWxkcmVuIG9wdGlvbnMgXG52YW5pbGxhU2VsZWN0Qm94IDogdjAuNjMgOiBUd28gbGV2ZWxzOiBvbmUgY2xpY2sgb24gdGhlIGdyb3VwIHNlbGVjdHMgLyB1bnNlbGVjdHMgY2hpbGRyZW5cbnZhbmlsbGFTZWxlY3RCb3ggOiB2MC42MiA6IE5ldyBvcHRpb246IG1heE9wdGlvbldpZHRoIHNldCBhIG1heGltdW0gd2lkdGggZm9yIGVhY2ggb3B0aW9uIGZvciBuYXJyb3cgbWVudXNcbnZhbmlsbGFTZWxlY3RCb3ggOiB2MC42MSA6IE5ldyBvcHRpb246IG1heFNlbGVjdCwgc2V0IGEgbWF4aW11bSB0byB0aGUgc2VsZWN0YWJsZSBvcHRpb25zIGluIGEgbXVsdGlwbGUgY2hvaWNlIG1lbnVcbnZhbmlsbGFTZWxlY3RCb3ggOiB2MC42MCA6IFR3byBsZXZlbHM6IE9wdGdyb3VwcyBhcmUgbm93IHVzZWQgdG8gc2hvdyB0d28gbGV2ZWwgZHJvcGRvd25zIFxudmFuaWxsYVNlbGVjdEJveCA6IHYwLjU5IDogQnVnIGZpeCA6IHNlYXJjaCBib3ggd2FzIG92ZXJsYXBwaW5nIGZpcnN0IGl0ZW0gaW4gc2luZ2xlIHNlbGVjdHNcbnZhbmlsbGFTZWxlY3RCb3ggOiB2MC41OCA6IEJ1ZyBmaXhlc1xudmFuaWxsYVNlbGVjdEJveCA6IHYwLjU3IDogQnVnIGZpeCAobWluV2lkdGggb3B0aW9uIG5vdCBob25vcmVkKVxudmFuaWxsYVNlbGVjdEJveCA6IHYwLjU2IDogVGhlIG11bHRpc2VsZWN0IGNoZWNrYm94ZXMgYXJlIGEgbGl0dGxlIHNtYWxsZXIsIG1heFdpZHRoIG9wdGlvbiBpcyBub3cgd29ya2luZyArIGFkZGVkIG1pbldpZHRoIG9wdGlvbiBhcyB3ZWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBUaGUgYnV0dG9uIGhhcyBub3cgYSBzdHlsZSBhdHRyaWJ1dGUgdG8gcHJvdGVjdCBpdHMgYXBwZWFyYW5jZSBcbnZhbmlsbGFTZWxlY3RCb3ggOiB2MC41NSA6IEFsbCBhdHRyaWJ1dGVzIGZyb20gdGhlIG9yaWdpbmFsIHNlbGVjdCBvcHRpb25zIGFyZSBjb3BpZWQgdG8gdGhlIHNlbGVjdEJveCBlbGVtZW50XG52YW5pbGxhU2VsZWN0Qm94IDogdjAuNTQgOiBpZiBhbGwgdGhlIG9wdGlvbnMgb2YgdGhlIHNlbGVjdCBhcmUgc2VsZWN0ZWQgYnkgdGhlIHVzZXIgdGhlbiB0aGUgY2hlY2sgYWxsIGNoZWNrYm94IGlzIGNoZWNrZWRcbnZhbmlsbGFTZWxlY3RCb3ggOiB2MC41MyA6IGlmIGFsbCB0aGUgb3B0aW9ucyBvZiB0aGUgc2VsZWN0IGFyZSBzZWxlY3RlZCB0aGVuIHRoZSBjaGVjayBhbGwgY2hlY2tib3ggaXMgY2hlY2tlZFxudmFuaWxsYVNlbGVjdEJveCA6IHYwLjUyIDogQmV0dGVyIHN1cHBvcnQgb2Ygc2VsZWN0KCdhbGwnKSA9PiBjb21tYW5kIGlzIGNvbnNpc3RlbnQgd2l0aCBjaGVja2JveCBhbmQgc2VsZWN0aW5nIC8gZGVzZWxlY3Rpbmcgd2hpbGUgc2VhcmNoaW5nIHNlbGVjdCAvIHVuY2hlY2sgb25seSB0aGUgZm91bmQgaXRlbXNcbnZhbmlsbGFTZWxlY3RCb3ggOiB2MC41MSA6IFRyYW5zbGF0aW9ucyBmb3Igc2VsZWN0IGFsbC9jbGVhciBhbGwgKyBtaW5vciBjc3MgY29ycmVjdGlvbnMgKyBkb24ndCBzZWxlY3QgZGlzYWJsZWQgaXRlbXNcbnZhbmlsbGFTZWxlY3RCb3ggOiB2MC41MCA6IFBSIGJ5IGphZ3VlcnJhMjAxNyBhZGRpbmcgYSBzZWxlY3QgYWxsL2NsZWFyIGFsbCBjaGVjayBidXR0b24gKyBvcHRncm91cCBzdXBwb3J0ICFcbnZhbmlsbGFTZWxlY3RCb3ggOiB2MC40MSA6IEJ1ZyBjb3JyZWN0ZWQsIHRoZSBtZW51IGNvbnRlbnQgd2FzIG1pc3BsYWNlZCBpZiBhIGNzcyB0cmFuc2Zvcm0gd2FzIGFwcGxpZWQgb24gYSBwYXJlbnRcbnZhbmlsbGFTZWxlY3RCb3ggOiB2MC40MCA6IEEgY2xpY2sgb24gb25lIHNlbGVjdEJveCBjbG9zZSB0aGUgb3RoZXIgb3BlbmVkIGJveGVzXG52YW5pbGxhU2VsZWN0Qm94IDogdjAuMzUgOiBZb3UgY2FuIGVuYWJsZSBhbmQgZGlzYWJsZSBpdGVtc1xudmFuaWxsYVNlbGVjdEJveCA6IHYwLjMwIDogVGhlIG1lbnUgc3RvcHMgbW92aW5nIGFyb3VuZCBvbiB3aW5kb3cgcmVzaXplIGFuZCBzY3JvbGwgKyB6LWluZGV4IGluIG9yZGVyIG9mIGNyZWF0aW9uIGZvciBtdWx0aXBsZSBpbnN0YW5jZXNcbnZhbmlsbGFTZWxlY3RCb3ggOiB2MC4yNiA6IENvcnJlY3RlZCBidWcgaW4gc3RheU9wZW4gbW9kZSB3aXRoIGRpc2FibGUoKSBmdW5jdGlvblxudmFuaWxsYVNlbGVjdEJveCA6IHYwLjI1IDogTmV3IG9wdGlvbiBzdGF5T3BlbiwgYW5kIHRoZSBkcm9wYm94IGlzIG5vIGxvbmdlciBhIGRyb3Bib3ggYnV0IGEgbmljZSBtdWx0aS1zZWxlY3RcbnByZXZpb3VzIHZlcnNpb24gOiB2MC4yNCA6IGNvcnJlY3RlZCBidWcgYWZmZWN0aW5nIG9wdGlvbnMgd2l0aCBtb3JlIHRoYW4gb25lIGNsYXNzXG5odHRwczovL2dpdGh1Yi5jb20vUGhpbGlwcGVNYXJjTWV5ZXIvdmFuaWxsYVNlbGVjdEJveFxuKi9cblxubGV0IFZTQm94Q291bnRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIGxldCBpbnN0YW5jZXMgPSBbXTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChpbnN0YW5jZVB0cikge1xuICAgICAgICAgICAgaW5zdGFuY2VzLnB1c2goeyBvZmZzZXQ6ICsrY291bnQsIHB0cjogaW5zdGFuY2VQdHIgfSk7XG4gICAgICAgICAgICByZXR1cm4gaW5zdGFuY2VzW2luc3RhbmNlcy5sZW5ndGggLSAxXS5vZmZzZXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gKGluc3RhbmNlTnIpIHtcbiAgICAgICAgICAgIGxldCB0ZW1wID0gaW5zdGFuY2VzLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB4Lm9mZnNldCAhPSBpbnN0YW5jZU5yO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGluc3RhbmNlcyA9IHRlbXAuc3BsaWNlKDApO1xuICAgICAgICB9LFxuICAgICAgICBjbG9zZUFsbEJ1dE1lOiBmdW5jdGlvbiAoaW5zdGFuY2VOcikge1xuICAgICAgICAgICAgaW5zdGFuY2VzLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICBpZiAoeC5vZmZzZXQgIT0gaW5zdGFuY2VOcikge1xuICAgICAgICAgICAgICAgICAgICB4LnB0ci5jbG9zZU9yZGVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xufSgpO1xuXG5mdW5jdGlvbiB2YW5pbGxhU2VsZWN0Qm94KGRvbVNlbGVjdG9yLCBvcHRpb25zKSB7XG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIHRoaXMuaW5zdGFuY2VPZmZzZXQgPSBWU0JveENvdW50ZXIuc2V0KHNlbGYpO1xuICAgIHRoaXMuZG9tU2VsZWN0b3IgPSBkb21TZWxlY3RvcjtcbiAgICB0aGlzLnJvb3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGRvbVNlbGVjdG9yKTtcbiAgICB0aGlzLnJvb3RUb2tlbiA9IG51bGw7XG4gICAgdGhpcy5tYWluO1xuICAgIHRoaXMuYnV0dG9uO1xuICAgIHRoaXMudGl0bGU7XG4gICAgdGhpcy5pc011bHRpcGxlID0gdGhpcy5yb290Lmhhc0F0dHJpYnV0ZShcIm11bHRpcGxlXCIpO1xuICAgIHRoaXMubXVsdGlwbGVTaXplID0gdGhpcy5pc011bHRpcGxlICYmIHRoaXMucm9vdC5oYXNBdHRyaWJ1dGUoXCJzaXplXCIpID8gcGFyc2VJbnQodGhpcy5yb290LmdldEF0dHJpYnV0ZShcInNpemVcIikpIDogLTE7XG4gICAgdGhpcy5pc09wdGdyb3VwcyA9IGZhbHNlO1xuICAgIHRoaXMuY3VycmVudE9wdGdyb3VwID0gMDtcbiAgICB0aGlzLmRyb3A7XG4gICAgdGhpcy50b3A7XG4gICAgdGhpcy5sZWZ0O1xuICAgIHRoaXMub3B0aW9ucztcbiAgICB0aGlzLmxpc3RFbGVtZW50cztcbiAgICB0aGlzLmlzRGlzYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLnNlYXJjaCA9IGZhbHNlO1xuICAgIHRoaXMuc2VhcmNoWm9uZSA9IG51bGw7XG4gICAgdGhpcy5pbnB1dEJveCA9IG51bGw7XG4gICAgdGhpcy5kaXNhYmxlZEl0ZW1zID0gW107XG4gICAgdGhpcy51bG1pbldpZHRoID0gMTQwO1xuICAgIHRoaXMudWxtYXhXaWR0aCA9IDI4MDtcbiAgICB0aGlzLnVsbWluSGVpZ2h0ID0gMjU7XG4gICAgdGhpcy5tYXhPcHRpb25XaWR0aCA9IEluZmluaXR5O1xuICAgIHRoaXMubWF4U2VsZWN0ID0gSW5maW5pdHk7XG4gICAgdGhpcy5pc0luaXRSZW1vdGUgPSBmYWxzZTtcbiAgICB0aGlzLmlzU2VhcmNoUmVtb3RlID0gZmFsc2U7XG4gICAgdGhpcy5vbkluaXQgPSBudWxsO1xuICAgIHRoaXMub25TZWFyY2ggPSBudWxsOyAvLyBpZiBpc1JlbW90ZSBpcyB0cnVlIDogYSB1c2VyIGRlZmluZWQgZnVuY3Rpb24gdGhhdCBsb2FkcyBtb3JlIG9wdGlvbnMgZnJvbSB0aGUgYmFja1xuICAgIHRoaXMub25Jbml0U2l6ZSA9IG51bGw7XG4gICAgdGhpcy5mb3JiaWRlbkF0dHJpYnV0ZXMgPSBbXCJjbGFzc1wiLCBcInNlbGVjdGVkXCIsIFwiZGlzYWJsZWRcIiwgXCJkYXRhLXRleHRcIiwgXCJkYXRhLXZhbHVlXCIsIFwic3R5bGVcIl07XG4gICAgdGhpcy5mb3JiaWRlbkNsYXNzZXMgPSBbXCJhY3RpdmVcIiwgXCJkaXNhYmxlZFwiXTtcbiAgICB0aGlzLnVzZXJPcHRpb25zID0ge1xuICAgICAgICBtYXhXaWR0aDogNTAwLFxuICAgICAgICBtaW5XaWR0aDogLTEsXG4gICAgICAgIG1heEhlaWdodDogNDAwLFxuICAgICAgICB0cmFuc2xhdGlvbnM6IHsgXCJhbGxcIjogXCJBbGxcIiwgXCJpdGVtXCI6IFwiaXRlbVwiLFwiaXRlbXNcIjogXCJpdGVtc1wiLCBcInNlbGVjdEFsbFwiOiBcIlNlbGVjdCBBbGxcIiwgXCJjbGVhckFsbFwiOiBcIkNsZWFyIEFsbFwiIH0sXG4gICAgICAgIHNlYXJjaDogZmFsc2UsXG4gICAgICAgIHBsYWNlSG9sZGVyOiBcIlwiLFxuICAgICAgICBzdGF5T3BlbjogZmFsc2UsXG4gICAgICAgIGRpc2FibGVTZWxlY3RBbGw6IGZhbHNlLFxuICAgICAgICBidXR0b25JdGVtc1NlcGFyYXRvciA6IFwiLFwiXG4gICAgfVxuICAgIHRoaXMua2VlcElubGluZVN0eWxlcyA9IHRydWU7XG4gICAgdGhpcy5rZWVwSW5saW5lQ2FyZXRTdHlsZXMgPSB0cnVlO1xuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIGlmKG9wdGlvbnMuaXRlbXNTZXBhcmF0b3IhPSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgdGhpcy51c2VyT3B0aW9ucy5idXR0b25JdGVtc1NlcGFyYXRvciA9IG9wdGlvbnMuaXRlbXNTZXBhcmF0b3I7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMubWF4V2lkdGggIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnVzZXJPcHRpb25zLm1heFdpZHRoID0gb3B0aW9ucy5tYXhXaWR0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5taW5XaWR0aCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMudXNlck9wdGlvbnMubWluV2lkdGggPSBvcHRpb25zLm1pbldpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLm1heEhlaWdodCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMudXNlck9wdGlvbnMubWF4SGVpZ2h0ID0gb3B0aW9ucy5tYXhIZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMudHJhbnNsYXRpb25zICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gb3B0aW9ucy50cmFuc2xhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy50cmFuc2xhdGlvbnMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnVzZXJPcHRpb25zLnRyYW5zbGF0aW9uc1twcm9wZXJ0eV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXNlck9wdGlvbnMudHJhbnNsYXRpb25zW3Byb3BlcnR5XSA9IG9wdGlvbnMudHJhbnNsYXRpb25zW3Byb3BlcnR5XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5wbGFjZUhvbGRlciAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMudXNlck9wdGlvbnMucGxhY2VIb2xkZXIgPSBvcHRpb25zLnBsYWNlSG9sZGVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnNlYXJjaCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoID0gb3B0aW9ucy5zZWFyY2g7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMucmVtb3RlICE9IHVuZGVmaW5lZCAmJiBvcHRpb25zLnJlbW90ZSkge1xuXG4gICAgICAgICAgIC8vIHVzZXIgZGVmaW5lZCBvbkluaXQgIGZ1bmN0aW9uXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5yZW1vdGUub25Jbml0IT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvcHRpb25zLnJlbW90ZS5vbkluaXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uSW5pdCA9IG9wdGlvbnMucmVtb3RlLm9uSW5pdDtcbiAgICAgICAgICAgICAgICB0aGlzLmlzSW5pdFJlbW90ZSA9IHRydWU7XG4gICAgICAgICAgICB9IFxuICAgICAgICAgICAgaWYgKG9wdGlvbnMucmVtb3RlLm9uSW5pdFNpemUgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkluaXRTaXplID0gb3B0aW9ucy5yZW1vdGUub25Jbml0U2l6ZTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vbkluaXRTaXplIDwgMykgdGhpcy5vbkluaXRTaXplID0gMztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHVzZXIgZGVmaW5lZCByZW1vdGUgc2VhcmNoIGZ1bmN0aW9uXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5yZW1vdGUub25TZWFyY2ggIT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvcHRpb25zLnJlbW90ZS5vblNlYXJjaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHRoaXMub25TZWFyY2ggPSBvcHRpb25zLnJlbW90ZS5vblNlYXJjaDtcbiAgICAgICAgICAgICAgICB0aGlzLmlzU2VhcmNoUmVtb3RlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLnN0YXlPcGVuICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy51c2VyT3B0aW9ucy5zdGF5T3BlbiA9IG9wdGlvbnMuc3RheU9wZW47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5kaXNhYmxlU2VsZWN0QWxsICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy51c2VyT3B0aW9ucy5kaXNhYmxlU2VsZWN0QWxsID0gb3B0aW9ucy5kaXNhYmxlU2VsZWN0QWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubWF4U2VsZWN0ICE9IHVuZGVmaW5lZCAmJiAhaXNOYU4ob3B0aW9ucy5tYXhTZWxlY3QpICYmIG9wdGlvbnMubWF4U2VsZWN0ID49IDEpIHtcbiAgICAgICAgICAgIHRoaXMubWF4U2VsZWN0ID0gb3B0aW9ucy5tYXhTZWxlY3Q7XG4gICAgICAgICAgICB0aGlzLnVzZXJPcHRpb25zLmRpc2FibGVTZWxlY3RBbGwgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubWF4T3B0aW9uV2lkdGggIT0gdW5kZWZpbmVkICYmICFpc05hTihvcHRpb25zLm1heE9wdGlvbldpZHRoKSAmJiBvcHRpb25zLm1heE9wdGlvbldpZHRoID49IDIwKSB7XG4gICAgICAgICAgICB0aGlzLm1heE9wdGlvbldpZHRoID0gb3B0aW9ucy5tYXhPcHRpb25XaWR0aDtcbiAgICAgICAgICAgIHRoaXMudWxtaW5XaWR0aCA9IG9wdGlvbnMubWF4T3B0aW9uV2lkdGggKyA2MDtcbiAgICAgICAgICAgIHRoaXMudWxtYXhXaWR0aCA9IG9wdGlvbnMubWF4T3B0aW9uV2lkdGggKyA2MDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKG9wdGlvbnMua2VlcElubGluZVN0eWxlcyAhPSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgICB0aGlzLmtlZXBJbmxpbmVTdHlsZXMgPSBvcHRpb25zLmtlZXBJbmxpbmVTdHlsZXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYob3B0aW9ucy5rZWVwSW5saW5lQ2FyZXRTdHlsZXMgIT0gdW5kZWZpbmVkICkge1xuICAgICAgICAgICAgdGhpcy5rZWVwSW5saW5lQ2FyZXRTdHlsZXMgPSBvcHRpb25zLmtlZXBJbmxpbmVDYXJldFN0eWxlcztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG5cbiAgICB0aGlzLmNsb3NlT3JkZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICAgaWYgKCFzZWxmLnVzZXJPcHRpb25zLnN0YXlPcGVuKSB7XG4gICAgICAgICAgICBzZWxmLmRyb3Auc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG4gICAgICAgICAgICBpZiAoc2VsZi5zZWFyY2gpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmlucHV0Qm94LnZhbHVlID0gXCJcIjtcbiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChzZWxmLmxpc3RFbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICB4LmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRlXCIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5nZXRDc3NBcnJheSA9IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgICAgICAvLyBXaHkgaW5saW5lIGNzcyA/IFRvIHByb3RlY3QgdGhlIGJ1dHRvbiBkaXNwbGF5IGZyb20gZm9yZWlnbiBjc3MgZmlsZXNcbiAgICAgICAgbGV0IGNzc0FycmF5ID0gW107XG4gICAgICAgIGlmIChzZWxlY3RvciA9PT0gXCIudnNiLW1haW4gYnV0dG9uXCIpIHtcbiAgICAgICAgICAgIGNzc0FycmF5ID0gW1xuICAgICAgICAgICAgICAgIHsgXCJrZXlcIjogXCJtaW4td2lkdGhcIiwgXCJ2YWx1ZVwiOiBcIjEyMHB4XCIgfSxcbiAgICAgICAgICAgICAgICB7IFwia2V5XCI6IFwiYm9yZGVyLXJhZGl1c1wiLCBcInZhbHVlXCI6IFwiMFwiIH0sXG4gICAgICAgICAgICAgICAgeyBcImtleVwiOiBcIndpZHRoXCIsIFwidmFsdWVcIjogXCIxMDAlXCIgfSxcbiAgICAgICAgICAgICAgICB7IFwia2V5XCI6IFwidGV4dC1hbGlnblwiLCBcInZhbHVlXCI6IFwibGVmdFwiIH0sXG4gICAgICAgICAgICAgICAgeyBcImtleVwiOiBcInotaW5kZXhcIiwgXCJ2YWx1ZVwiOiBcIjFcIiB9LFxuICAgICAgICAgICAgICAgIHsgXCJrZXlcIjogXCJjb2xvclwiLCBcInZhbHVlXCI6IFwiIzMzM1wiIH0sXG4gICAgICAgICAgICAgICAgeyBcImtleVwiOiBcImJhY2tncm91bmRcIiwgXCJ2YWx1ZVwiOiBcIndoaXRlICFpbXBvcnRhbnRcIiB9LFxuICAgICAgICAgICAgICAgIHsgXCJrZXlcIjogXCJib3JkZXJcIiwgXCJ2YWx1ZVwiOiBcIjFweCBzb2xpZCAjOTk5ICFpbXBvcnRhbnRcIiB9LFxuICAgICAgICAgICAgICAgIHsgXCJrZXlcIjogXCJsaW5lLWhlaWdodFwiLCBcInZhbHVlXCI6IFwiMjBweFwiIH0sXG4gICAgICAgICAgICAgICAgeyBcImtleVwiOiBcImZvbnQtc2l6ZVwiLCBcInZhbHVlXCI6IFwiMTRweFwiIH0sXG4gICAgICAgICAgICAgICAgeyBcImtleVwiOiBcInBhZGRpbmdcIiwgXCJ2YWx1ZVwiOiBcIjZweCAxMnB4XCIgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNzc0FycmF5VG9TdHJpbmcoY3NzQXJyYXkpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGNzc0FycmF5VG9TdHJpbmcoY3NzTGlzdCkge1xuICAgICAgICAgICAgbGV0IGxpc3QgPSBcIlwiO1xuICAgICAgICAgICAgY3NzTGlzdC5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgbGlzdCArPSB4LmtleSArIFwiOlwiICsgeC52YWx1ZSArIFwiO1wiO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gbGlzdDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgICBpZiAoc2VsZi5pc0luaXRSZW1vdGUpIHtcbiAgICAgICAgICAgIHNlbGYub25Jbml0KFwiXCIsc2VsZi5vbkluaXRTaXplKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYnVpbGRTZWxlY3QoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY3JlYXRlVHJlZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5jcmVhdGVUcmVlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmNyZWF0ZVRyZWUgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdGhpcy5yb290VG9rZW4gPSBzZWxmLmRvbVNlbGVjdG9yLnJlcGxhY2UoL1teQS1aYS16MC05XSsvLCBcIlwiKVxuICAgICAgICB0aGlzLnJvb3Quc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICBsZXQgYWxyZWFkeSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnRuLWdyb3VwLVwiICsgdGhpcy5yb290VG9rZW4pO1xuICAgICAgICBpZiAoYWxyZWFkeSkge1xuICAgICAgICAgICAgYWxyZWFkeS5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1haW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB0aGlzLnJvb3QucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5tYWluLCB0aGlzLnJvb3QubmV4dFNpYmxpbmcpO1xuICAgICAgICB0aGlzLm1haW4uY2xhc3NMaXN0LmFkZChcInZzYi1tYWluXCIpO1xuICAgICAgICB0aGlzLm1haW4uc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJidG4tZ3JvdXAtXCIgKyB0aGlzLnJvb3RUb2tlbik7XG4gICAgICAgIHRoaXMubWFpbi5zdHlsZS5tYXJnaW5MZWZ0ID0gdGhpcy5tYWluLnN0eWxlLm1hcmdpbkxlZnQ7XG4gICAgICAgIGlmIChzZWxmLnVzZXJPcHRpb25zLnN0YXlPcGVuKSB7XG4gICAgICAgICAgICB0aGlzLm1haW4uc3R5bGUubWluSGVpZ2h0ID0gKHRoaXMudXNlck9wdGlvbnMubWF4SGVpZ2h0ICsgMTApICsgXCJweFwiO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlbGYudXNlck9wdGlvbnMuc3RheU9wZW4pIHtcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgICAgIGlmKHRoaXMua2VlcElubGluZVN0eWxlcykge1xuICAgICAgICAgICAgICAgIHZhciBjc3NMaXN0ID0gc2VsZi5nZXRDc3NBcnJheShcIi52c2ItbWFpbiBidXR0b25cIik7XG4gICAgICAgICAgICAgICAgdGhpcy5idXR0b24uc2V0QXR0cmlidXRlKFwic3R5bGVcIiwgY3NzTGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5idXR0b24uc3R5bGUubWF4V2lkdGggPSB0aGlzLnVzZXJPcHRpb25zLm1heFdpZHRoICsgXCJweFwiO1xuICAgICAgICBpZiAodGhpcy51c2VyT3B0aW9ucy5taW5XaWR0aCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uLnN0eWxlLm1pbldpZHRoID0gdGhpcy51c2VyT3B0aW9ucy5taW5XaWR0aCArIFwicHhcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubWFpbi5hcHBlbmRDaGlsZCh0aGlzLmJ1dHRvbik7XG4gICAgICAgIHRoaXMudGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgdGhpcy5idXR0b24uYXBwZW5kQ2hpbGQodGhpcy50aXRsZSk7XG4gICAgICAgIHRoaXMudGl0bGUuY2xhc3NMaXN0LmFkZChcInRpdGxlXCIpO1xuICAgICAgICBsZXQgY2FyZXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgdGhpcy5idXR0b24uYXBwZW5kQ2hpbGQoY2FyZXQpO1xuXG4gICAgICAgIGNhcmV0LmNsYXNzTGlzdC5hZGQoXCJjYXJldFwiKTtcbiAgICAgICAgaWYodGhpcy5rZWVwSW5saW5lQ2FyZXRTdHlsZXMpIHtcbiAgICAgICAgICAgIGNhcmV0LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgICAgICAgY2FyZXQuc3R5bGUucmlnaHQgPSBcIjhweFwiO1xuICAgICAgICAgICAgY2FyZXQuc3R5bGUubWFyZ2luVG9wID0gXCI4cHhcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWxmLnVzZXJPcHRpb25zLnN0YXlPcGVuKSB7XG4gICAgICAgICAgICBjYXJldC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICB0aGlzLnRpdGxlLnN0eWxlLnBhZGRpbmdMZWZ0ID0gXCIyMHB4XCI7XG4gICAgICAgICAgICB0aGlzLnRpdGxlLnN0eWxlLmZvbnRTdHlsZSA9IFwiaXRhbGljXCI7XG4gICAgICAgICAgICB0aGlzLnRpdGxlLnN0eWxlLnZlcnRpY2FsQWxpZ24gPSBcIjIwJVwiO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kcm9wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdGhpcy5tYWluLmFwcGVuZENoaWxkKHRoaXMuZHJvcCk7XG4gICAgICAgIHRoaXMuZHJvcC5jbGFzc0xpc3QuYWRkKFwidnNiLW1lbnVcIik7XG4gICAgICAgIHRoaXMuZHJvcC5zdHlsZS56SW5kZXggPSAyMDAwIC0gdGhpcy5pbnN0YW5jZU9mZnNldDtcbiAgICAgICAgdGhpcy51bCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiKTtcbiAgICAgICAgdGhpcy5kcm9wLmFwcGVuZENoaWxkKHRoaXMudWwpO1xuXG4gICAgICAgIHRoaXMudWwuc3R5bGUubWF4SGVpZ2h0ID0gdGhpcy51c2VyT3B0aW9ucy5tYXhIZWlnaHQgKyBcInB4XCI7XG4gICAgICAgIHRoaXMudWwuc3R5bGUubWluV2lkdGggPSB0aGlzLnVsbWluV2lkdGggKyBcInB4XCI7XG4gICAgICAgIHRoaXMudWwuc3R5bGUubWF4V2lkdGggPSB0aGlzLnVsbWF4V2lkdGggKyBcInB4XCI7XG4gICAgICAgIHRoaXMudWwuc3R5bGUubWluSGVpZ2h0ID0gdGhpcy51bG1pbkhlaWdodCArIFwicHhcIjtcbiAgICAgICAgaWYgKHRoaXMuaXNNdWx0aXBsZSkge1xuICAgICAgICAgICAgdGhpcy51bC5jbGFzc0xpc3QuYWRkKFwibXVsdGlcIik7XG4gICAgICAgICAgICBpZiAoIXNlbGYudXNlck9wdGlvbnMuZGlzYWJsZVNlbGVjdEFsbCkge1xuICAgICAgICAgICAgICAgIGxldCBzZWxlY3RBbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgICAgICAgICAgICAgIHNlbGVjdEFsbC5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCAnYWxsJyk7XG4gICAgICAgICAgICAgICAgc2VsZWN0QWxsLmlubmVyVGV4dCA9IHNlbGYudXNlck9wdGlvbnMudHJhbnNsYXRpb25zLnNlbGVjdEFsbDtcbiAgICAgICAgICAgICAgICB0aGlzLnJvb3QuaW5zZXJ0QmVmb3JlKHNlbGVjdEFsbCwgKHRoaXMucm9vdC5oYXNDaGlsZE5vZGVzKCkpXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5yb290LmNoaWxkTm9kZXNbMF1cbiAgICAgICAgICAgICAgICAgICAgOiBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgc2VsZWN0ZWRUZXh0cyA9IFwiXCJcbiAgICAgICAgbGV0IHNlcCA9IFwiXCI7XG4gICAgICAgIGxldCBuckFjdGl2ZXMgPSAwO1xuXG4gICAgICAgIGlmICh0aGlzLnNlYXJjaCkge1xuICAgICAgICAgICAgdGhpcy5zZWFyY2hab25lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIHRoaXMudWwuYXBwZW5kQ2hpbGQodGhpcy5zZWFyY2hab25lKTtcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoWm9uZS5jbGFzc0xpc3QuYWRkKFwidnNiLWpzLXNlYXJjaC16b25lXCIpO1xuICAgICAgICAgICAgdGhpcy5zZWFyY2hab25lLnN0eWxlLnpJbmRleCA9IDIwMDEgLSB0aGlzLmluc3RhbmNlT2Zmc2V0O1xuICAgICAgICAgICAgdGhpcy5pbnB1dEJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoWm9uZS5hcHBlbmRDaGlsZCh0aGlzLmlucHV0Qm94KTtcbiAgICAgICAgICAgIHRoaXMuaW5wdXRCb3guc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInRleHRcIik7XG4gICAgICAgICAgICB0aGlzLmlucHV0Qm94LnNldEF0dHJpYnV0ZShcImlkXCIsIFwic2VhcmNoX1wiICsgdGhpcy5yb290VG9rZW4pO1xuICAgICAgICAgICAgaWYgKHRoaXMubWF4T3B0aW9uV2lkdGggPCBJbmZpbml0eSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VhcmNoWm9uZS5zdHlsZS5tYXhXaWR0aCA9IHNlbGYubWF4T3B0aW9uV2lkdGggKyAzMCArIFwicHhcIjtcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0Qm94LnN0eWxlLm1heFdpZHRoID0gc2VsZi5tYXhPcHRpb25XaWR0aCArIDMwICsgXCJweFwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcGFyYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgICAgICAgICAgdGhpcy51bC5hcHBlbmRDaGlsZChwYXJhKTtcbiAgICAgICAgICAgIHBhcmEuc3R5bGUuZm9udFNpemUgPSBcIjEycHhcIjtcbiAgICAgICAgICAgIHBhcmEuaW5uZXJIVE1MID0gXCImbmJzcDtcIjtcbiAgICAgICAgICAgIHRoaXMudWwuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHZhciB5ID0gdGhpcy5zY3JvbGxUb3A7XG4gICAgICAgICAgICAgICAgc2VsZi5zZWFyY2hab25lLnBhcmVudE5vZGUuc3R5bGUudG9wID0geSArIFwicHhcIjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vcHRpb25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLmRvbVNlbGVjdG9yICsgXCIgPiBvcHRpb25cIik7XG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMub3B0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgbGV0IHRleHQgPSB4LnRleHRDb250ZW50O1xuICAgICAgICAgICAgbGV0IHZhbHVlID0geC52YWx1ZTtcbiAgICAgICAgICAgIGxldCBvcmlnaW5hbEF0dHJzO1xuICAgICAgICAgICAgaWYgKHguaGFzQXR0cmlidXRlcygpKSB7XG4gICAgICAgICAgICAgICAgb3JpZ2luYWxBdHRycyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHguYXR0cmlidXRlcylcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuZm9yYmlkZW5BdHRyaWJ1dGVzLmluZGV4T2YoYS5uYW1lKSA9PT0gLTFcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgY2xhc3NlcyA9IHguZ2V0QXR0cmlidXRlKFwiY2xhc3NcIik7XG4gICAgICAgICAgICBpZiAoY2xhc3Nlcykge1xuICAgICAgICAgICAgICAgIGNsYXNzZXMgPSBjbGFzc2VzXG4gICAgICAgICAgICAgICAgICAgIC5zcGxpdChcIiBcIilcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuZm9yYmlkZW5DbGFzc2VzLmluZGV4T2YoYykgPT09IC0xXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjbGFzc2VzID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG4gICAgICAgICAgICBsZXQgaXNTZWxlY3RlZCA9IHguaGFzQXR0cmlidXRlKFwic2VsZWN0ZWRcIik7XG4gICAgICAgICAgICBsZXQgaXNEaXNhYmxlZCA9IHguaGFzQXR0cmlidXRlKFwiZGlzYWJsZWRcIik7XG5cbiAgICAgICAgICAgIHNlbGYudWwuYXBwZW5kQ2hpbGQobGkpO1xuICAgICAgICAgICAgbGkuc2V0QXR0cmlidXRlKFwiZGF0YS12YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgICAgICBsaS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXRleHRcIiwgdGV4dCk7XG5cbiAgICAgICAgICAgIGlmIChvcmlnaW5hbEF0dHJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEF0dHJzLmZvckVhY2goZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgbGkuc2V0QXR0cmlidXRlKGEubmFtZSwgYS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgIGxpLmNsYXNzTGlzdC5hZGQoeCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHNlbGYubWF4T3B0aW9uV2lkdGggPCBJbmZpbml0eSkge1xuICAgICAgICAgICAgICAgIGxpLmNsYXNzTGlzdC5hZGQoXCJzaG9ydFwiKTtcbiAgICAgICAgICAgICAgICBsaS5zdHlsZS5tYXhXaWR0aCA9IHNlbGYubWF4T3B0aW9uV2lkdGggKyBcInB4XCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpc1NlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgbnJBY3RpdmVzKys7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRUZXh0cyArPSBzZXAgKyB0ZXh0O1xuICAgICAgICAgICAgICAgIHNlcCA9IHNlbGYudXNlck9wdGlvbnMuYnV0dG9uSXRlbXNTZXBhcmF0b3I7XG4gICAgICAgICAgICAgICAgbGkuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcbiAgICAgICAgICAgICAgICBpZiAoIXNlbGYuaXNNdWx0aXBsZSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnRpdGxlLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsYXNzZXMubGVuZ3RoICE9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudGl0bGUuY2xhc3NMaXN0LmFkZCh4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzRGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBsaS5jbGFzc0xpc3QuYWRkKFwiZGlzYWJsZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsaS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIiBcIiArIHRleHQpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZi5kb21TZWxlY3RvciArICcgb3B0Z3JvdXAnKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgc2VsZi5pc09wdGdyb3VwcyA9IHRydWU7XG4gICAgICAgICAgICBzZWxmLm9wdGlvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGYuZG9tU2VsZWN0b3IgKyBcIiBvcHRpb25cIik7XG4gICAgICAgICAgICBsZXQgZ3JvdXBzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxmLmRvbVNlbGVjdG9yICsgJyBvcHRncm91cCcpO1xuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZ3JvdXBzKS5mb3JFYWNoKGZ1bmN0aW9uIChncm91cCkge1xuICAgICAgICAgICAgICAgIGxldCBncm91cE9wdGlvbnMgPSBncm91cC5xdWVyeVNlbGVjdG9yQWxsKCdvcHRpb24nKTtcbiAgICAgICAgICAgICAgICBsZXQgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG4gICAgICAgICAgICAgICAgbGV0IHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgICAgICAgICBsZXQgaUNoZWNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlcIik7XG4gICAgICAgICAgICAgICAgbGV0IGxhYmVsRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJiXCIpO1xuICAgICAgICAgICAgICAgIGxldCBkYXRhV2F5ID0gZ3JvdXAuZ2V0QXR0cmlidXRlKFwiZGF0YS13YXlcIik7XG4gICAgICAgICAgICAgICAgaWYgKCFkYXRhV2F5KSBkYXRhV2F5ID0gXCJjbG9zZWRcIjtcbiAgICAgICAgICAgICAgICBpZiAoIWRhdGFXYXkgfHwgKGRhdGFXYXkgIT09IFwiY2xvc2VkXCIgJiYgZGF0YVdheSAhPT0gXCJvcGVuXCIpKSBkYXRhV2F5ID0gXCJjbG9zZWRcIjtcbiAgICAgICAgICAgICAgICBsaS5hcHBlbmRDaGlsZChzcGFuKTtcbiAgICAgICAgICAgICAgICBsaS5hcHBlbmRDaGlsZChpQ2hlY2spO1xuICAgICAgICAgICAgICAgIHNlbGYudWwuYXBwZW5kQ2hpbGQobGkpO1xuICAgICAgICAgICAgICAgIGxpLmNsYXNzTGlzdC5hZGQoJ2dyb3VwZWQtb3B0aW9uJyk7XG4gICAgICAgICAgICAgICAgbGkuY2xhc3NMaXN0LmFkZChkYXRhV2F5KTtcbiAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRPcHRncm91cCsrO1xuICAgICAgICAgICAgICAgIGxldCBvcHRJZCA9IHNlbGYucm9vdFRva2VuICsgXCItb3B0LVwiICsgc2VsZi5jdXJyZW50T3B0Z3JvdXA7XG4gICAgICAgICAgICAgICAgbGkuaWQgPSBvcHRJZDtcbiAgICAgICAgICAgICAgICBsaS5hcHBlbmRDaGlsZChsYWJlbEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGxhYmVsRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShncm91cC5sYWJlbCkpO1xuICAgICAgICAgICAgICAgIGxpLnNldEF0dHJpYnV0ZShcImRhdGEtdGV4dFwiLCBncm91cC5sYWJlbCk7XG4gICAgICAgICAgICAgICAgc2VsZi51bC5hcHBlbmRDaGlsZChsaSk7XG5cbiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChncm91cE9wdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRleHQgPSB4LnRleHRDb250ZW50O1xuICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSB4LnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2xhc3NlcyA9IHguZ2V0QXR0cmlidXRlKFwiY2xhc3NcIik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjbGFzc2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzID0gY2xhc3Nlcy5zcGxpdChcIiBcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzID0gW107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKGRhdGFXYXkpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpc1NlbGVjdGVkID0geC5oYXNBdHRyaWJ1dGUoXCJzZWxlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi51bC5hcHBlbmRDaGlsZChsaSk7XG4gICAgICAgICAgICAgICAgICAgIGxpLnNldEF0dHJpYnV0ZShcImRhdGEtdmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBsaS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXRleHRcIiwgdGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGxpLnNldEF0dHJpYnV0ZShcImRhdGEtcGFyZW50XCIsIG9wdElkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsYXNzZXMubGVuZ3RoICE9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpLmNsYXNzTGlzdC5hZGQoeCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNTZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbnJBY3RpdmVzKys7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFRleHRzICs9IHNlcCArIHRleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXAgPSBzZWxmLnVzZXJPcHRpb25zLmJ1dHRvbkl0ZW1zU2VwYXJhdG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGkuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2VsZi5pc011bHRpcGxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi50aXRsZS50ZXh0Q29udGVudCA9IHRleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsYXNzZXMubGVuZ3RoICE9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnRpdGxlLmNsYXNzTGlzdC5hZGQoeCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsaS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0KSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgb3B0aW9uc0xlbmd0aCA9IHNlbGYub3B0aW9ucy5sZW5ndGggLSBOdW1iZXIoIXNlbGYudXNlck9wdGlvbnMuZGlzYWJsZVNlbGVjdEFsbCk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnNMZW5ndGggPT0gbnJBY3RpdmVzKSB7IC8vIEJhc3RvdW5lIGlkZWEgdG8gcHJlc2VydmUgdGhlIHBsYWNlaG9sZGVyXG4gICAgICAgICAgICBsZXQgd29yZEZvckFsbCA9IHNlbGYudXNlck9wdGlvbnMudHJhbnNsYXRpb25zLmFsbDtcbiAgICAgICAgICAgIHNlbGVjdGVkVGV4dHMgPSB3b3JkRm9yQWxsO1xuICAgICAgICB9IGVsc2UgaWYgKHNlbGYubXVsdGlwbGVTaXplICE9IC0xKSB7XG4gICAgICAgICAgICBpZiAobnJBY3RpdmVzID4gc2VsZi5tdWx0aXBsZVNpemUpIHtcbiAgICAgICAgICAgICAgICBsZXQgd29yZEZvckl0ZW1zID0gbnJBY3RpdmVzID09PSAxID8gc2VsZi51c2VyT3B0aW9ucy50cmFuc2xhdGlvbnMuaXRlbSA6IHNlbGYudXNlck9wdGlvbnMudHJhbnNsYXRpb25zLml0ZW1zO1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkVGV4dHMgPSBuckFjdGl2ZXMgKyBcIiBcIiArIHdvcmRGb3JJdGVtcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VsZi5pc011bHRpcGxlKSB7XG4gICAgICAgICAgICBzZWxmLnRpdGxlLmlubmVySFRNTCA9IHNlbGVjdGVkVGV4dHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGYudXNlck9wdGlvbnMucGxhY2VIb2xkZXIgIT0gXCJcIiAmJiBzZWxmLnRpdGxlLnRleHRDb250ZW50ID09IFwiXCIpIHtcbiAgICAgICAgICAgIHNlbGYudGl0bGUudGV4dENvbnRlbnQgPSBzZWxmLnVzZXJPcHRpb25zLnBsYWNlSG9sZGVyO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYubGlzdEVsZW1lbnRzID0gc2VsZi5kcm9wLnF1ZXJ5U2VsZWN0b3JBbGwoXCJsaTpub3QoLmdyb3VwZWQtb3B0aW9uKVwiKTtcbiAgICAgICAgaWYgKHNlbGYuc2VhcmNoKSB7XG4gICAgICAgICAgICBzZWxmLmlucHV0Qm94LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGxldCBzZWFyY2hWYWx1ZSA9IGUudGFyZ2V0LnZhbHVlLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgbGV0IHNlYXJjaFZhbHVlTGVuZ3RoID0gc2VhcmNoVmFsdWUubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGxldCBuckZvdW5kID0gMDtcbiAgICAgICAgICAgICAgICBsZXQgbnJDaGVja2VkID0gMDtcbiAgICAgICAgICAgICAgICBsZXQgc2VsZWN0QWxsID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5pc1NlYXJjaFJlbW90ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VhcmNoVmFsdWVMZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZW1vdGVTZWFyY2hJbnRlZ3JhdGUobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VhcmNoVmFsdWVMZW5ndGggPj0gMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5vblNlYXJjaChzZWFyY2hWYWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJlbW90ZVNlYXJjaEludGVncmF0ZShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWFyY2hWYWx1ZUxlbmd0aCA8IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHNlbGYubGlzdEVsZW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHguZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJykgPT09ICdhbGwnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdEFsbCA9IHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeC5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZGVuLXNlYXJjaFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnJGb3VuZCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuckNoZWNrZWQgKz0geC5jbGFzc0xpc3QuY29udGFpbnMoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoc2VsZi5saXN0RWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSAhPT0gJ2FsbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRleHQgPSB4LmdldEF0dHJpYnV0ZShcImRhdGEtdGV4dFwiKS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGV4dC5pbmRleE9mKHNlYXJjaFZhbHVlKSA9PT0gLTEgJiYgeC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSAhPT0gJ2FsbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHguY2xhc3NMaXN0LmFkZChcImhpZGRlbi1zZWFyY2hcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuckZvdW5kKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4LmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW4tc2VhcmNoXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnJDaGVja2VkICs9IHguY2xhc3NMaXN0LmNvbnRhaW5zKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdEFsbCA9IHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdEFsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5yRm91bmQgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RBbGwuY2xhc3NMaXN0LmFkZCgnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0QWxsLmNsYXNzTGlzdC5yZW1vdmUoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobnJDaGVja2VkICE9PSBuckZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0QWxsLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0QWxsLmlubmVyVGV4dCA9IHNlbGYudXNlck9wdGlvbnMudHJhbnNsYXRpb25zLnNlbGVjdEFsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RBbGwuc2V0QXR0cmlidXRlKCdkYXRhLXNlbGVjdGVkJywgJ2ZhbHNlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0QWxsLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0QWxsLmlubmVyVGV4dCA9IHNlbGYudXNlck9wdGlvbnMudHJhbnNsYXRpb25zLmNsZWFyQWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdEFsbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc2VsZWN0ZWQnLCAndHJ1ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTsgXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VsZi51c2VyT3B0aW9ucy5zdGF5T3Blbikge1xuICAgICAgICAgICAgc2VsZi5kcm9wLnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIjtcbiAgICAgICAgICAgIHNlbGYuZHJvcC5zdHlsZS5ib3hTaGFkb3cgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIHNlbGYuZHJvcC5zdHlsZS5taW5IZWlnaHQgPSAodGhpcy51c2VyT3B0aW9ucy5tYXhIZWlnaHQgKyAxMCkgKyBcInB4XCI7XG4gICAgICAgICAgICBzZWxmLmRyb3Auc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG4gICAgICAgICAgICBzZWxmLmRyb3Auc3R5bGUubGVmdCA9IFwiMHB4XCI7XG4gICAgICAgICAgICBzZWxmLmRyb3Auc3R5bGUudG9wID0gXCIwcHhcIjtcbiAgICAgICAgICAgIHNlbGYuYnV0dG9uLnN0eWxlLmJvcmRlciA9IFwibm9uZVwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tYWluLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLmlzRGlzYWJsZWQpIHJldHVybjtcbiAgICAgICAgICAgICAgICBzZWxmLmRyb3Auc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBkb2NMaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgaWYgKCFzZWxmLnVzZXJPcHRpb25zLnN0YXlPcGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIFZTQm94Q291bnRlci5jbG9zZUFsbEJ1dE1lKHNlbGYuaW5zdGFuY2VPZmZzZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kcm9wLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgaWYgKHNlbGYuaXNEaXNhYmxlZCkgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKGUudGFyZ2V0LnRhZ05hbWUgPT09ICdJTlBVVCcpIHJldHVybjtcbiAgICAgICAgICAgIGxldCBpc1Nob3dIaWRlQ29tbWFuZCA9IGUudGFyZ2V0LnRhZ05hbWUgPT09ICdTUEFOJztcbiAgICAgICAgICAgIGxldCBpc0NoZWNrQ29tbWFuZCA9IGUudGFyZ2V0LnRhZ05hbWUgPT09ICdJJztcbiAgICAgICAgICAgIGxldCBsaUNsaWNrZWQgPSBlLnRhcmdldC5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgaWYgKCFsaUNsaWNrZWQuaGFzQXR0cmlidXRlKFwiZGF0YS12YWx1ZVwiKSkge1xuICAgICAgICAgICAgICAgIGlmIChsaUNsaWNrZWQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZ3JvdXBlZC1vcHRpb25cIikpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1Nob3dIaWRlQ29tbWFuZCAmJiAhaXNDaGVja0NvbW1hbmQpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG9sZENsYXNzLCBuZXdDbGFzcztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ2hlY2tDb21tYW5kKSB7IC8vIGNoZWNrIG9yIHVuY2hlY2sgY2hpbGRyZW5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY2hlY2tVbmNoZWNrRnJvbVBhcmVudChsaUNsaWNrZWQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAvL29wZW4gb3IgY2xvc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsaUNsaWNrZWQuY2xhc3NMaXN0LmNvbnRhaW5zKFwib3BlblwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sZENsYXNzID0gXCJvcGVuXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdDbGFzcyA9IFwiY2xvc2VkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkQ2xhc3MgPSBcImNsb3NlZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q2xhc3MgPSBcIm9wZW5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbGlDbGlja2VkLmNsYXNzTGlzdC5yZW1vdmUob2xkQ2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlDbGlja2VkLmNsYXNzTGlzdC5hZGQobmV3Q2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRoZUNoaWxkcmVuID0gc2VsZi5kcm9wLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1wYXJlbnQ9J1wiICsgbGlDbGlja2VkLmlkICsgXCInXVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoZUNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4LmNsYXNzTGlzdC5yZW1vdmUob2xkQ2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHguY2xhc3NMaXN0LmFkZChuZXdDbGFzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgY2hvaWNlVmFsdWUgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXZhbHVlXCIpO1xuICAgICAgICAgICAgbGV0IGNob2ljZVRleHQgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRleHRcIik7XG4gICAgICAgICAgICBsZXQgY2xhc3NOYW1lID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIik7XG5cbiAgICAgICAgICAgIGlmIChjbGFzc05hbWUgJiYgY2xhc3NOYW1lLmluZGV4T2YoXCJkaXNhYmxlZFwiKSAhPSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNsYXNzTmFtZSAmJiBjbGFzc05hbWUuaW5kZXhPZihcIm92ZXJmbG93XCIpICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY2hvaWNlVmFsdWUgPT09ICdhbGwnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0Lmhhc0F0dHJpYnV0ZSgnZGF0YS1zZWxlY3RlZCcpXG4gICAgICAgICAgICAgICAgICAgICYmIGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1zZWxlY3RlZCcpID09PSAndHJ1ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXRWYWx1ZSgnbm9uZScpXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXRWYWx1ZSgnYWxsJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFzZWxmLmlzTXVsdGlwbGUpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnJvb3QudmFsdWUgPSBjaG9pY2VWYWx1ZTtcbiAgICAgICAgICAgICAgICBzZWxmLnRpdGxlLnRleHRDb250ZW50ID0gY2hvaWNlVGV4dDtcbiAgICAgICAgICAgICAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYudGl0bGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgY2xhc3NOYW1lICsgXCIgdGl0bGVcIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi50aXRsZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInRpdGxlXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChzZWxmLmxpc3RFbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICB4LmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKGNob2ljZVRleHQgIT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZWxmLnByaXZhdGVTZW5kQ2hhbmdlKCk7XG4gICAgICAgICAgICAgICAgaWYgKCFzZWxmLnVzZXJPcHRpb25zLnN0YXlPcGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvY0xpc3RlbmVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgd2FzQWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICB3YXNBY3RpdmUgPSBjbGFzc05hbWUuaW5kZXhPZihcImFjdGl2ZVwiKSAhPSAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHdhc0FjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldC5oYXNBdHRyaWJ1dGUoXCJkYXRhLXBhcmVudFwiKSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmNoZWNrVW5jaGVja0Zyb21DaGlsZChlLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IHNlbGVjdGVkVGV4dHMgPSBcIlwiXG4gICAgICAgICAgICAgICAgbGV0IHNlcCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgbGV0IG5yQWN0aXZlcyA9IDA7XG4gICAgICAgICAgICAgICAgbGV0IG5yQWxsID0gMDtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbGYub3B0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBuckFsbCsrO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5vcHRpb25zW2ldLnZhbHVlID09IGNob2ljZVZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm9wdGlvbnNbaV0uc2VsZWN0ZWQgPSAhd2FzQWN0aXZlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLm9wdGlvbnNbaV0uc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5yQWN0aXZlcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRUZXh0cyArPSBzZXAgKyBzZWxmLm9wdGlvbnNbaV0udGV4dENvbnRlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXAgPSBzZWxmLnVzZXJPcHRpb25zLmJ1dHRvbkl0ZW1zU2VwYXJhdG9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChuckFsbCA9PSBuckFjdGl2ZXMgLSBOdW1iZXIoIXNlbGYudXNlck9wdGlvbnMuZGlzYWJsZVNlbGVjdEFsbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHdvcmRGb3JBbGwgPSBzZWxmLnVzZXJPcHRpb25zLnRyYW5zbGF0aW9ucy5hbGw7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkVGV4dHMgPSB3b3JkRm9yQWxsO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZi5tdWx0aXBsZVNpemUgIT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5yQWN0aXZlcyA+IHNlbGYubXVsdGlwbGVTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgd29yZEZvckl0ZW1zID0gbnJBY3RpdmVzID09PSAxID8gc2VsZi51c2VyT3B0aW9ucy50cmFuc2xhdGlvbnMuaXRlbSA6IHNlbGYudXNlck9wdGlvbnMudHJhbnNsYXRpb25zLml0ZW1zO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRUZXh0cyA9IG5yQWN0aXZlcyArIFwiIFwiICsgd29yZEZvckl0ZW1zO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlbGYudGl0bGUudGV4dENvbnRlbnQgPSBzZWxlY3RlZFRleHRzO1xuICAgICAgICAgICAgICAgIHNlbGYuY2hlY2tTZWxlY3RNYXgobnJBY3RpdmVzKTtcbiAgICAgICAgICAgICAgICBzZWxmLmNoZWNrVW5jaGVja0FsbCgpO1xuICAgICAgICAgICAgICAgIHNlbGYucHJpdmF0ZVNlbmRDaGFuZ2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBpZiAoc2VsZi51c2VyT3B0aW9ucy5wbGFjZUhvbGRlciAhPSBcIlwiICYmIHNlbGYudGl0bGUudGV4dENvbnRlbnQgPT0gXCJcIikge1xuICAgICAgICAgICAgICAgIHNlbGYudGl0bGUudGV4dENvbnRlbnQgPSBzZWxmLnVzZXJPcHRpb25zLnBsYWNlSG9sZGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZnVuY3Rpb24gZG9jTGlzdGVuZXIoKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZG9jTGlzdGVuZXIpO1xuICAgICAgICAgICAgc2VsZi5kcm9wLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICAgICAgICAgICAgaWYgKHNlbGYuc2VhcmNoKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5pbnB1dEJveC52YWx1ZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoc2VsZi5saXN0RWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgeC5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZGVuLXNlYXJjaFwiKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmluaXQoKTtcbiAgICB0aGlzLmNoZWNrVW5jaGVja0FsbCgpO1xufVxuXG52YW5pbGxhU2VsZWN0Qm94LnByb3RvdHlwZS5idWlsZFNlbGVjdCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIGlmKGRhdGEgPT0gbnVsbCB8fCBkYXRhLmxlbmd0aCA8IDEpIHJldHVybjtcbiAgICBpZighc2VsZi5pc09wdGdyb3Vwcyl7XG4gICAgICAgIHNlbGYuaXNPcHRncm91cHMgPSBkYXRhWzBdLnBhcmVudCAhPSB1bmRlZmluZWQgJiYgZGF0YVswXS5wYXJlbnQgIT0gXCJcIjtcbiAgICB9XG4gIFxuICAgIGlmKHNlbGYuaXNPcHRncm91cHMpe1xuICAgICAgICBsZXQgZ3JvdXBzID0ge307XG4gICAgICAgIGRhdGEgPSBkYXRhLmZpbHRlcihmdW5jdGlvbih4KXtcbiAgICAgICAgICAgIHJldHVybiB4LnBhcmVudCAhPSB1bmRlZmluZWQgJiYgeC5wYXJlbnQgIT0gXCJcIjtcbiAgICAgICAgfSk7XG4gICAgXG4gICAgICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgaWYoIWdyb3Vwc1t4LnBhcmVudF0pe1xuICAgICAgICAgICAgICAgIGdyb3Vwc1t4LnBhcmVudF0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZm9yIChsZXQgZ3JvdXAgaW4gZ3JvdXBzKSB7XG4gICAgICAgICAgICBsZXQgYW5PcHRncm91cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRncm91cFwiKTtcbiAgICAgICAgICAgIGFuT3B0Z3JvdXAuc2V0QXR0cmlidXRlKFwibGFiZWxcIiwgZ3JvdXApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBvcHRpb25zID0gZGF0YS5maWx0ZXIoZnVuY3Rpb24oeCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHgucGFyZW50ID09IGdyb3VwO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBvcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICBsZXQgYW5PcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgICAgICAgICAgICAgIGFuT3B0aW9uLnZhbHVlID0geC52YWx1ZTtcbiAgICAgICAgICAgICAgICBhbk9wdGlvbi50ZXh0ID0geC50ZXh0O1xuICAgICAgICAgICAgICAgIGlmKHguc2VsZWN0ZWQpe1xuICAgICAgICAgICAgICAgICAgICBhbk9wdGlvbi5zZXRBdHRyaWJ1dGUoXCJzZWxlY3RlZFwiLHRydWUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFuT3B0Z3JvdXAuYXBwZW5kQ2hpbGQoYW5PcHRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzZWxmLnJvb3QuYXBwZW5kQ2hpbGQoYW5PcHRncm91cCk7XG4gICAgICAgIH1cbiAgICB9ZWxzZXtcbiAgICAgICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICBsZXQgYW5PcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgICAgICAgICAgYW5PcHRpb24udmFsdWUgPSB4LnZhbHVlO1xuICAgICAgICAgICAgYW5PcHRpb24udGV4dCA9IHgudGV4dDtcbiAgICAgICAgICAgIGlmKHguc2VsZWN0ZWQpe1xuICAgICAgICAgICAgICAgIGFuT3B0aW9uLnNldEF0dHJpYnV0ZShcInNlbGVjdGVkXCIsdHJ1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYucm9vdC5hcHBlbmRDaGlsZChhbk9wdGlvbik7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxudmFuaWxsYVNlbGVjdEJveC5wcm90b3R5cGUucmVtb3RlU2VhcmNoSW50ZWdyYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBpZiAoZGF0YSA9PSBudWxsIHx8IGRhdGEubGVuZ3RoID09IDApIHtcbiAgICAgICAgbGV0IGRhdGFDaGVja2VkID0gc2VsZi5vcHRpb25zQ2hlY2tlZFRvRGF0YSgpO1xuICAgICAgICBpZihkYXRhQ2hlY2tlZClcbiAgICAgICAgICAgIGRhdGEgPSBkYXRhQ2hlY2tlZC5zbGljZSgwKTtcbiAgICAgICAgc2VsZi5yZW1vdGVTZWFyY2hJbnRlZ3JhdGVJdChkYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgZGF0YUNoZWNrZWQgPSBzZWxmLm9wdGlvbnNDaGVja2VkVG9EYXRhKCk7XG4gICAgICAgIGlmIChkYXRhQ2hlY2tlZC5sZW5ndGggPiAwKXtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBkYXRhLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgaWYoZGF0YUNoZWNrZWQuaW5kZXhPZihkYXRhW2ldLmlkKSAhPS0xKXtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5zbGljZShpLDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBkYXRhID0gZGF0YS5jb25jYXQoZGF0YUNoZWNrZWQpO1xuXG4gICAgICAgIHNlbGYucmVtb3RlU2VhcmNoSW50ZWdyYXRlSXQoZGF0YSk7XG4gICAgfVxufVxuXG52YW5pbGxhU2VsZWN0Qm94LnByb3RvdHlwZS5vcHRpb25zQ2hlY2tlZFRvRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgbGV0IGRhdGFDaGVja2VkID0gW107XG4gICAgbGV0IHRyZWVPcHRpb25zID0gc2VsZi51bC5xdWVyeVNlbGVjdG9yQWxsKFwibGkuYWN0aXZlOm5vdCguZ3JvdXBlZC1vcHRpb24pXCIpO1xuICAgIGxldCBrZWVwUGFyZW50cyA9IHt9O1xuICAgICAgICBpZiAodHJlZU9wdGlvbnMpIHtcbiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRyZWVPcHRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgbGV0IG9uZURhdGEgPSB7XCJ2YWx1ZVwiOnguZ2V0QXR0cmlidXRlKFwiZGF0YS12YWx1ZVwiKSxcInRleHRcIjp4LmdldEF0dHJpYnV0ZShcImRhdGEtdGV4dFwiKSxcInNlbGVjdGVkXCI6dHJ1ZX07XG4gICAgICAgICAgICAgICAgaWYob25lRGF0YS52YWx1ZSAhPT0gXCJhbGxcIil7XG4gICAgICAgICAgICAgICAgICAgIGlmKHNlbGYuaXNPcHRncm91cHMpe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBhcmVudElkID0geC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXBhcmVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGtlZXBQYXJlbnRzW3BhcmVudElkXSE9dW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmVEYXRhLnBhcmVudCA9IGtlZXBQYXJlbnRzW3BhcmVudElkXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwYXJlbnRQdHIgPSBzZWxmLnVsLnF1ZXJ5U2VsZWN0b3IoXCIjXCIrcGFyZW50SWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwYXJlbnROYW1lID0gcGFyZW50UHRyLmdldEF0dHJpYnV0ZShcImRhdGEtdGV4dFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZWVwUGFyZW50c1twYXJlbnRJZF0gPSBwYXJlbnROYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uZURhdGEucGFyZW50ID0gcGFyZW50TmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkYXRhQ2hlY2tlZC5wdXNoKG9uZURhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhQ2hlY2tlZDtcbn1cblxudmFuaWxsYVNlbGVjdEJveC5wcm90b3R5cGUucmVtb3ZlT3B0aW9uc05vdENoZWNrZWQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBsZXQgbWluaW11bVNpemUgPSBzZWxmLm9uSW5pdFNpemU7XG4gICAgbGV0IG5ld1NlYXJjaFNpemUgPSBkYXRhID09IG51bGwgPyAwIDogZGF0YS5sZW5ndGg7XG4gICAgbGV0IHByZXNlbnRTaXplID0gc2VsZi5yb290Lmxlbmd0aDtcbiAgICBpZiAocHJlc2VudFNpemUgKyBuZXdTZWFyY2hTaXplID4gbWluaW11bVNpemUpIHtcbiAgICAgICAgbGV0IG1heFRvUmVtb3ZlID0gcHJlc2VudFNpemUgKyBuZXdTZWFyY2hTaXplIC0gbWluaW11bVNpemUgLSAxO1xuICAgICAgICBsZXQgcmVtb3ZlZCA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSBzZWxmLnJvb3QubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGlmIChzZWxmLnJvb3Qub3B0aW9uc1tpXS5zZWxlY3RlZCA9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGlmIChyZW1vdmVkIDw9IG1heFRvUmVtb3ZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZWQrKztcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5yb290LnJlbW92ZShpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbnZhbmlsbGFTZWxlY3RCb3gucHJvdG90eXBlLmNoYW5nZVRyZWUgPSBmdW5jdGlvbiAoZGF0YSwgb3B0aW9ucykge1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBzZWxmLmVtcHR5KCk7XG4gICAgc2VsZi5yZW1vdGVTZWFyY2hJbnRlZ3JhdGVJdChkYXRhKTtcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLm9uU2VhcmNoKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5vblNlYXJjaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc2VsZi5vblNlYXJjaCA9IG9wdGlvbnMub25TZWFyY2g7XG4gICAgICAgICAgICBzZWxmLmlzU2VhcmNoUmVtb3RlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZWxmLmxpc3RFbGVtZW50cyA9IHRoaXMuZHJvcC5xdWVyeVNlbGVjdG9yQWxsKFwibGk6bm90KC5ncm91cGVkLW9wdGlvbilcIik7XG59XG5cbnZhbmlsbGFTZWxlY3RCb3gucHJvdG90eXBlLnJlbW90ZVNlYXJjaEludGVncmF0ZUl0ID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgaWYgKGRhdGEgPT0gbnVsbCB8fCBkYXRhLmxlbmd0aCA9PSAwKSByZXR1cm47XG4gICAgd2hpbGUoc2VsZi5yb290LmZpcnN0Q2hpbGQpXG4gICAgc2VsZi5yb290LnJlbW92ZUNoaWxkKHNlbGYucm9vdC5maXJzdENoaWxkKTtcbiAgICBcbiAgICBzZWxmLmJ1aWxkU2VsZWN0KGRhdGEpO1xuICAgIHNlbGYucmVsb2FkVHJlZSgpO1xufVxuXG52YW5pbGxhU2VsZWN0Qm94LnByb3RvdHlwZS5yZWxvYWRUcmVlID0gZnVuY3Rpb24gKCkge1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBsZXQgbGlzID0gc2VsZi51bC5xdWVyeVNlbGVjdG9yQWxsKFwibGlcIik7XG4gICAgaWYgKGxpcyAhPSBudWxsKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSBsaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGlmIChsaXNbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJykgIT09ICdhbGwnKSB7XG4gICAgICAgICAgICAgICAgc2VsZi51bC5yZW1vdmVDaGlsZChsaXNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHNlbGVjdGVkVGV4dHMgPSBcIlwiXG4gICAgbGV0IHNlcCA9IFwiXCI7XG4gICAgbGV0IG5yQWN0aXZlcyA9IDA7XG4gICAgbGV0IG5yQWxsID0gMDtcblxuICAgIGlmIChzZWxmLmlzT3B0Z3JvdXBzKSB7XG4gICAgICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGYuZG9tU2VsZWN0b3IgKyAnIG9wdGdyb3VwJykgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHNlbGYub3B0aW9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5kb21TZWxlY3RvciArIFwiIG9wdGlvblwiKTtcbiAgICAgICAgICAgIGxldCBncm91cHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuZG9tU2VsZWN0b3IgKyAnIG9wdGdyb3VwJyk7XG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChncm91cHMpLmZvckVhY2goZnVuY3Rpb24gKGdyb3VwKSB7XG4gICAgICAgICAgICAgICAgbGV0IGdyb3VwT3B0aW9ucyA9IGdyb3VwLnF1ZXJ5U2VsZWN0b3JBbGwoJ29wdGlvbicpO1xuICAgICAgICAgICAgICAgIGxldCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcbiAgICAgICAgICAgICAgICBsZXQgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICAgICAgICAgIGxldCBpQ2hlY2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaVwiKTtcbiAgICAgICAgICAgICAgICBsZXQgbGFiZWxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJcIik7XG4gICAgICAgICAgICAgICAgbGV0IGRhdGFXYXkgPSBncm91cC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXdheVwiKTtcbiAgICAgICAgICAgICAgICBpZiAoIWRhdGFXYXkpIGRhdGFXYXkgPSBcImNsb3NlZFwiO1xuICAgICAgICAgICAgICAgIGlmICghZGF0YVdheSB8fCAoZGF0YVdheSAhPT0gXCJjbG9zZWRcIiAmJiBkYXRhV2F5ICE9PSBcIm9wZW5cIikpIGRhdGFXYXkgPSBcImNsb3NlZFwiO1xuICAgICAgICAgICAgICAgIGxpLmFwcGVuZENoaWxkKHNwYW4pO1xuICAgICAgICAgICAgICAgIGxpLmFwcGVuZENoaWxkKGlDaGVjayk7XG4gICAgICAgICAgICAgICAgc2VsZi51bC5hcHBlbmRDaGlsZChsaSk7XG4gICAgICAgICAgICAgICAgbGkuY2xhc3NMaXN0LmFkZCgnZ3JvdXBlZC1vcHRpb24nKTtcbiAgICAgICAgICAgICAgICBsaS5jbGFzc0xpc3QuYWRkKGRhdGFXYXkpO1xuICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudE9wdGdyb3VwKys7XG4gICAgICAgICAgICAgICAgbGV0IG9wdElkID0gc2VsZi5yb290VG9rZW4gKyBcIi1vcHQtXCIgKyBzZWxmLmN1cnJlbnRPcHRncm91cDtcbiAgICAgICAgICAgICAgICBsaS5pZCA9IG9wdElkO1xuICAgICAgICAgICAgICAgIGxpLmFwcGVuZENoaWxkKGxhYmVsRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgbGFiZWxFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGdyb3VwLmxhYmVsKSk7XG4gICAgICAgICAgICAgICAgbGkuc2V0QXR0cmlidXRlKFwiZGF0YS10ZXh0XCIsIGdyb3VwLmxhYmVsKTtcbiAgICAgICAgICAgICAgICBzZWxmLnVsLmFwcGVuZENoaWxkKGxpKTtcblxuICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGdyb3VwT3B0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGV4dCA9IHgudGV4dENvbnRlbnQ7XG4gICAgICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IHgudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjbGFzc2VzID0geC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsYXNzZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXMgPSBjbGFzc2VzLnNwbGl0KFwiIFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2goZGF0YVdheSk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGlzU2VsZWN0ZWQgPSB4Lmhhc0F0dHJpYnV0ZShcInNlbGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnVsLmFwcGVuZENoaWxkKGxpKTtcbiAgICAgICAgICAgICAgICAgICAgbGkuc2V0QXR0cmlidXRlKFwiZGF0YS12YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGxpLnNldEF0dHJpYnV0ZShcImRhdGEtdGV4dFwiLCB0ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgbGkuc2V0QXR0cmlidXRlKFwiZGF0YS1wYXJlbnRcIiwgb3B0SWQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2xhc3Nlcy5sZW5ndGggIT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGkuY2xhc3NMaXN0LmFkZCh4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1NlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuckFjdGl2ZXMrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkVGV4dHMgKz0gc2VwICsgdGV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcCA9IHNlbGYudXNlck9wdGlvbnMuYnV0dG9uSXRlbXNTZXBhcmF0b3I7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaS5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxmLmlzTXVsdGlwbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnRpdGxlLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2xhc3Nlcy5sZW5ndGggIT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudGl0bGUuY2xhc3NMaXN0LmFkZCh4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxpLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBzZWxmLmxpc3RFbGVtZW50cyA9IHRoaXMuZHJvcC5xdWVyeVNlbGVjdG9yQWxsKFwibGk6bm90KC5ncm91cGVkLW9wdGlvbilcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5vcHRpb25zID0gc2VsZi5yb290LnF1ZXJ5U2VsZWN0b3JBbGwoXCJvcHRpb25cIik7XG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHNlbGYub3B0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgbGV0IHRleHQgPSB4LnRleHRDb250ZW50O1xuICAgICAgICAgICAgbGV0IHZhbHVlID0geC52YWx1ZTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBcImFsbFwiKSB7XG4gICAgICAgICAgICAgICAgbGV0IG9yaWdpbmFsQXR0cnM7XG4gICAgICAgICAgICAgICAgaWYgKHguaGFzQXR0cmlidXRlcygpKSB7XG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsQXR0cnMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh4LmF0dHJpYnV0ZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuZm9yYmlkZW5BdHRyaWJ1dGVzLmluZGV4T2YoYS5uYW1lKSA9PT0gLTFcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgY2xhc3NlcyA9IHguZ2V0QXR0cmlidXRlKFwiY2xhc3NcIik7XG4gICAgICAgICAgICAgICAgaWYgKGNsYXNzZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NlcyA9IGNsYXNzZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zcGxpdChcIiBcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5mb3JiaWRlbkNsYXNzZXMuaW5kZXhPZihjKSA9PT0gLTFcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzZXMgPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICAgICAgICAgICAgICAgIGxldCBpc1NlbGVjdGVkID0geC5oYXNBdHRyaWJ1dGUoXCJzZWxlY3RlZFwiKTtcblxuICAgICAgICAgICAgICAgIGxldCBpc0Rpc2FibGVkID0geC5kaXNhYmxlZDtcblxuICAgICAgICAgICAgICAgIHNlbGYudWwuYXBwZW5kQ2hpbGQobGkpO1xuICAgICAgICAgICAgICAgIGxpLnNldEF0dHJpYnV0ZShcImRhdGEtdmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGxpLnNldEF0dHJpYnV0ZShcImRhdGEtdGV4dFwiLCB0ZXh0KTtcblxuICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbEF0dHJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxBdHRycy5mb3JFYWNoKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaS5zZXRBdHRyaWJ1dGUoYS5uYW1lLCBhLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIGxpLmNsYXNzTGlzdC5hZGQoeCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5tYXhPcHRpb25XaWR0aCA8IEluZmluaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgIGxpLmNsYXNzTGlzdC5hZGQoXCJzaG9ydFwiKTtcbiAgICAgICAgICAgICAgICAgICAgbGkuc3R5bGUubWF4V2lkdGggPSBzZWxmLm1heE9wdGlvbldpZHRoICsgXCJweFwiO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpc1NlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG5yQWN0aXZlcysrO1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFRleHRzICs9IHNlcCArIHRleHQ7XG4gICAgICAgICAgICAgICAgICAgIHNlcCA9IHNlbGYudXNlck9wdGlvbnMuYnV0dG9uSXRlbXNTZXBhcmF0b3I7XG4gICAgICAgICAgICAgICAgICAgIGxpLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc2VsZi5pc011bHRpcGxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnRpdGxlLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGFzc2VzLmxlbmd0aCAhPSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudGl0bGUuY2xhc3NMaXN0LmFkZCh4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNEaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICBsaS5jbGFzc0xpc3QuYWRkKFwiZGlzYWJsZWRcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxpLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiIFwiICsgdGV4dCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbn1cblxudmFuaWxsYVNlbGVjdEJveC5wcm90b3R5cGUuZGlzYWJsZUl0ZW1zID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBsZXQgZm91bmRWYWx1ZXMgPSBbXTtcbiAgICBpZiAodmFuaWxsYVNlbGVjdEJveF90eXBlKHZhbHVlcykgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICB2YWx1ZXMgPSB2YWx1ZXMuc3BsaXQoXCIsXCIpO1xuICAgIH1cblxuICAgIGlmICh2YW5pbGxhU2VsZWN0Qm94X3R5cGUodmFsdWVzKSA9PSBcImFycmF5XCIpIHtcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoc2VsZi5vcHRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICBpZiAodmFsdWVzLmluZGV4T2YoeC52YWx1ZSkgIT0gLTEpIHtcbiAgICAgICAgICAgICAgICBmb3VuZFZhbHVlcy5wdXNoKHgudmFsdWUpO1xuICAgICAgICAgICAgICAgIHguc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChzZWxmLmxpc3RFbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICBsZXQgdmFsID0geC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXZhbHVlXCIpO1xuICAgICAgICBpZiAoZm91bmRWYWx1ZXMuaW5kZXhPZih2YWwpICE9IC0xKSB7XG4gICAgICAgICAgICB4LmNsYXNzTGlzdC5hZGQoXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG52YW5pbGxhU2VsZWN0Qm94LnByb3RvdHlwZS5lbmFibGVJdGVtcyA9IGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgbGV0IGZvdW5kVmFsdWVzID0gW107XG4gICAgaWYgKHZhbmlsbGFTZWxlY3RCb3hfdHlwZSh2YWx1ZXMpID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdmFsdWVzID0gdmFsdWVzLnNwbGl0KFwiLFwiKTtcbiAgICB9XG5cbiAgICBpZiAodmFuaWxsYVNlbGVjdEJveF90eXBlKHZhbHVlcykgPT0gXCJhcnJheVwiKSB7XG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHNlbGYub3B0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgaWYgKHZhbHVlcy5pbmRleE9mKHgudmFsdWUpICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgZm91bmRWYWx1ZXMucHVzaCh4LnZhbHVlKTtcbiAgICAgICAgICAgICAgICB4LnJlbW92ZUF0dHJpYnV0ZShcImRpc2FibGVkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChzZWxmLmxpc3RFbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICBpZiAoZm91bmRWYWx1ZXMuaW5kZXhPZih4LmdldEF0dHJpYnV0ZShcImRhdGEtdmFsdWVcIikpICE9IC0xKSB7XG4gICAgICAgICAgICB4LmNsYXNzTGlzdC5yZW1vdmUoXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG52YW5pbGxhU2VsZWN0Qm94LnByb3RvdHlwZS5jaGVja1NlbGVjdE1heCA9IGZ1bmN0aW9uIChuckFjdGl2ZXMpIHtcbiAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgaWYgKHNlbGYubWF4U2VsZWN0ID09IEluZmluaXR5IHx8ICFzZWxmLmlzTXVsdGlwbGUpIHJldHVybjtcbiAgICBpZiAoc2VsZi5tYXhTZWxlY3QgPD0gbnJBY3RpdmVzKSB7XG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHNlbGYubGlzdEVsZW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICBpZiAoeC5oYXNBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSkge1xuICAgICAgICAgICAgICAgIGlmICgheC5jbGFzc0xpc3QuY29udGFpbnMoJ2Rpc2FibGVkJykgJiYgIXguY2xhc3NMaXN0LmNvbnRhaW5zKCdhY3RpdmUnKSkge1xuICAgICAgICAgICAgICAgICAgICB4LmNsYXNzTGlzdC5hZGQoXCJvdmVyZmxvd1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHNlbGYubGlzdEVsZW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICBpZiAoeC5jbGFzc0xpc3QuY29udGFpbnMoJ292ZXJmbG93JykpIHtcbiAgICAgICAgICAgICAgICB4LmNsYXNzTGlzdC5yZW1vdmUoXCJvdmVyZmxvd1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG52YW5pbGxhU2VsZWN0Qm94LnByb3RvdHlwZS5jaGVja1VuY2hlY2tGcm9tQ2hpbGQgPSBmdW5jdGlvbiAobGlDbGlja2VkKSB7XG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIGxldCBwYXJlbnRJZCA9IGxpQ2xpY2tlZC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGFyZW50Jyk7XG4gICAgbGV0IHBhcmVudExpID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocGFyZW50SWQpO1xuICAgIGlmICghc2VsZi5pc011bHRpcGxlKSByZXR1cm47XG4gICAgbGV0IGxpc3RFbGVtZW50cyA9IHNlbGYuZHJvcC5xdWVyeVNlbGVjdG9yQWxsKFwibGlcIik7XG4gICAgbGV0IGNoaWxkcmVuRWxlbWVudHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChsaXN0RWxlbWVudHMpLmZpbHRlcihmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgcmV0dXJuIGVsLmhhc0F0dHJpYnV0ZShcImRhdGEtcGFyZW50XCIpICYmIGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1wYXJlbnQnKSA9PSBwYXJlbnRJZCAgJiYgIWVsLmNsYXNzTGlzdC5jb250YWlucygnaGlkZGVuLXNlYXJjaCcpIDtcbiAgICB9KTtcbiAgICBsZXQgbnJDaGVja2VkID0gMDtcbiAgICBsZXQgbnJDaGVja2FibGUgPSBjaGlsZHJlbkVsZW1lbnRzLmxlbmd0aDtcbiAgICBpZiAobnJDaGVja2FibGUgPT0gMCkgcmV0dXJuO1xuICAgIGNoaWxkcmVuRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgaWYgKGVsLmNsYXNzTGlzdC5jb250YWlucygnYWN0aXZlJykpIG5yQ2hlY2tlZCsrO1xuICAgIH0pO1xuICAgIGlmIChuckNoZWNrZWQgPT09IG5yQ2hlY2thYmxlIHx8IG5yQ2hlY2tlZCA9PT0gMCkge1xuICAgICAgICBpZiAobnJDaGVja2VkID09PSAwKSB7XG4gICAgICAgICAgICBwYXJlbnRMaS5jbGFzc0xpc3QucmVtb3ZlKFwiY2hlY2tlZFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcmVudExpLmNsYXNzTGlzdC5hZGQoXCJjaGVja2VkXCIpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50TGkuY2xhc3NMaXN0LnJlbW92ZShcImNoZWNrZWRcIik7XG4gICAgfVxufVxuXG52YW5pbGxhU2VsZWN0Qm94LnByb3RvdHlwZS5jaGVja1VuY2hlY2tGcm9tUGFyZW50ID0gZnVuY3Rpb24gKGxpQ2xpY2tlZCkge1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBsZXQgcGFyZW50SWQgPSBsaUNsaWNrZWQuaWQ7XG4gICAgaWYgKCFzZWxmLmlzTXVsdGlwbGUpIHJldHVybjtcbiAgICBsZXQgbGlzdEVsZW1lbnRzID0gc2VsZi5kcm9wLnF1ZXJ5U2VsZWN0b3JBbGwoXCJsaVwiKTtcbiAgICBsZXQgY2hpbGRyZW5FbGVtZW50cyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGxpc3RFbGVtZW50cykuZmlsdGVyKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICByZXR1cm4gZWwuaGFzQXR0cmlidXRlKFwiZGF0YS1wYXJlbnRcIikgJiYgZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXBhcmVudCcpID09IHBhcmVudElkICYmICFlbC5jbGFzc0xpc3QuY29udGFpbnMoJ2hpZGRlbi1zZWFyY2gnKTtcbiAgICB9KTtcbiAgICBsZXQgbnJDaGVja2VkID0gMDtcbiAgICBsZXQgbnJDaGVja2FibGUgPSBjaGlsZHJlbkVsZW1lbnRzLmxlbmd0aDtcbiAgICBpZiAobnJDaGVja2FibGUgPT0gMCkgcmV0dXJuO1xuICAgIGNoaWxkcmVuRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgaWYgKGVsLmNsYXNzTGlzdC5jb250YWlucygnYWN0aXZlJykpIG5yQ2hlY2tlZCsrO1xuICAgIH0pO1xuICAgIGlmIChuckNoZWNrZWQgPT09IG5yQ2hlY2thYmxlIHx8IG5yQ2hlY2tlZCA9PT0gMCkge1xuICAgICAgICAvL2NoZWNrIGFsbCBvciB1bmNoZWNrQWxsIDoganVzdCBkbyB0aGUgb3Bwb3NpdGVcbiAgICAgICAgY2hpbGRyZW5FbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgdmFyIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcbiAgICAgICAgICAgIGV2ZW50LmluaXRFdmVudCgnY2xpY2snLCB0cnVlLCBmYWxzZSk7XG4gICAgICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChuckNoZWNrZWQgPT09IDApIHtcbiAgICAgICAgICAgIGxpQ2xpY2tlZC5jbGFzc0xpc3QuYWRkKFwiY2hlY2tlZFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpQ2xpY2tlZC5jbGFzc0xpc3QucmVtb3ZlKFwiY2hlY2tlZFwiKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vY2hlY2sgYWxsXG4gICAgICAgIGxpQ2xpY2tlZC5jbGFzc0xpc3QucmVtb3ZlKFwiY2hlY2tlZFwiKTtcbiAgICAgICAgY2hpbGRyZW5FbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgaWYgKCFlbC5jbGFzc0xpc3QuY29udGFpbnMoJ2FjdGl2ZScpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcbiAgICAgICAgICAgICAgICBldmVudC5pbml0RXZlbnQoJ2NsaWNrJywgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGVsLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbnZhbmlsbGFTZWxlY3RCb3gucHJvdG90eXBlLmNoZWNrVW5jaGVja0FsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmlzTXVsdGlwbGUpIHJldHVybjtcbiAgICBsZXQgbnJDaGVja2VkID0gMDtcbiAgICBsZXQgbnJDaGVja2FibGUgPSAwO1xuICAgIGxldCBjaGVja0FsbEVsZW1lbnQgPSBudWxsO1xuICAgIGlmIChzZWxmLmxpc3RFbGVtZW50cyA9PSBudWxsKSByZXR1cm47XG4gICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoc2VsZi5saXN0RWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgaWYgKHguaGFzQXR0cmlidXRlKCdkYXRhLXZhbHVlJykpIHtcbiAgICAgICAgICAgIGlmICh4LmdldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpID09PSAnYWxsJykge1xuICAgICAgICAgICAgICAgIGNoZWNrQWxsRWxlbWVudCA9IHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoeC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSAhPT0gJ2FsbCdcbiAgICAgICAgICAgICAgICAmJiAheC5jbGFzc0xpc3QuY29udGFpbnMoJ2hpZGRlbi1zZWFyY2gnKVxuICAgICAgICAgICAgICAgICYmICF4LmNsYXNzTGlzdC5jb250YWlucygnZGlzYWJsZWQnKSkge1xuICAgICAgICAgICAgICAgIG5yQ2hlY2thYmxlKys7XG4gICAgICAgICAgICAgICAgbnJDaGVja2VkICs9IHguY2xhc3NMaXN0LmNvbnRhaW5zKCdhY3RpdmUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGNoZWNrQWxsRWxlbWVudCkge1xuICAgICAgICBpZiAobnJDaGVja2VkID09PSBuckNoZWNrYWJsZSkge1xuICAgICAgICAgICAgLy8gY2hlY2sgdGhlIGNoZWNrQWxsIGNoZWNrYm94XG4gICAgICAgICAgICBzZWxmLnRpdGxlLnRleHRDb250ZW50ID0gc2VsZi51c2VyT3B0aW9ucy50cmFuc2xhdGlvbnMuYWxsO1xuICAgICAgICAgICAgY2hlY2tBbGxFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XG4gICAgICAgICAgICBjaGVja0FsbEVsZW1lbnQuaW5uZXJUZXh0ID0gc2VsZi51c2VyT3B0aW9ucy50cmFuc2xhdGlvbnMuY2xlYXJBbGw7XG4gICAgICAgICAgICBjaGVja0FsbEVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXNlbGVjdGVkJywgJ3RydWUnKVxuICAgICAgICB9IGVsc2UgaWYgKG5yQ2hlY2tlZCA9PT0gMCkge1xuICAgICAgICAgICAgLy8gdW5jaGVjayB0aGUgY2hlY2tBbGwgY2hlY2tib3hcbiAgICAgICAgICAgIHNlbGYudGl0bGUudGV4dENvbnRlbnQgPSBzZWxmLnVzZXJPcHRpb25zLnBsYWNlSG9sZGVyO1xuICAgICAgICAgICAgY2hlY2tBbGxFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XG4gICAgICAgICAgICBjaGVja0FsbEVsZW1lbnQuaW5uZXJUZXh0ID0gc2VsZi51c2VyT3B0aW9ucy50cmFuc2xhdGlvbnMuc2VsZWN0QWxsO1xuICAgICAgICAgICAgY2hlY2tBbGxFbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1zZWxlY3RlZCcsICdmYWxzZScpXG4gICAgICAgIH1cbiAgICB9XG59XG5cbnZhbmlsbGFTZWxlY3RCb3gucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBsZXQgbGlzdEVsZW1lbnRzID0gc2VsZi5kcm9wLnF1ZXJ5U2VsZWN0b3JBbGwoXCJsaVwiKTtcblxuICAgIGlmICh2YWx1ZXMgPT0gbnVsbCB8fCB2YWx1ZXMgPT0gdW5kZWZpbmVkIHx8IHZhbHVlcyA9PSBcIlwiKSB7XG4gICAgICAgIHNlbGYuZW1wdHkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc2VsZi5pc011bHRpcGxlKSB7XG4gICAgICAgICAgICBpZiAodmFuaWxsYVNlbGVjdEJveF90eXBlKHZhbHVlcykgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZXMgPT09IFwiYWxsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzID0gW107XG4gICAgICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGxpc3RFbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHguaGFzQXR0cmlidXRlKCdkYXRhLXZhbHVlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSB4LmdldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gJ2FsbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF4LmNsYXNzTGlzdC5jb250YWlucygnaGlkZGVuLXNlYXJjaCcpICYmICF4LmNsYXNzTGlzdC5jb250YWlucygnZGlzYWJsZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzLnB1c2goeC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWxyZWFkeSBjaGVja2VkIChidXQgaGlkZGVuIGJ5IHNlYXJjaClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHguY2xhc3NMaXN0LmNvbnRhaW5zKCdhY3RpdmUnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHguY2xhc3NMaXN0LmNvbnRhaW5zKCdoaWRkZW4tc2VhcmNoJykgfHwgeC5jbGFzc0xpc3QuY29udGFpbnMoJ2Rpc2FibGVkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoeC5jbGFzc0xpc3QuY29udGFpbnMoJ2dyb3VwZWQtb3B0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4LmNsYXNzTGlzdC5hZGQoXCJjaGVja2VkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlcyA9PT0gXCJub25lXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzID0gW107XG4gICAgICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGxpc3RFbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHguaGFzQXR0cmlidXRlKCdkYXRhLXZhbHVlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSB4LmdldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gJ2FsbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHguY2xhc3NMaXN0LmNvbnRhaW5zKCdhY3RpdmUnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHguY2xhc3NMaXN0LmNvbnRhaW5zKCdoaWRkZW4tc2VhcmNoJykgfHwgeC5jbGFzc0xpc3QuY29udGFpbnMoJ2Rpc2FibGVkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHguY2xhc3NMaXN0LmNvbnRhaW5zKCdncm91cGVkLW9wdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeC5jbGFzc0xpc3QucmVtb3ZlKFwiY2hlY2tlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzID0gdmFsdWVzLnNwbGl0KFwiLFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZm91bmRWYWx1ZXMgPSBbXTtcbiAgICAgICAgICAgIGlmICh2YW5pbGxhU2VsZWN0Qm94X3R5cGUodmFsdWVzKSA9PSBcImFycmF5XCIpIHtcbiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChzZWxmLm9wdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlcy5pbmRleE9mKHgudmFsdWUpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgeC5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3VuZFZhbHVlcy5wdXNoKHgudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgeC5zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbGV0IHNlbGVjdGVkVGV4dHMgPSBcIlwiXG4gICAgICAgICAgICAgICAgbGV0IHNlcCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgbGV0IG5yQWN0aXZlcyA9IDA7XG4gICAgICAgICAgICAgICAgbGV0IG5yQWxsID0gMDtcbiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChsaXN0RWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHgudmFsdWUgIT09ICdhbGwnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuckFsbCsrO1xuICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvdW5kVmFsdWVzLmluZGV4T2YoeC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXZhbHVlXCIpKSAhPSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgeC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbnJBY3RpdmVzKys7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFRleHRzICs9IHNlcCArIHguZ2V0QXR0cmlidXRlKFwiZGF0YS10ZXh0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VwID0gc2VsZi51c2VyT3B0aW9ucy5idXR0b25JdGVtc1NlcGFyYXRvcjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHguY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChuckFsbCA9PSBuckFjdGl2ZXMgLSBOdW1iZXIoIXNlbGYudXNlck9wdGlvbnMuZGlzYWJsZVNlbGVjdEFsbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHdvcmRGb3JBbGwgPSBzZWxmLnVzZXJPcHRpb25zLnRyYW5zbGF0aW9ucy5hbGw7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkVGV4dHMgPSB3b3JkRm9yQWxsO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZi5tdWx0aXBsZVNpemUgIT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5yQWN0aXZlcyA+IHNlbGYubXVsdGlwbGVTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgd29yZEZvckl0ZW1zID0gbnJBY3RpdmVzID09PSAxID8gc2VsZi51c2VyT3B0aW9ucy50cmFuc2xhdGlvbnMuaXRlbSA6IHNlbGYudXNlck9wdGlvbnMudHJhbnNsYXRpb25zLml0ZW1zO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRUZXh0cyA9IG5yQWN0aXZlcyArIFwiIFwiICsgd29yZEZvckl0ZW1zO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlbGYudGl0bGUudGV4dENvbnRlbnQgPSBzZWxlY3RlZFRleHRzO1xuICAgICAgICAgICAgICAgIHNlbGYucHJpdmF0ZVNlbmRDaGFuZ2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuY2hlY2tVbmNoZWNrQWxsKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgZm91bmQgPSBmYWxzZTtcbiAgICAgICAgICAgIGxldCB0ZXh0ID0gXCJcIjtcbiAgICAgICAgICAgIGxldCBjbGFzc05hbWVzID0gXCJcIlxuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobGlzdEVsZW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgbGV0IGxpVmFsID0geC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXZhbHVlXCIpID09IHZhbHVlcztcbiAgICAgICAgICAgICAgICBpZihsaVZhbCAhPT0gXCJhbGxcIil7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsaVZhbCA9PSB2YWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHguY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSB4LmdldEF0dHJpYnV0ZShcImRhdGEtdGV4dFwiKVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgeC5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChzZWxmLm9wdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICBpZiAoeC52YWx1ZSA9PSB2YWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgeC5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9IHguZ2V0QXR0cmlidXRlKFwiY2xhc3NcIik7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY2xhc3NOYW1lKSBjbGFzc05hbWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHguc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChmb3VuZCkge1xuICAgICAgICAgICAgICAgIHNlbGYudGl0bGUudGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLnVzZXJPcHRpb25zLnBsYWNlSG9sZGVyICE9IFwiXCIgJiYgc2VsZi50aXRsZS50ZXh0Q29udGVudCA9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYudGl0bGUudGV4dENvbnRlbnQgPSBzZWxmLnVzZXJPcHRpb25zLnBsYWNlSG9sZGVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2xhc3NOYW1lICE9IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi50aXRsZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBjbGFzc05hbWUgKyBcIiB0aXRsZVwiKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnRpdGxlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwidGl0bGVcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG52YW5pbGxhU2VsZWN0Qm94LnByb3RvdHlwZS5wcml2YXRlU2VuZENoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpO1xuICAgIGV2ZW50LmluaXRFdmVudCgnY2hhbmdlJywgdHJ1ZSwgZmFsc2UpO1xuICAgIHRoaXMucm9vdC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn1cblxudmFuaWxsYVNlbGVjdEJveC5wcm90b3R5cGUuZW1wdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5saXN0RWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgeC5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xuICAgIH0pO1xuICAgIGxldCBwYXJlbnRFbGVtZW50cyA9IHRoaXMuZHJvcC5xdWVyeVNlbGVjdG9yQWxsKFwibGkuZ3JvdXBlZC1vcHRpb25cIik7XG4gICAgaWYocGFyZW50RWxlbWVudHMpe1xuICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChwYXJlbnRFbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgeC5jbGFzc0xpc3QucmVtb3ZlKFwiY2hlY2tlZFwiKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMub3B0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICB4LnNlbGVjdGVkID0gZmFsc2U7XG4gICAgfSk7XG4gICAgdGhpcy50aXRsZS50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgaWYgKHRoaXMudXNlck9wdGlvbnMucGxhY2VIb2xkZXIgIT0gXCJcIiAmJiB0aGlzLnRpdGxlLnRleHRDb250ZW50ID09IFwiXCIpIHtcbiAgICAgICAgdGhpcy50aXRsZS50ZXh0Q29udGVudCA9IHRoaXMudXNlck9wdGlvbnMucGxhY2VIb2xkZXI7XG4gICAgfVxuICAgIHRoaXMuY2hlY2tVbmNoZWNrQWxsKCk7XG4gICAgdGhpcy5wcml2YXRlU2VuZENoYW5nZSgpO1xufVxuXG52YW5pbGxhU2VsZWN0Qm94LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIGxldCBhbHJlYWR5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidG4tZ3JvdXAtXCIgKyB0aGlzLnJvb3RUb2tlbik7XG4gICAgaWYgKGFscmVhZHkpIHtcbiAgICAgICAgVlNCb3hDb3VudGVyLnJlbW92ZSh0aGlzLmluc3RhbmNlT2Zmc2V0KTtcbiAgICAgICAgYWxyZWFkeS5yZW1vdmUoKTtcbiAgICAgICAgdGhpcy5yb290LnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuICAgIH1cbn1cbnZhbmlsbGFTZWxlY3RCb3gucHJvdG90eXBlLmRpc2FibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGFscmVhZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ0bi1ncm91cC1cIiArIHRoaXMucm9vdFRva2VuKTtcbiAgICBpZiAoYWxyZWFkeSkge1xuICAgICAgICBidXR0b24gPSBhbHJlYWR5LnF1ZXJ5U2VsZWN0b3IoXCJidXR0b25cIilcbiAgICAgICAgaWYgKGJ1dHRvbikgYnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgdGhpcy5pc0Rpc2FibGVkID0gdHJ1ZTtcbiAgICB9XG59XG52YW5pbGxhU2VsZWN0Qm94LnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGFscmVhZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ0bi1ncm91cC1cIiArIHRoaXMucm9vdFRva2VuKTtcbiAgICBpZiAoYWxyZWFkeSkge1xuICAgICAgICBidXR0b24gPSBhbHJlYWR5LnF1ZXJ5U2VsZWN0b3IoXCJidXR0b25cIilcbiAgICAgICAgaWYgKGJ1dHRvbikgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgdGhpcy5pc0Rpc2FibGVkID0gZmFsc2U7XG4gICAgfVxufVxuXG52YW5pbGxhU2VsZWN0Qm94LnByb3RvdHlwZS5zaG93T3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zb2xlLmxvZyh0aGlzLnVzZXJPcHRpb25zKTtcbn1cbi8vIFBvbHlmaWxscyBmb3IgSUVcbmlmICghKCdyZW1vdmUnIGluIEVsZW1lbnQucHJvdG90eXBlKSkge1xuICAgIEVsZW1lbnQucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gdmFuaWxsYVNlbGVjdEJveF90eXBlKHRhcmdldCkge1xuICAgIGNvbnN0IGNvbXB1dGVkVHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0YXJnZXQpO1xuICAgIGNvbnN0IHN0cmlwcGVkID0gY29tcHV0ZWRUeXBlLnJlcGxhY2UoXCJbb2JqZWN0IFwiLCBcIlwiKS5yZXBsYWNlKFwiXVwiLCBcIlwiKTtcbiAgICBjb25zdCBsb3dlcmNhc2VkID0gc3RyaXBwZWQudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gbG93ZXJjYXNlZDtcbn1cbiJdLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2dyYW50L211bHRpc2VsZWN0L3ZhbmlsbGFTZWxlY3RCb3guanMuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets/grant/multiselect/vanillaSelectBox.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/grant/multiselect/vanillaSelectBox.js"]();
/******/ 	
/******/ })()
;